{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BigTranscript = void 0;\n\nvar react_1 = __importStar(require(\"react\"));\n\nvar react_client_1 = require(\"@speechly/react-client\");\n\nvar types_1 = require(\"../types\");\n/**\n * A React component that renders the transcript and entities received from Speechly SLU API.\n *\n * The component is intended to be used for providing visual feedback to the speaker.\n *\n * @public\n */\n\n\nvar BigTranscript = function (_a) {\n  var placement = _a.placement,\n      formatText = _a.formatText,\n      fontSize = _a.fontSize,\n      color = _a.color,\n      highlightColor = _a.highlightColor,\n      backgroundColor = _a.backgroundColor,\n      _b = _a.marginBottom,\n      marginBottom = _b === void 0 ? '2rem' : _b,\n      mockSegment = _a.mockSegment;\n\n  var _c = (0, react_client_1.useSpeechContext)(),\n      segment = _c.segment,\n      speechState = _c.speechState;\n\n  var refElement = (0, react_1.useRef)();\n\n  var _d = (0, react_1.useState)(false),\n      loaded = _d[0],\n      setLoaded = _d[1];\n\n  var _e = (0, react_1.useState)(false),\n      demoMode = _e[0],\n      setDemoMode = _e[1]; // Dynamic import of HTML custom element to play nice with Next.js SSR\n\n\n  (0, react_1.useEffect)(function () {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    (function () {\n      return __awaiter(void 0, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , Promise.resolve().then(function () {\n                return __importStar(require('@speechly/browser-ui/core/big-transcript'));\n              })];\n\n            case 1:\n              _a.sent();\n\n              setLoaded(true);\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    })();\n  }, []); // Change button face according to Speechly states\n\n  (0, react_1.useEffect)(function () {\n    if ((refElement === null || refElement === void 0 ? void 0 : refElement.current) !== undefined && speechState !== undefined) {\n      refElement.current.speechstate((0, types_1.mapSpeechStateToClientState)(speechState));\n    }\n  }, [speechState]);\n  (0, react_1.useEffect)(function () {\n    if ((refElement === null || refElement === void 0 ? void 0 : refElement.current) !== undefined && segment !== undefined) {\n      setDemoMode(false);\n      refElement.current.speechsegment(segment);\n    }\n  }, [segment]);\n  (0, react_1.useEffect)(function () {\n    if ((refElement === null || refElement === void 0 ? void 0 : refElement.current) !== undefined && mockSegment !== undefined) {\n      setDemoMode(true);\n      refElement.current.speechsegment(mockSegment);\n    }\n  }, [mockSegment]);\n  if (!loaded) return null;\n  return react_1.default.createElement(\"big-transcript\", {\n    ref: refElement,\n    placement: placement,\n    demomode: demoMode ? 'true' : 'false',\n    formattext: formatText !== null && formatText === false ? 'false' : 'true',\n    fontsize: fontSize,\n    color: color,\n    highlightcolor: highlightColor,\n    backgroundcolor: backgroundColor,\n    marginbottom: marginBottom\n  });\n};\n\nexports.BigTranscript = BigTranscript;","map":{"version":3,"mappings":"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","names":["BigTranscript","_a","placement","formatText","fontSize","color","highlightColor","backgroundColor","_b","marginBottom","mockSegment","segment","speechState","refElement","loaded","setLoaded","demoMode","setDemoMode","current","undefined","speechstate","speechsegment","react_1","ref","demomode","formattext","fontsize","highlightcolor","backgroundcolor","marginbottom","exports"],"sources":["/react-ui/src/components/BigTranscript.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport { SpeechSegment, useSpeechContext } from '@speechly/react-client'\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace JSX {\n    interface IntrinsicElements {\n      'big-transcript': any\n    }\n  }\n}\n\n/**\n * Properties for BigTranscript component.\n *\n * @public\n */\nexport type BigTranscriptProps = {\n  /**\n   * Optional \"top\" string turns on internal placement without any CSS positioning.\n   */\n  placement?: string\n  /**\n   * Optional boolean. If true, transcript is formatted with detected entities, e.g. numbers. Default: true\n   */\n  formatText?: boolean\n  /**\n   * Optional CSS string for text size. Default: \"1.5rem\"\n   */\n  fontSize?: string\n  /**\n   * Optional string (CSS color) for text. Default: \"#ffffff\"\n   */\n  color?: string\n  /**\n   * Optional string (CSS color) for entity highlighting, vu meter and acknowledged icon. Default: \"#15e8b5\"\n   */\n  highlightColor?: string\n  /**\n   * Optional string (CSS color) for hint text background. Default: \"#202020\"\n   */\n  backgroundColor?: string\n  /**\n   * Optional string (CSS dimension). Dynamic margin added when element is visible. Default: \"0rem\"\n   */\n  marginBottom?: string\n  /**\n   * Optional SpeechSegment to be displayed instead of actual transcription from API. Can be used to demonstrate voice functionality to the user.\n   */\n  mockSegment?: SpeechSegment | undefined\n}\n\n/**\n * A React component that renders the transcript and entities received from Speechly SLU API.\n *\n * The component is intended to be used for providing visual feedback to the speaker.\n *\n * @public\n */\nexport const BigTranscript: React.FC<BigTranscriptProps> = ({\n  placement,\n  formatText,\n  fontSize,\n  color,\n  highlightColor,\n  backgroundColor,\n  marginBottom = '2rem',\n  mockSegment,\n}) => {\n  const { segment, clientState } = useSpeechContext()\n  const refElement = useRef<any>()\n  const [loaded, setLoaded] = useState(false)\n  const [demoMode, setDemoMode] = useState(false)\n\n  // Dynamic import of HTML custom element to play nice with Next.js SSR\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    (async () => {\n      await import('@speechly/browser-ui/core/big-transcript')\n      setLoaded(true)\n    })()\n  }, [])\n\n  // Change button face according to Speechly states\n  useEffect(() => {\n    if (refElement?.current !== undefined && clientState !== undefined) {\n      refElement.current.speechstate(clientState)\n    }\n  }, [clientState])\n\n  useEffect(() => {\n    if (refElement?.current !== undefined && segment !== undefined) {\n      setDemoMode(false)\n      refElement.current.speechsegment(segment)\n    }\n  }, [segment])\n\n  useEffect(() => {\n    if (refElement?.current !== undefined && mockSegment !== undefined) {\n      setDemoMode(true)\n      refElement.current.speechsegment(mockSegment)\n    }\n  }, [mockSegment])\n\n  if (!loaded) return null\n\n  return (\n    <big-transcript ref={refElement} placement={placement} demomode={demoMode ? 'true' : 'false'} formattext={(formatText !== null && formatText === false) ? 'false' : 'true'} fontsize={fontSize} color={color} highlightcolor={highlightColor} backgroundcolor={backgroundColor} marginbottom={marginBottom}></big-transcript>\n  )\n}\n"]},"metadata":{},"sourceType":"script"}