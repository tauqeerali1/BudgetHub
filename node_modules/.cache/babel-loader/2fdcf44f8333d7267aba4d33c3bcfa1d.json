{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mapSpeechStateToClientState = exports.SpeechlyUiEvents = void 0;\n\nvar browser_client_1 = require(\"@speechly/browser-client\");\n\nvar react_client_1 = require(\"@speechly/react-client\");\n\nvar SpeechlyUiEvents;\n\n(function (SpeechlyUiEvents) {\n  SpeechlyUiEvents[\"TangentRelease\"] = \"TangentRelease\";\n  SpeechlyUiEvents[\"TangentPress\"] = \"TangentPress\";\n  SpeechlyUiEvents[\"Notification\"] = \"Notification\";\n  SpeechlyUiEvents[\"WarningNotification\"] = \"WarningNotification\";\n  SpeechlyUiEvents[\"DismissNotification\"] = \"DismissNotification\";\n})(SpeechlyUiEvents = exports.SpeechlyUiEvents || (exports.SpeechlyUiEvents = {}));\n\n;\n\nvar mapSpeechStateToClientState = function (s) {\n  switch (s) {\n    case react_client_1.SpeechState.Failed:\n      return browser_client_1.ClientState.Failed;\n\n    case react_client_1.SpeechState.NoBrowserSupport:\n      return browser_client_1.ClientState.NoBrowserSupport;\n\n    case react_client_1.SpeechState.NoAudioConsent:\n      return browser_client_1.ClientState.NoAudioConsent;\n\n    case react_client_1.SpeechState.Idle:\n      return browser_client_1.ClientState.Disconnected;\n    // return ClientState.Disconnecting:\n\n    case react_client_1.SpeechState.Connecting:\n      return browser_client_1.ClientState.Connecting;\n\n    case react_client_1.SpeechState.Ready:\n      return browser_client_1.ClientState.Connected;\n\n    case react_client_1.SpeechState.Recording:\n      // return ClientState.Starting:\n      return browser_client_1.ClientState.Recording;\n\n    case react_client_1.SpeechState.Loading:\n      return browser_client_1.ClientState.Stopping;\n\n    default:\n      return browser_client_1.ClientState.Failed;\n  }\n};\n\nexports.mapSpeechStateToClientState = mapSpeechStateToClientState;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AAEA,IAAYA,gBAAZ;;AAAA,WAAYA,gBAAZ,EAA4B;AAC1BA;AACAA;AACAA;AACAA;AACAA;AACD,CAND,EAAYA,gBAAgB,GAAhBC,wDAAgB,EAAhB,CAAZ;;AAMC;;AAEM,IAAMC,2BAA2B,GAAG,UAACC,CAAD,EAAe;AACxD,UAAQA,CAAR;AACE,SAAKC,2BAAYC,MAAjB;AACE,aAAOC,6BAAYD,MAAnB;;AACF,SAAKD,2BAAYG,gBAAjB;AACE,aAAOD,6BAAYC,gBAAnB;;AACF,SAAKH,2BAAYI,cAAjB;AACE,aAAOF,6BAAYE,cAAnB;;AACF,SAAKJ,2BAAYK,IAAjB;AACE,aAAOH,6BAAYI,YAAnB;AACA;;AACF,SAAKN,2BAAYO,UAAjB;AACE,aAAOL,6BAAYK,UAAnB;;AACF,SAAKP,2BAAYQ,KAAjB;AACE,aAAON,6BAAYO,SAAnB;;AACF,SAAKT,2BAAYU,SAAjB;AACE;AACA,aAAOR,6BAAYQ,SAAnB;;AACF,SAAKV,2BAAYW,OAAjB;AACE,aAAOT,6BAAYU,QAAnB;;AACF;AACE,aAAOV,6BAAYD,MAAnB;AApBJ;AAsBD,CAvBM;;AAAMJ,sCAA2BC,2BAA3B","names":["SpeechlyUiEvents","exports","mapSpeechStateToClientState","s","react_client_1","Failed","browser_client_1","NoBrowserSupport","NoAudioConsent","Idle","Disconnected","Connecting","Ready","Connected","Recording","Loading","Stopping"],"sources":["/react-ui/src/types.ts"],"sourcesContent":["export enum SpeechlyUiEvents {\n  TangentRelease = 'TangentRelease',\n  TangentPress = 'TangentPress',\n  Notification = 'Notification',\n  WarningNotification = 'WarningNotification',\n  DismissNotification = 'DismissNotification',\n};\n"]},"metadata":{},"sourceType":"script"}