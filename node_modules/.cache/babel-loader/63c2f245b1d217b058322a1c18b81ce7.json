{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SpeechProvider = exports.SpeechContext = void 0;\n\nvar react_1 = __importDefault(require(\"react\"));\n\nvar browser_client_1 = require(\"@speechly/browser-client\");\n\nvar types_1 = require(\"./types\");\n\nvar state_1 = require(\"./state\");\n/**\n * A React context that holds the state of Speechly SLU API client.\n * @public\n */\n\n\nexports.SpeechContext = react_1.default.createContext({\n  initialise: function () {\n    return __awaiter(void 0, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , Promise.resolve()];\n      });\n    });\n  },\n  toggleRecording: function () {\n    return __awaiter(void 0, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , Promise.resolve()];\n      });\n    });\n  },\n  switchApp: function () {},\n  speechState: types_1.SpeechState.Idle\n});\n/**\n * The provider for SpeechContext.\n *\n * Make sure you have only one SpeechProvider in your application,\n * because otherwise the audio will be mixed up and unusable.\n *\n * It is possible to switch the props on the fly, which will make provider stop current client if it's running\n * and start a new one.\n * @public\n */\n\nvar SpeechProvider =\n/** @class */\nfunction (_super) {\n  __extends(SpeechProvider, _super);\n\n  function SpeechProvider(props) {\n    var _this = _super.call(this, props) || this; // init at mount mount time for to play it nice with SSR\n\n\n    _this.componentDidMount = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          this.setState(__assign(__assign({}, this.state), {\n            client: this.initialiseClient(this.props)\n          }));\n          return [2\n          /*return*/\n          ];\n        });\n      });\n    };\n\n    _this.initialiseAudio = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _a, client, clientState;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              _a = this.state, client = _a.client, clientState = _a.clientState;\n              if (!(clientState === browser_client_1.ClientState.Disconnected)) return [3\n              /*break*/\n              , 2];\n              return [4\n              /*yield*/\n              , client === null || client === void 0 ? void 0 : client.initialize()];\n\n            case 1:\n              _b.sent();\n\n              _b.label = 2;\n\n            case 2:\n              return [2\n              /*return*/\n              , Promise.resolve()];\n          }\n        });\n      });\n    };\n\n    _this.startContext = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _a, client, clientState, appId, startedContextPromise, _b;\n\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              _a = this.state, client = _a.client, clientState = _a.clientState, appId = _a.appId;\n              _b = clientState;\n\n              switch (_b) {\n                case browser_client_1.ClientState.Disconnected:\n                  return [3\n                  /*break*/\n                  , 1];\n\n                case browser_client_1.ClientState.Connected:\n                  return [3\n                  /*break*/\n                  , 3];\n\n                case browser_client_1.ClientState.Stopping:\n                  return [3\n                  /*break*/\n                  , 3];\n              }\n\n              return [3\n              /*break*/\n              , 4];\n\n            case 1:\n              return [4\n              /*yield*/\n              , client === null || client === void 0 ? void 0 : client.initialize() // falls through\n              ];\n\n            case 2:\n              _c.sent();\n\n              _c.label = 3;\n\n            case 3:\n              if (appId !== undefined) {\n                startedContextPromise = client === null || client === void 0 ? void 0 : client.startContext(appId);\n              } else {\n                startedContextPromise = client === null || client === void 0 ? void 0 : client.startContext();\n              }\n\n              return [3\n              /*break*/\n              , 5];\n\n            case 4:\n              console.warn('Cannot start context - client is not connected');\n              _c.label = 5;\n\n            case 5:\n              this.setState({\n                startedContextPromise: startedContextPromise\n              });\n              if (!(startedContextPromise !== undefined)) return [3\n              /*break*/\n              , 7];\n              return [4\n              /*yield*/\n              , startedContextPromise];\n\n            case 6:\n              _c.sent();\n\n              _c.label = 7;\n\n            case 7:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n\n    _this.stopContext = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _a, client, startedContextPromise;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              _a = this.state, client = _a.client, startedContextPromise = _a.startedContextPromise;\n              if (!(startedContextPromise !== undefined)) return [3\n              /*break*/\n              , 2];\n              return [4\n              /*yield*/\n              , startedContextPromise];\n\n            case 1:\n              _b.sent();\n\n              _b.label = 2;\n\n            case 2:\n              return [4\n              /*yield*/\n              , client === null || client === void 0 ? void 0 : client.stopContext()];\n\n            case 3:\n              _b.sent();\n\n              return [2\n              /*return*/\n              , Promise.resolve()];\n          }\n        });\n      });\n    };\n\n    _this.toggleRecording = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var toggleIsOn;\n        return __generator(this, function (_a) {\n          toggleIsOn = this.state.toggleIsOn;\n          this.setState({\n            toggleIsOn: !toggleIsOn\n          });\n\n          if (!toggleIsOn) {\n            return [2\n            /*return*/\n            , this.startContext()];\n          }\n\n          return [2\n          /*return*/\n          , this.stopContext()];\n        });\n      });\n    };\n\n    _this.switchApp = function (appId) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _a, client, clientState;\n\n        return __generator(this, function (_b) {\n          _a = this.state, client = _a.client, clientState = _a.clientState;\n          this.setState({\n            appId: appId\n          });\n\n          if (clientState === browser_client_1.ClientState.Recording) {\n            return [2\n            /*return*/\n            , client === null || client === void 0 ? void 0 : client.switchContext(appId)];\n          }\n\n          return [2\n          /*return*/\n          ];\n        });\n      });\n    };\n\n    _this.initialiseClient = function (opts) {\n      var _a;\n\n      var client = new browser_client_1.Client(opts);\n      client.onStateChange(_this.onClientStateChange);\n      client.onSegmentChange(_this.onSegmentChange);\n      client.onTranscript(_this.onTranscript);\n      client.onEntity(_this.onEntity);\n      client.onIntent(_this.onIntent);\n\n      if (!((_a = opts.disableTenative) !== null && _a !== void 0 ? _a : false)) {\n        client.onTentativeIntent(_this.onTentativeIntent);\n        client.onTentativeTranscript(_this.onTentativeTranscript);\n        client.onTentativeEntities(_this.onTentativeEntities);\n      }\n\n      return client;\n    };\n\n    _this.onClientStateChange = function (clientState) {\n      _this.setState({\n        clientState: clientState,\n        recordingState: (0, state_1.mapClientState)(clientState)\n      });\n    };\n\n    _this.onSegmentChange = function (segment) {\n      if (!segment.isFinal) {\n        _this.setState({\n          segment: segment\n        });\n\n        return;\n      } // Reset individual values when a segment is finalised.\n\n\n      _this.setState({\n        segment: segment,\n        tentativeTranscript: undefined,\n        transcript: undefined,\n        tentativeEntities: undefined,\n        entity: undefined,\n        tentativeIntent: undefined,\n        intent: undefined\n      });\n    };\n\n    _this.onTentativeTranscript = function (contextId, segmentId, words, text) {\n      _this.setState({\n        tentativeTranscript: {\n          contextId: contextId,\n          segmentId: segmentId,\n          text: text,\n          words: words\n        }\n      });\n    };\n\n    _this.onTranscript = function (contextId, segmentId, word) {\n      _this.setState({\n        transcript: {\n          contextId: contextId,\n          segmentId: segmentId,\n          word: word\n        }\n      });\n    };\n\n    _this.onTentativeEntities = function (contextId, segmentId, entities) {\n      _this.setState({\n        tentativeEntities: {\n          contextId: contextId,\n          segmentId: segmentId,\n          entities: entities\n        }\n      });\n    };\n\n    _this.onEntity = function (contextId, segmentId, entity) {\n      _this.setState({\n        entity: {\n          contextId: contextId,\n          segmentId: segmentId,\n          entity: entity\n        }\n      });\n    };\n\n    _this.onTentativeIntent = function (contextId, segmentId, intent) {\n      _this.setState({\n        tentativeIntent: {\n          contextId: contextId,\n          segmentId: segmentId,\n          intent: intent\n        }\n      });\n    };\n\n    _this.onIntent = function (contextId, segmentId, intent) {\n      _this.setState({\n        intent: {\n          contextId: contextId,\n          segmentId: segmentId,\n          intent: intent\n        }\n      });\n    };\n\n    _this.state = {\n      client: undefined,\n      recordingState: types_1.SpeechState.Idle,\n      clientState: browser_client_1.ClientState.Disconnected,\n      toggleIsOn: false,\n      appId: props.appId,\n      startedContextPromise: undefined\n    };\n    return _this;\n  }\n\n  SpeechProvider.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.state,\n        appId = _a.appId,\n        recordingState = _a.recordingState,\n        segment = _a.segment,\n        tentativeTranscript = _a.tentativeTranscript,\n        transcript = _a.transcript,\n        tentativeEntities = _a.tentativeEntities,\n        entity = _a.entity,\n        tentativeIntent = _a.tentativeIntent,\n        intent = _a.intent;\n    return react_1.default.createElement(exports.SpeechContext.Provider, {\n      value: {\n        initialise: this.initialiseAudio,\n        toggleRecording: this.toggleRecording,\n        switchApp: function (appId) {\n          return __awaiter(_this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n              return [2\n              /*return*/\n              , this.switchApp(appId)];\n            });\n          });\n        },\n        appId: appId,\n        speechState: recordingState,\n        segment: segment,\n        tentativeTranscript: tentativeTranscript,\n        transcript: transcript,\n        tentativeEntities: tentativeEntities,\n        entity: entity,\n        tentativeIntent: tentativeIntent,\n        intent: intent\n      }\n    }, this.props.children);\n  };\n\n  SpeechProvider.prototype.componentDidUpdate = function (prevProps) {\n    return __awaiter(this, void 0, void 0, function () {\n      var props, client, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            props = this.props; // We cannot compare microphone / api client / storage implementations,\n            // so changes in those will be ignored.\n            // A better approach for those would be to use separate contexts.\n\n            if (props.appId === prevProps.appId && props.language === prevProps.language && props.sampleRate === prevProps.sampleRate && props.debug === prevProps.debug && props.loginUrl === prevProps.loginUrl && props.apiUrl === prevProps.apiUrl) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            client = this.state.client;\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , client === null || client === void 0 ? void 0 : client.close()];\n\n          case 2:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_1 = _a.sent();\n            console.error('Error closing Speechly client:', e_1);\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            this.setState({\n              client: this.initialiseClient(props)\n            });\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  SpeechProvider.prototype.componentWillUnmount = function () {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _b;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _c.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , (_a = this.state.client) === null || _a === void 0 ? void 0 : _a.close()];\n\n          case 1:\n            _c.sent();\n\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            _b = _c.sent();\n            return [3\n            /*break*/\n            , 3];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return SpeechProvider;\n}(react_1.default.Component);\n\nexports.SpeechProvider = SpeechProvider;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AAaA;AAuFA;AAAA;AAAA;AAAA;;;AAIaA,wBAAgBC,gBAAMC,aAAN,CAAwC;AACnEC,YAAU,EAAE;AAAA;AAAA;AAA2B;AAAA;AAAA,iBAAO,CAACC,OAAR;AAAiB,OAA5C;AAA4C,KAA5C;AAA4C,GADW;AAEnEC,iBAAe,EAAE;AAAA;AAAA;AAA2B;AAAA;AAAA,iBAAO,CAACD,OAAR;AAAiB,OAA5C;AAA4C,KAA5C;AAA4C,GAFM;AAGnEE,WAAS,EAAE,aAAc,CAH0C;AAInEC,aAAW,EAAEC,oBAAYC;AAJ0C,CAAxC,CAAhB;AAkCb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA;AAAA;AAAA;AAAoCC;;AAClC,0BAAYC,KAAZ,EAAsC;AAAtC,gBACEC,kBAAMD,KAAN,KAAY,IADd,CAAsC,CAYtC;;;AACSE,8BAAoB;AAAA;AAAA,eAAHC,WAAjB,CAAiB,IAAG;AAC3B,eAAKC,QAAL,CAAaC,sBACR,KAAKC,KADG,GACE;AACbC,kBAAM,EAAE,KAAKC,gBAAL,CAAsB,KAAKR,KAA3B;AADK,WADF,CAAb;AAGE,kBADyC;AAAD;AACxC;AAAA,SAJyB;AAIzB,OAJyB;AAK5B,KALQ;;AAOAE,4BAAkB;AAAA;AAAA,YAAHO,EAAG,EAAHF,MAAG,EAAHG,WAAG;;AAAA,eAAHP,gBAAG;AAAA,kBAAHQ,EAAf,MAAkB;AAAA,iBAAH,CAAG;AACnBF,mBAA0B,KAAKH,KAA/B,EAAEC,MAAM,YAAR,EAAUG,WAAW,iBAArB;AAAoC,kBAAf,EAEvBA,WAAW,KAAKE,6BAAYC,YAFU,GAEtC;AAAA;AAAA;AACF;AAAA;AAAA,gBAAMN,MAAM,SAAN,UAAM,WAAN,GAAM,MAAN,SAAM,CAAEO,UAAR,EAAN;;AAA0B;AAA1BH;;AAA0BA,iBAA1BI,KAA0B;;AAAA;AAG5B;AAAA;AAAA,gBAAOC,OAAO,CAACvB,OAAR,EAAP;AAPyB;AAOD,SAPC;AAOD,OAPC;AAQ1B,KARQ;;AAUAS,yBAAe;AAAA;AAAA,YAAHO,EAAG,EAAHF,MAAG,EAAHG,WAAG;;AAAA,eAAHP,WAAG;AAAA,kBAAHc,QAAG;AAAA,iBAAH,CAAG;AAChBR,mBAAiC,KAAKH,KAAtC,EAAEC,MAAM,YAAR,EAAUG,WAAW,iBAArB,EAAuBQ,KAAK,WAA5B;AAGEP;;AAAW;AAAA,qBACZC,6BAAYC,YADA;AACZ;AAAA;AAAA;;AAAwB,qBAGxBD,6BAAYO,SAHY;AAGxB;AAAA;AAAA;;AAAqB,qBAErBP,6BAAYQ,QAFS;AAErB;AAAA;AAAA;AANY;;AAMQ,qBAApB,CAAqB;AAAD;AAAA,gBAApB,CAAoB;;AAAA,iBAApB,CAAoB;AAApB,qBAJH;AAAA;AAAA,gBAAMb,MAAM,SAAN,UAAM,WAAN,GAAM,MAAN,SAAM,CAAEO,UAAR,EAAN,CACA;AADA;;AAA0B;AAA1BG;;AAA0BA,iBAA1BF,KAA0B;;AAAA;AAK1B,kBAAIG,KAAK,KAAKG,SAAd,EAAyB;AACvBC,qCAAqB,GAAGf,MAAM,SAAN,UAAM,WAAN,GAAM,MAAN,SAAM,CAAEgB,YAAR,CAAqBL,KAArB,CAAxB;AACD,eAFD,MAEO;AACLI,qCAAqB,GAAGf,MAAM,SAAN,UAAM,WAAN,GAAM,MAAN,SAAM,CAAEgB,YAAR,EAAxB;AACD;;AACD;AAAA;AAAA;;AAAK,iBAAL,CAAK;AAELC,qBAAO,CAACC,IAAR,CAAa,gDAAb;AAA8DR,iBAADF,KAAC;;AAAA;AAGlE,mBAAKX,QAAL,CAAc;AAAEkB,qCAAqB;AAAvB,eAAd;AAAwC,oBAADA,qBACd,KAAKD,SADU,GACpC;AAAA;AAAA;AACF;AAAA;AAAA,gBAAMC,qBAAN;;AAA2B;AAA3BL;;AAA2BA,iBAA3BF,KAA2B;;AAAA;AAAA;AAAA;AAAA;AAvBP;AAuBO,SAvBP;AAuBO,OAvBP;AAyBvB,KAzBQ;;AA2BAb,wBAAc;AAAA;AAAA,YAAHO,EAAG,EAAHF,MAAG;;AAAA,eAAHJ,WAAG;AAAA,kBAAHQ,QAAG;AAAA,iBAAH,CAAG;AACfF,mBAAoC,KAAKH,KAAzC,EAAEC,MAAM,YAAR,EAAUe,qBAAqB,2BAA/B;AAA8C,kBAAf,uBAEZ,KAAKD,SAFsB,GAEhD;AAAA;AAAA;AACF;AAAA;AAAA,gBAAMC,qBAAN;;AAA2B;AAA3BX;;AAA2BA,iBAA3BI,KAA2B;;AAAA;AAAA,qBAG7B;AAAA;AAAA,gBAAMR,MAAM,SAAN,UAAM,WAAN,GAAM,MAAN,SAAM,CAAEmB,WAAR,EAAN;;AAA2B;AAA3Bf;;AACA;AAAA;AAAA,gBAAOK,OAAO,CAACvB,OAAR,EAAP;AARqB;AAQG,SARH;AAQG,OARH;AAStB,KATQ;;AAWAS,4BAAkB;AAAA;AAAA,YAAHyB,UAAG;AAAA,eAAHxB,gBAAG;AACjBwB,oBAAU,GAAK,KAAKrB,KAAL,CAAUqB,UAAzB;AACR,eAAKvB,QAAL,CAAc;AAAEuB,sBAAU,EAAE,CAACA;AAAf,WAAd;;AACA,cAAI,CAACA,UAAL,EAAiB;AACf;AAAA;AAAA,cAAO,KAAKJ,YAAL,EAAP;AACD;;AACD;AAAA;AAAA,YAAO,KAAKG,WAAL,EAAP;AAAyB,SANA;AAMA,OANA;AAO1B,KAPQ;;AASAxB,sBAAY,UAAOgB,KAAP,EAAoB;AAAA;AAAA,YAAbT,EAAa,EAAbF,MAAa,EAAbG,WAAa;;AAAA,eAAbP,WAAP,KAAoB,EAAb,UAAaQ;AACjCF,eAA0B,KAAKH,KAA/B,EAAEC,MAAM,YAAR,EAAUG,WAAW,iBAArB;AACN,eAAKN,QAAL,CAAc;AAAEc,iBAAK;AAAP,WAAd;;AACA,cAAIR,WAAW,KAAKE,6BAAYgB,SAAhC,EAA2C;AACzC;AAAA;AAAA,cAAOrB,MAAM,SAAN,UAAM,WAAN,GAAM,MAAN,SAAM,CAAEsB,aAAR,CAAsBX,KAAtB,CAAP;AACD;;AAAA;AAAA;AAAA;AAAA,SALsC;AAKtC,OALsC;AAMxC,KANQ;;AA+EQhB,6BAAmB,UAAC4B,IAAD,EAA0B;AAAA,UAAzBrB,EAAyB;;AAC5D,UAAMF,MAAM,GAAG,IAAIK,uBAAJ,CAAWkB,IAAX,CAAf;AAEAvB,YAAM,CAACwB,aAAP,CAAqB7B,KAAI,CAAC8B,mBAA1B;AACAzB,YAAM,CAAC0B,eAAP,CAAuB/B,KAAI,CAAC+B,eAA5B;AAEA1B,YAAM,CAAC2B,YAAP,CAAoBhC,KAAI,CAACgC,YAAzB;AACA3B,YAAM,CAAC4B,QAAP,CAAgBjC,KAAI,CAACiC,QAArB;AACA5B,YAAM,CAAC6B,QAAP,CAAgBlC,KAAI,CAACkC,QAArB;;AAEA,UAAI,EAAE,UAAI,CAACC,eAAL,MAAoB,IAApB,IAAoB5B,aAApB,GAAoBA,EAApB,GAAwB,KAA1B,CAAJ,EAAsC;AACpCF,cAAM,CAAC+B,iBAAP,CAAyBpC,KAAI,CAACoC,iBAA9B;AACA/B,cAAM,CAACgC,qBAAP,CAA6BrC,KAAI,CAACqC,qBAAlC;AACAhC,cAAM,CAACiC,mBAAP,CAA2BtC,KAAI,CAACsC,mBAAhC;AACD;;AAED,aAAOjC,MAAP;AACD,KAjBgB;;AAmBAL,gCAAsB,UAACQ,WAAD,EAAyB;AAC9DR,WAAI,CAACE,QAAL,CAAc;AAAEM,mBAAW,aAAb;AAAe+B,sBAAc,EAAE,4BAAe/B,WAAf;AAA/B,OAAd;AACD,KAFgB;;AAIAR,4BAAkB,UAACwC,OAAD,EAAuB;AACxD,UAAI,CAACA,OAAO,CAACC,OAAb,EAAsB;AACpBzC,aAAI,CAACE,QAAL,CAAc;AAAEsC,iBAAO,EAAEA;AAAX,SAAd;;AACA;AACD,OAJuD,CAMxD;;;AACAxC,WAAI,CAACE,QAAL,CAAc;AACZsC,eAAO,EAAEA,OADG;AAEZE,2BAAmB,EAAEvB,SAFT;AAGZwB,kBAAU,EAAExB,SAHA;AAIZyB,yBAAiB,EAAEzB,SAJP;AAKZ0B,cAAM,EAAE1B,SALI;AAMZ2B,uBAAe,EAAE3B,SANL;AAOZ4B,cAAM,EAAE5B;AAPI,OAAd;AASD,KAhBgB;;AAkBAnB,kCAAwB,UACvCgD,SADuC,EAEvCC,SAFuC,EAGvCC,KAHuC,EAIvCC,IAJuC,EAI3B;AAEZnD,WAAI,CAACE,QAAL,CAAc;AACZwC,2BAAmB,EAAE;AACnBM,mBAAS,WADU;AAEnBC,mBAAS,WAFU;AAGnBE,cAAI,MAHe;AAInBD,eAAK;AAJc;AADT,OAAd;AAQD,KAdgB;;AAgBAlD,yBAAe,UAACgD,SAAD,EAAoBC,SAApB,EAAuCG,IAAvC,EAAiD;AAC/EpD,WAAI,CAACE,QAAL,CAAc;AACZyC,kBAAU,EAAE;AACVK,mBAAS,WADC;AAEVC,mBAAS,WAFC;AAGVG,cAAI;AAHM;AADA,OAAd;AAOD,KARgB;;AAUApD,gCAAsB,UAACgD,SAAD,EAAoBC,SAApB,EAAuCI,QAAvC,EAAyD;AAC9FrD,WAAI,CAACE,QAAL,CAAc;AACZ0C,yBAAiB,EAAE;AACjBI,mBAAS,WADQ;AAEjBC,mBAAS,WAFQ;AAGjBI,kBAAQ;AAHS;AADP,OAAd;AAOD,KARgB;;AAUArD,qBAAW,UAACgD,SAAD,EAAoBC,SAApB,EAAuCJ,MAAvC,EAAqD;AAC/E7C,WAAI,CAACE,QAAL,CAAc;AACZ2C,cAAM,EAAE;AACNG,mBAAS,WADH;AAENC,mBAAS,WAFH;AAGNJ,gBAAM;AAHA;AADI,OAAd;AAOD,KARgB;;AAUA7C,8BAAoB,UAACgD,SAAD,EAAoBC,SAApB,EAAuCF,MAAvC,EAAqD;AACxF/C,WAAI,CAACE,QAAL,CAAc;AACZ4C,uBAAe,EAAE;AACfE,mBAAS,WADM;AAEfC,mBAAS,WAFM;AAGfF,gBAAM;AAHS;AADL,OAAd;AAOD,KARgB;;AAUA/C,qBAAW,UAACgD,SAAD,EAAoBC,SAApB,EAAuCF,MAAvC,EAAqD;AAC/E/C,WAAI,CAACE,QAAL,CAAc;AACZ6C,cAAM,EAAE;AACNC,mBAAS,WADH;AAENC,mBAAS,WAFH;AAGNF,gBAAM;AAHA;AADI,OAAd;AAOD,KARgB;;AA3Pf/C,SAAI,CAACI,KAAL,GAAa;AACXC,YAAM,EAAEc,SADG;AAEXoB,oBAAc,EAAE5C,oBAAYC,IAFjB;AAGXY,iBAAW,EAAEE,6BAAYC,YAHd;AAIXc,gBAAU,EAAE,KAJD;AAKXT,WAAK,EAAElB,KAAK,CAACkB,KALF;AAMXI,2BAAqB,EAAED;AANZ,KAAb;AAOC;AACF;;AA2EDmC;AAAA;;AACQ,aAUF,KAAKlD,KAVH;AAAA,QACJY,KAAK,WADD;AAAA,QAEJuB,cAAc,oBAFV;AAAA,QAGJC,OAAO,aAHH;AAAA,QAIJE,mBAAmB,yBAJf;AAAA,QAKJC,UAAU,gBALN;AAAA,QAMJC,iBAAiB,uBANb;AAAA,QAOJC,MAAM,YAPF;AAAA,QAQJC,eAAe,qBARX;AAAA,QASJC,MAAM,YATF;AAYN,WACE3D,8BAACD,sBAAcoE,QAAf,EAAuB;AACrBC,WAAK,EAAE;AACLlE,kBAAU,EAAE,KAAKmE,eADZ;AAELjE,uBAAe,EAAE,KAAKA,eAFjB;AAGLC,iBAAS,EAAE,UAAMuB,KAAN,EAAmB;AAAA;AAAA;AAAK;AAAA;AAAA,qBAAKvB,SAAL,CAAeuB,KAAf;AAAqB,aAA1B;AAA0B,WAA1B;AAA0B,SAHnD;AAILA,aAAK,OAJA;AAKLtB,mBAAW,EAAE6C,cALR;AAMLC,eAAO,SANF;AAOLE,2BAAmB,qBAPd;AAQLC,kBAAU,YARL;AASLC,yBAAiB,mBATZ;AAULC,cAAM,QAVD;AAWLC,uBAAe,iBAXV;AAYLC,cAAM;AAZD;AADc,KAAvB,EAgBG,KAAKjD,KAAL,CAAW4D,QAhBd,CADF;AAoBD,GAjCD;;AAmCMJ,gDAAN,UAAyBK,SAAzB,EAAuD;AAAA,WAA9BC,SAAzB,CAAwB,IAA+B,EAA9B,KAAzB,CAAuD,EAA9B,KAAzB,CAAuD,EAA9B,YAAzB;AAAuD,UAA9B9D,KAA8B,EAA9BO,MAA8B,EAA9BwD,GAA8B;AAAA,aAA9B5D,WAAzB,CAAwB,IAA+B,EAA9B,UAAzBM,EAAuD,EAA9B;AAA8B,gBAA9BA,EAAzB,CAAwBM,KAA+B;AAAA,eAA9B,CAA8B;AAC/Cf,iBAAK,GAAG,KAAKA,KAAb,CAD+C,CAGrD;AACA;AACA;;AACA,gBACEA,KAAK,CAACkB,KAAN,KAAgB2C,SAAS,CAAC3C,KAA1B,IACAlB,KAAK,CAACgE,QAAN,KAAmBH,SAAS,CAACG,QAD7B,IAEAhE,KAAK,CAACiE,UAAN,KAAqBJ,SAAS,CAACI,UAF/B,IAGAjE,KAAK,CAACkE,KAAN,KAAgBL,SAAS,CAACK,KAH1B,IAIAlE,KAAK,CAACmE,QAAN,KAAmBN,SAAS,CAACM,QAJ7B,IAKAnE,KAAK,CAACoE,MAAN,KAAiBP,SAAS,CAACO,MAN7B,EAOE;AACA;AAAA;AAAA;AACD;;AAEO7D,kBAAM,GAAK,KAAKD,KAAL,CAAUC,MAArB;AAAqBE,cAAf,CAAeM,QAAf,CAAe;;AAAA,eAAf,CAAe;AAAAN,cAAf,CAAe4D,KAAfC,IAAe,CAAf,CAAe,GAAf,CAAe,GAAf,CAAe;;AAG3B;AAAA;AAAA,cAAM/D,MAAM,SAAN,UAAM,WAAN,GAAM,MAAN,SAAM,CAAEgE,KAAR,EAAN;;AAAqB;AAArB9D;;AAAqB,oBAArB;AAAqB;AAAA;;AAAA;AAAAsD,kBAArBtD,GAAqB+D;AAErBhD,mBAAO,CAACiD,KAAR,CAAc,gCAAd,EAAgDV,GAAhD;AAAkD,oBAAD;AAAD;AAAE;;AAAA;AAGpD,iBAAK3D,QAAL,CAAc;AAAEG,oBAAM,EAAE,KAAKC,gBAAL,CAAsBR,KAAtB;AAAV,aAAd;AAAuD,oBAAD;AAAF;AAAG;AAzBF;AAyBE,OAzBF;AAyBE,KAzBF;AA0BtD,GA1BK;;AA4BAwD,kDAAN;AAAA,QAA0B/C,EAA1B;;AAAA,WAA0BqD,SAApB,KAAN,EAA0B,KAApB,CAAN,EAA0B,KAApB,CAAN,EAA0B,YAA1B;AAAA,UAA0BnD,EAA1B;;AAAA,aAA0BR,WAApB,KAAN,EAA0B,UAApBc,EAAN,EAA0B;AAA1B,gBAA0BA,EAApB,MAAN;AAAA,eAA0B,CAA1B;AAAAA,cAA0B,CAApBoD,IAAN,CAA0BC,IAA1B,CAA0B,CAApB,CAAN,EAA0B,CAA1B,GAA0B,CAA1B;;AAEI;AAAA;AAAA,cAAM,WAAKhE,KAAL,CAAWC,MAAX,MAAiB,IAAjB,IAAiBE,aAAjB,GAAiB,MAAjB,GAAiBA,GAAE8D,KAAF,EAAvB;;AAAgC;AAAhCtD;;AAAgC,oBAAhC;AAAgC;AAAA;;AAAA;AAAAN,iBAAhCM,OAAgC;AAAA,oBAAhC;AAAgC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAFpC;AAEoC,OAFpC;AAEoC,KAFpC;AAMC,GANK;;AAkHR;AAAC,CAvQD,CAAoC3B,gBAAMoF,SAA1C;;AAAarF","names":["exports","react_1","createContext","initialise","resolve","toggleRecording","switchApp","speechState","types_1","Idle","__extends","props","_super","_this","__generator","setState","__assign","state","client","initialiseClient","_a","clientState","_b","browser_client_1","Disconnected","initialize","label","Promise","_c","appId","Connected","Stopping","undefined","startedContextPromise","startContext","console","warn","stopContext","toggleIsOn","Recording","switchContext","opts","onStateChange","onClientStateChange","onSegmentChange","onTranscript","onEntity","onIntent","disableTenative","onTentativeIntent","onTentativeTranscript","onTentativeEntities","recordingState","segment","isFinal","tentativeTranscript","transcript","tentativeEntities","entity","tentativeIntent","intent","contextId","segmentId","words","text","word","entities","SpeechProvider","Provider","value","initialiseAudio","children","prevProps","__awaiter","e_1","language","sampleRate","debug","loginUrl","apiUrl","trys","push","close","sent","error","Component"],"sources":["/react-client/src/context.tsx"],"sourcesContent":["import React from 'react'\nimport { ClientOptions, ClientState, Client } from '@speechly/browser-client'\n\nimport {\n  Word,\n  Entity,\n  Intent,\n  TentativeSpeechTranscript,\n  TentativeSpeechEntities,\n  TentativeSpeechIntent,\n  SpeechTranscript,\n  SpeechEntity,\n  SpeechIntent,\n  SpeechSegment,\n  SpeechState,\n} from './types'\nimport { mapClientState } from './state'\n\n/**\n * The state of SpeechContext.\n *\n * Functions to initialise audio and recording as well as the state are always present,\n * however the values returned from the API will only be present when they are returned from the API.\n *\n * Individual values (transcripts, entities and intent) are reset back to undefined after current segment is finalised.\n * @public\n */\nexport interface SpeechContextState {\n  /**\n   * Function that initialises Speechly client, including both the API connection and the audio initialisation.\n   *\n   * It is optional and you don't have to call it manually,\n   * it will be called automatically upon the first call to toggleRecording.\n   *\n   * The idea is that it provides a more fine-grained control over how the audio is initialised,\n   * in case you want to give the user more control over your app.\n   */\n  initialise: ContextFunc\n\n  /**\n   * @deprecated\n   * Toggles listening on or off. Automatically initialises the API connection and audio stack.\n   */\n  toggleRecording: ContextFunc\n\n  /**\n   * Turns listening on. Automatically initialises the API connection and audio stack.\n   */\n  startContext: ContextFunc\n\n  /**\n   * Turns listening off.\n   */\n  stopContext: ContextFunc\n\n  /**\n   * Switch appId in multi-app project.\n   */\n  switchApp: (appId: string) => void\n\n  /**\n   * Current appId in multi-app project.\n   */\n  appId?: string\n\n  /**\n   * Current state of the context, whether it's idle, recording or failed, etc.\n   * It's advised to react to this to enable / disable voice functionality in your app\n   * as well as inidicate to the user that recording is in progress or results are being fetched from the API.\n   */\n  clientState: ClientState\n\n  /**\n   * @deprecated\n   * Current state of the context, whether it's idle, recording or failed, etc.\n   * It's advised to react to this to enable / disable voice functionality in your app\n   * as well as inidicate to the user that recording is in progress or results are being fetched from the API.\n   */\n  speechState: SpeechState\n\n  /**\n   * Last tentative transcript received from the API. Resets after current segment is finalised.\n   */\n  tentativeTranscript?: TentativeSpeechTranscript\n\n  /**\n   * Last tentative entities received from the API. Resets after current segment is finalised.\n   */\n  tentativeEntities?: TentativeSpeechEntities\n\n  /**\n   * Last tentative intent received from the API. Resets after current segment is finalised.\n   */\n  tentativeIntent?: TentativeSpeechIntent\n\n  /**\n   * Last final transcript received from the API. Resets after current segment is finalised.\n   */\n  transcript?: SpeechTranscript\n\n  /**\n   * Last final entity received from the API. Resets after current segment is finalised.\n   */\n  entity?: SpeechEntity\n\n  /**\n   * Last final intent received from the API. Resets after current segment is finalised.\n   */\n  intent?: SpeechIntent\n\n  /**\n   * Last segment received from the API.\n   */\n  segment?: SpeechSegment\n}\n\n/**\n * Signature for initialise and toggleRecording functions.\n * @public\n */\nexport type ContextFunc = () => Promise<void>\n\n/**\n * A React context that holds the state of Speechly SLU API client.\n * @public\n */\nexport const SpeechContext = React.createContext<SpeechContextState>({\n  initialise: async (): Promise<void> => Promise.resolve(),\n  toggleRecording: async (): Promise<void> => Promise.resolve(),\n  startContext: async (): Promise<void> => Promise.resolve(),\n  stopContext: async (): Promise<void> => Promise.resolve(),\n  switchApp: (): void => {},\n  speechState: SpeechState.Idle,\n  clientState: ClientState.Disconnected,\n})\n\n/**\n * Props for SpeechContext provider, which are used to initialise API client.\n * @public\n */\nexport interface SpeechProviderProps extends ClientOptions {\n  /**\n   * Whether to disable reacting to tentative items. Set this to true if you don't use them.\n   */\n  disableTenative?: boolean\n}\n\ninterface SpeechProviderState {\n  client?: Client\n  clientState: ClientState\n  recordingState: SpeechState\n  toggleIsOn: boolean\n  appId?: string\n  startedContextPromise?: Promise<string>\n  segment?: SpeechSegment\n  tentativeTranscript?: TentativeSpeechTranscript\n  transcript?: SpeechTranscript\n  tentativeEntities?: TentativeSpeechEntities\n  entity?: SpeechEntity\n  tentativeIntent?: TentativeSpeechIntent\n  intent?: SpeechIntent\n}\n\n/**\n * The provider for SpeechContext.\n *\n * Make sure you have only one SpeechProvider in your application,\n * because otherwise the audio will be mixed up and unusable.\n *\n * It is possible to switch the props on the fly, which will make provider stop current client if it's running\n * and start a new one.\n * @public\n */\nexport class SpeechProvider extends React.Component<SpeechProviderProps, SpeechProviderState> {\n  constructor(props: SpeechProviderProps) {\n    super(props)\n    this.state = {\n      client: undefined,\n      recordingState: SpeechState.Idle,\n      clientState: ClientState.Disconnected,\n      toggleIsOn: false,\n      appId: props.appId,\n      startedContextPromise: undefined,\n    }\n  }\n\n  // init at mount mount time for to play it nice with SSR\n  readonly componentDidMount = async (): Promise<void> => {\n    this.setState({\n      ...this.state,\n      client: this.initialiseClient(this.props),\n    })\n  }\n\n  readonly initialiseAudio = async (): Promise<void> => {\n    const { client, clientState } = this.state\n\n    if (clientState === ClientState.Disconnected) {\n      await client?.initialize()\n    }\n\n    return Promise.resolve()\n  }\n\n  readonly startContext = async (): Promise<void> => {\n    const { client, clientState, appId } = this.state\n    this.setState({ toggleIsOn: true })\n\n    let startedContextPromise\n    switch (clientState) {\n      case ClientState.Disconnected:\n        await client?.initialize()\n        // falls through\n      case ClientState.Connected:\n        // falls through\n      case ClientState.Stopping:\n        if (appId !== undefined) {\n          startedContextPromise = client?.startContext(appId)\n        } else {\n          startedContextPromise = client?.startContext()\n        }\n        break\n      case ClientState.Starting:\n        console.warn('Already starting')\n        break\n      default:\n        console.warn('Cannot start context - client is not connected')\n        break\n    }\n\n    this.setState({ startedContextPromise })\n    if (startedContextPromise !== undefined) {\n      await startedContextPromise\n    }\n  }\n\n  readonly stopContext = async (): Promise<void> => {\n    const { client, startedContextPromise } = this.state\n    this.setState({ toggleIsOn: false })\n\n    if (startedContextPromise !== undefined) {\n      await startedContextPromise\n    }\n\n    await client?.stopContext()\n    return Promise.resolve()\n  }\n\n  readonly toggleRecording = async (): Promise<void> => {\n    const { toggleIsOn } = this.state\n    if (!toggleIsOn) {\n      return this.startContext()\n    }\n    return this.stopContext()\n  }\n\n  readonly switchApp = async (appId: string): Promise<void> => {\n    const { client, clientState } = this.state\n    this.setState({ appId })\n    if (clientState === ClientState.Recording) {\n      return client?.switchContext(appId)\n    }\n  }\n\n  render(): JSX.Element {\n    const {\n      appId,\n      clientState,\n      recordingState,\n      segment,\n      tentativeTranscript,\n      transcript,\n      tentativeEntities,\n      entity,\n      tentativeIntent,\n      intent,\n    } = this.state\n\n    return (\n      <SpeechContext.Provider\n        value={{\n          initialise: this.initialiseAudio,\n          startContext: this.startContext,\n          stopContext: this.stopContext,\n          toggleRecording: this.toggleRecording,\n          switchApp: async(appId: string) => this.switchApp(appId),\n          appId,\n          clientState,\n          speechState: recordingState,\n          segment,\n          tentativeTranscript,\n          transcript,\n          tentativeEntities,\n          entity,\n          tentativeIntent,\n          intent,\n        }}\n      >\n        {this.props.children}\n      </SpeechContext.Provider>\n    )\n  }\n\n  async componentDidUpdate(prevProps: SpeechProviderProps): Promise<void> {\n    const props = this.props\n\n    // We cannot compare microphone / api client / storage implementations,\n    // so changes in those will be ignored.\n    // A better approach for those would be to use separate contexts.\n    if (\n      props.appId === prevProps.appId &&\n      props.language === prevProps.language &&\n      props.sampleRate === prevProps.sampleRate &&\n      props.debug === prevProps.debug &&\n      props.loginUrl === prevProps.loginUrl &&\n      props.apiUrl === prevProps.apiUrl\n    ) {\n      return\n    }\n\n    const { client } = this.state\n\n    try {\n      await client?.close()\n    } catch (e) {\n      console.error('Error closing Speechly client:', e)\n    }\n\n    this.setState({ client: this.initialiseClient(props) })\n  }\n\n  async componentWillUnmount(): Promise<void> {\n    try {\n      await this.state.client?.close()\n    } catch {\n      // Nothing to do with the error here, so ignoring it is fine.\n    }\n  }\n\n  private readonly initialiseClient = (opts: SpeechProviderProps): Client => {\n    const client = new Client(opts)\n\n    client.onStateChange(this.onClientStateChange)\n    client.onSegmentChange(this.onSegmentChange)\n\n    client.onTranscript(this.onTranscript)\n    client.onEntity(this.onEntity)\n    client.onIntent(this.onIntent)\n\n    if (!(opts.disableTenative ?? false)) {\n      client.onTentativeIntent(this.onTentativeIntent)\n      client.onTentativeTranscript(this.onTentativeTranscript)\n      client.onTentativeEntities(this.onTentativeEntities)\n    }\n\n    return client\n  }\n\n  private readonly onClientStateChange = (clientState: ClientState): void => {\n    this.setState({ clientState, recordingState: mapClientState(clientState) })\n  }\n\n  private readonly onSegmentChange = (segment: SpeechSegment): void => {\n    if (!segment.isFinal) {\n      this.setState({ segment: segment })\n      return\n    }\n\n    // Reset individual values when a segment is finalised.\n    this.setState({\n      segment: segment,\n      tentativeTranscript: undefined,\n      transcript: undefined,\n      tentativeEntities: undefined,\n      entity: undefined,\n      tentativeIntent: undefined,\n      intent: undefined,\n    })\n  }\n\n  private readonly onTentativeTranscript = (\n    contextId: string,\n    segmentId: number,\n    words: Word[],\n    text: string,\n  ): void => {\n    this.setState({\n      tentativeTranscript: {\n        contextId,\n        segmentId,\n        text,\n        words,\n      },\n    })\n  }\n\n  private readonly onTranscript = (contextId: string, segmentId: number, word: Word): void => {\n    this.setState({\n      transcript: {\n        contextId,\n        segmentId,\n        word,\n      },\n    })\n  }\n\n  private readonly onTentativeEntities = (contextId: string, segmentId: number, entities: Entity[]): void => {\n    this.setState({\n      tentativeEntities: {\n        contextId,\n        segmentId,\n        entities,\n      },\n    })\n  }\n\n  private readonly onEntity = (contextId: string, segmentId: number, entity: Entity): void => {\n    this.setState({\n      entity: {\n        contextId,\n        segmentId,\n        entity,\n      },\n    })\n  }\n\n  private readonly onTentativeIntent = (contextId: string, segmentId: number, intent: Intent): void => {\n    this.setState({\n      tentativeIntent: {\n        contextId,\n        segmentId,\n        intent,\n      },\n    })\n  }\n\n  private readonly onIntent = (contextId: string, segmentId: number, intent: Intent): void => {\n    this.setState({\n      intent: {\n        contextId,\n        segmentId,\n        intent,\n      },\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"script"}