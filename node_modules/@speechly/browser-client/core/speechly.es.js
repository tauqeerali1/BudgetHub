/**
 * All possible states of a Speechly API client. Failed, NoBrowserSupport and NoAudioConsent states are non-recoverable
 * erroneous states, which should be handled by the end user, according to the semantics of an application.
 * Other states can also be utilized for e.g. enabling and disabling recording buttons or showing the status in the app.
 * It is also possible to use arithmetics for state comparison, e.g. `if (state < speechly.ClientState.Disconnected)`,
 * to react to non-recoverable states.
 * @public
 */
var ClientState;
(function (ClientState) {
    ClientState[ClientState["Failed"] = 0] = "Failed";
    ClientState[ClientState["NoBrowserSupport"] = 1] = "NoBrowserSupport";
    ClientState[ClientState["NoAudioConsent"] = 2] = "NoAudioConsent";
    ClientState[ClientState["Disconnected"] = 3] = "Disconnected";
    ClientState[ClientState["Disconnecting"] = 4] = "Disconnecting";
    ClientState[ClientState["Connecting"] = 5] = "Connecting";
    ClientState[ClientState["Connected"] = 6] = "Connected";
    ClientState[ClientState["Starting"] = 7] = "Starting";
    ClientState[ClientState["Stopping"] = 8] = "Stopping";
    ClientState[ClientState["Recording"] = 9] = "Recording";
})(ClientState || (ClientState = {}));

/**
 * Converts client state value to a string, which could be useful for debugging or metrics.
 * @param state - the state of the client
 * @public
 */
function stateToString(state) {
    var _a;
    return (_a = states.get(state)) !== null && _a !== void 0 ? _a : unknown;
}
// TODO: generate this from the enum.
const unknown = 'Unknown';
const states = new Map([
    [ClientState.Failed, 'Failed'],
    [ClientState.NoBrowserSupport, 'NoBrowserSupport'],
    [ClientState.NoAudioConsent, 'NoAudioConsent'],
    [ClientState.Disconnecting, 'Disconnecting'],
    [ClientState.Disconnected, 'Disconnected'],
    [ClientState.Connecting, 'Connecting'],
    [ClientState.Connected, 'Connected'],
    [ClientState.Starting, 'Starting'],
    [ClientState.Stopping, 'Stopping'],
    [ClientState.Recording, 'Recording'],
]);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const LANGUAGES_LIST = {
  aa: {
    name: 'Afar',
    nativeName: 'Afaraf',
  },
  ab: {
    name: 'Abkhaz',
    nativeName: 'аҧсуа бызшәа',
  },
  ae: {
    name: 'Avestan',
    nativeName: 'avesta',
  },
  af: {
    name: 'Afrikaans',
    nativeName: 'Afrikaans',
  },
  ak: {
    name: 'Akan',
    nativeName: 'Akan',
  },
  am: {
    name: 'Amharic',
    nativeName: 'አማርኛ',
  },
  an: {
    name: 'Aragonese',
    nativeName: 'aragonés',
  },
  ar: {
    name: 'Arabic',
    nativeName: 'اللغة العربية',
  },
  as: {
    name: 'Assamese',
    nativeName: 'অসমীয়া',
  },
  av: {
    name: 'Avaric',
    nativeName: 'авар мацӀ',
  },
  ay: {
    name: 'Aymara',
    nativeName: 'aymar aru',
  },
  az: {
    name: 'Azerbaijani',
    nativeName: 'azərbaycan dili',
  },
  ba: {
    name: 'Bashkir',
    nativeName: 'башҡорт теле',
  },
  be: {
    name: 'Belarusian',
    nativeName: 'беларуская мова',
  },
  bg: {
    name: 'Bulgarian',
    nativeName: 'български език',
  },
  bh: {
    name: 'Bihari',
    nativeName: 'भोजपुरी',
  },
  bi: {
    name: 'Bislama',
    nativeName: 'Bislama',
  },
  bm: {
    name: 'Bambara',
    nativeName: 'bamanankan',
  },
  bn: {
    name: 'Bengali',
    nativeName: 'বাংলা',
  },
  bo: {
    name: 'Tibetan',
    nativeName: 'བོད་ཡིག',
  },
  br: {
    name: 'Breton',
    nativeName: 'brezhoneg',
  },
  bs: {
    name: 'Bosnian',
    nativeName: 'bosanski jezik',
  },
  ca: {
    name: 'Catalan',
    nativeName: 'Català',
  },
  ce: {
    name: 'Chechen',
    nativeName: 'нохчийн мотт',
  },
  ch: {
    name: 'Chamorro',
    nativeName: 'Chamoru',
  },
  co: {
    name: 'Corsican',
    nativeName: 'corsu',
  },
  cr: {
    name: 'Cree',
    nativeName: 'ᓀᐦᐃᔭᐍᐏᐣ',
  },
  cs: {
    name: 'Czech',
    nativeName: 'čeština',
  },
  cu: {
    name: 'Old Church Slavonic',
    nativeName: 'ѩзыкъ словѣньскъ',
  },
  cv: {
    name: 'Chuvash',
    nativeName: 'чӑваш чӗлхи',
  },
  cy: {
    name: 'Welsh',
    nativeName: 'Cymraeg',
  },
  da: {
    name: 'Danish',
    nativeName: 'dansk',
  },
  de: {
    name: 'German',
    nativeName: 'Deutsch',
  },
  dv: {
    name: 'Divehi',
    nativeName: 'Dhivehi',
  },
  dz: {
    name: 'Dzongkha',
    nativeName: 'རྫོང་ཁ',
  },
  ee: {
    name: 'Ewe',
    nativeName: 'Eʋegbe',
  },
  el: {
    name: 'Greek',
    nativeName: 'Ελληνικά',
  },
  en: {
    name: 'English',
    nativeName: 'English',
  },
  eo: {
    name: 'Esperanto',
    nativeName: 'Esperanto',
  },
  es: {
    name: 'Spanish',
    nativeName: 'Español',
  },
  et: {
    name: 'Estonian',
    nativeName: 'eesti',
  },
  eu: {
    name: 'Basque',
    nativeName: 'euskara',
  },
  fa: {
    name: 'Persian',
    nativeName: 'فارسی',
  },
  ff: {
    name: 'Fula',
    nativeName: 'Fulfulde',
  },
  fi: {
    name: 'Finnish',
    nativeName: 'suomi',
  },
  fj: {
    name: 'Fijian',
    nativeName: 'Vakaviti',
  },
  fo: {
    name: 'Faroese',
    nativeName: 'føroyskt',
  },
  fr: {
    name: 'French',
    nativeName: 'Français',
  },
  fy: {
    name: 'Western Frisian',
    nativeName: 'Frysk',
  },
  ga: {
    name: 'Irish',
    nativeName: 'Gaeilge',
  },
  gd: {
    name: 'Scottish Gaelic',
    nativeName: 'Gàidhlig',
  },
  gl: {
    name: 'Galician',
    nativeName: 'galego',
  },
  gn: {
    name: 'Guaraní',
    nativeName: "Avañe'ẽ",
  },
  gu: {
    name: 'Gujarati',
    nativeName: 'ગુજરાતી',
  },
  gv: {
    name: 'Manx',
    nativeName: 'Gaelg',
  },
  ha: {
    name: 'Hausa',
    nativeName: 'هَوُسَ',
  },
  he: {
    name: 'Hebrew',
    nativeName: 'עברית',
  },
  hi: {
    name: 'Hindi',
    nativeName: 'हिन्दी',
  },
  ho: {
    name: 'Hiri Motu',
    nativeName: 'Hiri Motu',
  },
  hr: {
    name: 'Croatian',
    nativeName: 'Hrvatski',
  },
  ht: {
    name: 'Haitian',
    nativeName: 'Kreyòl ayisyen',
  },
  hu: {
    name: 'Hungarian',
    nativeName: 'magyar',
  },
  hy: {
    name: 'Armenian',
    nativeName: 'Հայերեն',
  },
  hz: {
    name: 'Herero',
    nativeName: 'Otjiherero',
  },
  ia: {
    name: 'Interlingua',
    nativeName: 'Interlingua',
  },
  id: {
    name: 'Indonesian',
    nativeName: 'Bahasa Indonesia',
  },
  ie: {
    name: 'Interlingue',
    nativeName: 'Interlingue',
  },
  ig: {
    name: 'Igbo',
    nativeName: 'Asụsụ Igbo',
  },
  ii: {
    name: 'Nuosu',
    nativeName: 'ꆈꌠ꒿ Nuosuhxop',
  },
  ik: {
    name: 'Inupiaq',
    nativeName: 'Iñupiaq',
  },
  io: {
    name: 'Ido',
    nativeName: 'Ido',
  },
  is: {
    name: 'Icelandic',
    nativeName: 'Íslenska',
  },
  it: {
    name: 'Italian',
    nativeName: 'Italiano',
  },
  iu: {
    name: 'Inuktitut',
    nativeName: 'ᐃᓄᒃᑎᑐᑦ',
  },
  ja: {
    name: 'Japanese',
    nativeName: '日本語',
  },
  jv: {
    name: 'Javanese',
    nativeName: 'basa Jawa',
  },
  ka: {
    name: 'Georgian',
    nativeName: 'ქართული',
  },
  kg: {
    name: 'Kongo',
    nativeName: 'Kikongo',
  },
  ki: {
    name: 'Kikuyu',
    nativeName: 'Gĩkũyũ',
  },
  kj: {
    name: 'Kwanyama',
    nativeName: 'Kuanyama',
  },
  kk: {
    name: 'Kazakh',
    nativeName: 'қазақ тілі',
  },
  kl: {
    name: 'Kalaallisut',
    nativeName: 'kalaallisut',
  },
  km: {
    name: 'Khmer',
    nativeName: 'ខេមរភាសា',
  },
  kn: {
    name: 'Kannada',
    nativeName: 'ಕನ್ನಡ',
  },
  ko: {
    name: 'Korean',
    nativeName: '한국어',
  },
  kr: {
    name: 'Kanuri',
    nativeName: 'Kanuri',
  },
  ks: {
    name: 'Kashmiri',
    nativeName: 'कश्मीरी',
  },
  ku: {
    name: 'Kurdish',
    nativeName: 'Kurdî',
  },
  kv: {
    name: 'Komi',
    nativeName: 'коми кыв',
  },
  kw: {
    name: 'Cornish',
    nativeName: 'Kernewek',
  },
  ky: {
    name: 'Kyrgyz',
    nativeName: 'Кыргызча',
  },
  la: {
    name: 'Latin',
    nativeName: 'latine',
  },
  lb: {
    name: 'Luxembourgish',
    nativeName: 'Lëtzebuergesch',
  },
  lg: {
    name: 'Ganda',
    nativeName: 'Luganda',
  },
  li: {
    name: 'Limburgish',
    nativeName: 'Limburgs',
  },
  ln: {
    name: 'Lingala',
    nativeName: 'Lingála',
  },
  lo: {
    name: 'Lao',
    nativeName: 'ພາສາ',
  },
  lt: {
    name: 'Lithuanian',
    nativeName: 'lietuvių kalba',
  },
  lu: {
    name: 'Luba-Katanga',
    nativeName: 'Tshiluba',
  },
  lv: {
    name: 'Latvian',
    nativeName: 'latviešu valoda',
  },
  mg: {
    name: 'Malagasy',
    nativeName: 'fiteny malagasy',
  },
  mh: {
    name: 'Marshallese',
    nativeName: 'Kajin M̧ajeļ',
  },
  mi: {
    name: 'Māori',
    nativeName: 'te reo Māori',
  },
  mk: {
    name: 'Macedonian',
    nativeName: 'македонски јазик',
  },
  ml: {
    name: 'Malayalam',
    nativeName: 'മലയാളം',
  },
  mn: {
    name: 'Mongolian',
    nativeName: 'Монгол хэл',
  },
  mr: {
    name: 'Marathi',
    nativeName: 'मराठी',
  },
  ms: {
    name: 'Malay',
    nativeName: 'Bahasa Malaysia',
  },
  mt: {
    name: 'Maltese',
    nativeName: 'Malti',
  },
  my: {
    name: 'Burmese',
    nativeName: 'ဗမာစာ',
  },
  na: {
    name: 'Nauru',
    nativeName: 'Ekakairũ Naoero',
  },
  nb: {
    name: 'Norwegian Bokmål',
    nativeName: 'Norsk bokmål',
  },
  nd: {
    name: 'Northern Ndebele',
    nativeName: 'isiNdebele',
  },
  ne: {
    name: 'Nepali',
    nativeName: 'नेपाली',
  },
  ng: {
    name: 'Ndonga',
    nativeName: 'Owambo',
  },
  nl: {
    name: 'Dutch',
    nativeName: 'Nederlands',
  },
  nn: {
    name: 'Norwegian Nynorsk',
    nativeName: 'Norsk nynorsk',
  },
  no: {
    name: 'Norwegian',
    nativeName: 'Norsk',
  },
  nr: {
    name: 'Southern Ndebele',
    nativeName: 'isiNdebele',
  },
  nv: {
    name: 'Navajo',
    nativeName: 'Diné bizaad',
  },
  ny: {
    name: 'Chichewa',
    nativeName: 'chiCheŵa',
  },
  oc: {
    name: 'Occitan',
    nativeName: 'occitan',
  },
  oj: {
    name: 'Ojibwe',
    nativeName: 'ᐊᓂᔑᓈᐯᒧᐎᓐ',
  },
  om: {
    name: 'Oromo',
    nativeName: 'Afaan Oromoo',
  },
  or: {
    name: 'Oriya',
    nativeName: 'ଓଡ଼ିଆ',
  },
  os: {
    name: 'Ossetian',
    nativeName: 'ирон æвзаг',
  },
  pa: {
    name: 'Panjabi',
    nativeName: 'ਪੰਜਾਬੀ',
  },
  pi: {
    name: 'Pāli',
    nativeName: 'पाऴि',
  },
  pl: {
    name: 'Polish',
    nativeName: 'Polski',
  },
  ps: {
    name: 'Pashto',
    nativeName: 'پښتو',
  },
  pt: {
    name: 'Portuguese',
    nativeName: 'Português',
  },
  qu: {
    name: 'Quechua',
    nativeName: 'Runa Simi',
  },
  rm: {
    name: 'Romansh',
    nativeName: 'rumantsch grischun',
  },
  rn: {
    name: 'Kirundi',
    nativeName: 'Ikirundi',
  },
  ro: {
    name: 'Romanian',
    nativeName: 'Română',
  },
  ru: {
    name: 'Russian',
    nativeName: 'Русский',
  },
  rw: {
    name: 'Kinyarwanda',
    nativeName: 'Ikinyarwanda',
  },
  sa: {
    name: 'Sanskrit',
    nativeName: 'संस्कृतम्',
  },
  sc: {
    name: 'Sardinian',
    nativeName: 'sardu',
  },
  sd: {
    name: 'Sindhi',
    nativeName: 'सिन्धी',
  },
  se: {
    name: 'Northern Sami',
    nativeName: 'Davvisámegiella',
  },
  sg: {
    name: 'Sango',
    nativeName: 'yângâ tî sängö',
  },
  si: {
    name: 'Sinhala',
    nativeName: 'සිංහල',
  },
  sk: {
    name: 'Slovak',
    nativeName: 'slovenčina',
  },
  sl: {
    name: 'Slovenian',
    nativeName: 'slovenski jezik',
  },
  sm: {
    name: 'Samoan',
    nativeName: "gagana fa'a Samoa",
  },
  sn: {
    name: 'Shona',
    nativeName: 'chiShona',
  },
  so: {
    name: 'Somali',
    nativeName: 'Soomaaliga',
  },
  sq: {
    name: 'Albanian',
    nativeName: 'Shqip',
  },
  sr: {
    name: 'Serbian',
    nativeName: 'српски језик',
  },
  ss: {
    name: 'Swati',
    nativeName: 'SiSwati',
  },
  st: {
    name: 'Southern Sotho',
    nativeName: 'Sesotho',
  },
  su: {
    name: 'Sundanese',
    nativeName: 'Basa Sunda',
  },
  sv: {
    name: 'Swedish',
    nativeName: 'Svenska',
  },
  sw: {
    name: 'Swahili',
    nativeName: 'Kiswahili',
  },
  ta: {
    name: 'Tamil',
    nativeName: 'தமிழ்',
  },
  te: {
    name: 'Telugu',
    nativeName: 'తెలుగు',
  },
  tg: {
    name: 'Tajik',
    nativeName: 'тоҷикӣ',
  },
  th: {
    name: 'Thai',
    nativeName: 'ไทย',
  },
  ti: {
    name: 'Tigrinya',
    nativeName: 'ትግርኛ',
  },
  tk: {
    name: 'Turkmen',
    nativeName: 'Türkmen',
  },
  tl: {
    name: 'Tagalog',
    nativeName: 'Wikang Tagalog',
  },
  tn: {
    name: 'Tswana',
    nativeName: 'Setswana',
  },
  to: {
    name: 'Tonga',
    nativeName: 'faka Tonga',
  },
  tr: {
    name: 'Turkish',
    nativeName: 'Türkçe',
  },
  ts: {
    name: 'Tsonga',
    nativeName: 'Xitsonga',
  },
  tt: {
    name: 'Tatar',
    nativeName: 'татар теле',
  },
  tw: {
    name: 'Twi',
    nativeName: 'Twi',
  },
  ty: {
    name: 'Tahitian',
    nativeName: 'Reo Tahiti',
  },
  ug: {
    name: 'Uyghur',
    nativeName: 'ئۇيغۇرچە‎',
  },
  uk: {
    name: 'Ukrainian',
    nativeName: 'Українська',
  },
  ur: {
    name: 'Urdu',
    nativeName: 'اردو',
  },
  uz: {
    name: 'Uzbek',
    nativeName: 'Ўзбек',
  },
  ve: {
    name: 'Venda',
    nativeName: 'Tshivenḓa',
  },
  vi: {
    name: 'Vietnamese',
    nativeName: 'Tiếng Việt',
  },
  vo: {
    name: 'Volapük',
    nativeName: 'Volapük',
  },
  wa: {
    name: 'Walloon',
    nativeName: 'walon',
  },
  wo: {
    name: 'Wolof',
    nativeName: 'Wollof',
  },
  xh: {
    name: 'Xhosa',
    nativeName: 'isiXhosa',
  },
  yi: {
    name: 'Yiddish',
    nativeName: 'ייִדיש',
  },
  yo: {
    name: 'Yoruba',
    nativeName: 'Yorùbá',
  },
  za: {
    name: 'Zhuang',
    nativeName: 'Saɯ cueŋƅ',
  },
  zh: {
    name: 'Chinese',
    nativeName: '中文',
  },
  zu: {
    name: 'Zulu',
    nativeName: 'isiZulu',
  },
};

class ISO6391 {
  static getLanguages(codes = []) {
    return codes.map(code => ({
      code,
      name: ISO6391.getName(code),
      nativeName: ISO6391.getNativeName(code),
    }));
  }

  static getName(code) {
    return ISO6391.validate(code) ? LANGUAGES_LIST[code].name : '';
  }

  static getAllNames() {
    return Object.values(LANGUAGES_LIST).map(l => l.name);
  }

  static getNativeName(code) {
    return ISO6391.validate(code) ? LANGUAGES_LIST[code].nativeName : '';
  }

  static getAllNativeNames() {
    return Object.values(LANGUAGES_LIST).map(l => l.nativeName);
  }

  static getCode(name) {
    const code = Object.keys(LANGUAGES_LIST).find(code => {
      const language = LANGUAGES_LIST[code];

      return (
        language.name.toLowerCase() === name.toLowerCase() ||
        language.nativeName.toLowerCase() === name.toLowerCase()
      );
    });
    return code || '';
  }

  static getAllCodes() {
    return Object.keys(LANGUAGES_LIST);
  }

  static validate(code) {
    return LANGUAGES_LIST.hasOwnProperty(code);
  }
}

const LANGUAGES_ZH_NAMES = {
  aa: '阿法尔语',
  ab: '阿布哈兹语',
  ae: '阿维斯陀语',
  af: '南非荷兰语',
  ak: '阿坎语',
  am: '阿姆哈拉语',
  an: '阿拉贡语',
  ar: '阿拉伯语',
  as: '阿萨姆语',
  av: '阿瓦尔语',
  ay: '艾马拉语',
  az: '阿塞拜疆语',
  ba: '巴什基尔语',
  be: '白俄罗斯语',
  bg: '保加利亚语',
  bh: '比哈尔语',
  bi: '比斯拉马语',
  bm: '班巴拉语',
  bn: '孟加拉语',
  bo: '藏语',
  br: '布列塔尼语',
  bs: '波斯尼亚语',
  ca: '加泰罗尼亚语',
  ce: '车臣语',
  ch: '查莫洛语',
  co: '科西嘉语',
  cr: '克里语',
  cs: '捷克语',
  cu: '古教会斯拉夫语',
  cv: '楚瓦什语',
  cy: '威尔士语',
  da: '丹麦语',
  de: '德语',
  dv: '迪维希语',
  dz: '不丹语',
  ee: '埃维语',
  el: '希腊语',
  en: '英语',
  eo: '世界语',
  es: '西班牙语',
  et: '爱沙尼亚语',
  eu: '巴斯克语',
  fa: '波斯语',
  ff: '富拉语',
  fi: '芬兰语',
  fj: '斐济语',
  fo: '法罗语',
  fr: '法语',
  fy: '西弗里西亚语',
  ga: '爱尔兰语',
  gd: '苏格兰盖尔语',
  gl: '加利西亚语',
  gn: '瓜拉尼语',
  gu: '古吉拉特语',
  gv: '马恩岛语',
  ha: '豪萨语',
  he: '希伯来语',
  hi: '印地语',
  ho: '莫图语',
  hr: '克罗地亚语',
  ht: '海地文',
  hu: '匈牙利语',
  hy: '亚美尼亚语',
  hz: '赫勒娄语',
  ia: '国际语',
  id: '印尼语',
  ie: '国际语',
  ig: '伊博语',
  ii: '诺苏语',
  ik: '依奴皮维克文',
  io: '伊多文',
  is: '冰岛语',
  it: '意大利语',
  iu: '因纽特语',
  ja: '日语',
  jv: '爪哇语',
  ka: '格鲁吉亚语',
  kg: '刚果语',
  ki: '基库尤语',
  kj: '宽亚马语',
  kk: '哈萨克语',
  kl: '格陵兰语',
  km: '高棉语',
  kn: '卡纳达语',
  ko: '韩语',
  kr: '卡努里语',
  ks: '克什米尔语',
  ku: '库尔德语',
  kv: '科米语',
  kw: '科尼什语',
  ky: '吉尔吉斯语',
  la: '拉丁语',
  lb: '卢森堡语',
  lg: '甘达语',
  li: '林堡语',
  ln: '林加拉语',
  lo: '老挝语',
  lt: '立陶宛语',
  lu: '卢巴加丹加语',
  lv: '拉脱维亚语',
  mg: '马尔加什语',
  mh: '马绍尔语',
  mi: '毛利语',
  mk: '马其顿语',
  ml: '马拉雅拉姆语',
  mn: '蒙古文',
  mr: '马拉地语',
  ms: '马来语',
  mt: '马耳他语',
  my: '缅甸语',
  na: '瑙鲁语',
  nb: '挪威博克马尔语',
  nd: '北恩德贝勒语',
  ne: '尼泊尔语',
  ng: '尼日尔刚果语',
  nl: '荷兰语',
  nn: '挪威尼诺斯克语',
  no: '挪威语',
  nr: '南恩德贝勒语',
  nv: '纳瓦霍语',
  ny: '齐切瓦语',
  oc: '奥克西唐语',
  oj: '欧及布威语',
  om: '奥罗莫语',
  or: '奥里亚语',
  os: '奥塞梯语',
  pa: '旁遮普语',
  pi: '巴利语',
  pl: '波兰语',
  ps: '普什图语',
  pt: '葡萄牙语',
  qu: '克丘亚语',
  rm: '罗曼斯语',
  rn: '基隆迪语',
  ro: '罗马尼亚语',
  ru: '俄语',
  rw: '卢旺达语',
  sa: '梵文',
  sc: '撒丁岛语',
  sd: '信德语',
  se: '北萨米文',
  sg: '桑戈语',
  si: '僧伽罗语',
  sk: '斯洛伐克语',
  sl: '斯洛文尼亚语',
  sm: '萨摩亚语',
  sn: '绍纳语',
  so: '索马里语',
  sq: '阿尔巴尼亚语',
  sr: '塞尔维亚语',
  ss: '斯瓦蒂语',
  st: '南索托语',
  su: '巽他语',
  sv: '瑞典语',
  sw: '斯瓦希里语',
  ta: '泰米尔语',
  te: '泰卢固语',
  tg: '塔吉克语',
  th: '泰语',
  ti: '提格雷语',
  tk: '土库曼语',
  tl: '菲律宾语',
  tn: '茨瓦纳语',
  to: '汤加语',
  tr: '土耳其语',
  ts: '特松加语',
  tt: '塔塔尔语',
  tw: '契维语',
  ty: '塔希提语',
  ug: '维吾尔语',
  uk: '乌克兰语',
  ur: '乌尔都语',
  uz: '乌兹别克语',
  ve: '文达语',
  vi: '越南语',
  vo: '沃拉普克语',
  wa: '华隆语',
  wo: '沃洛夫语',
  xh: '科萨语',
  yi: '意第绪语',
  yo: '约鲁巴语',
  za: '壮语',
  zh: '中文',
  zu: '祖鲁语',
};

class ISO6391ZH extends ISO6391 {
  static getLanguages(codes) {
    return super.getLanguages(codes).map(language => {
      Object.assign(language, {
        zhName: ISO6391ZH.getZhName(language.code),
      });
      return language;
    });
  }

  static getZhName(code) {
    return super.validate(code) ? LANGUAGES_ZH_NAMES[code] : '';
  }

  static getAllZhNames() {
    return Object.values(LANGUAGES_ZH_NAMES);
  }
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

var iso31661Alpha2 = {exports: {}};

/**
     * Safer Object.hasOwnProperty
     */
     function hasOwn$4(obj, prop){
         return Object.prototype.hasOwnProperty.call(obj, prop);
     }

     var hasOwn_1 = hasOwn$4;

var hasOwn$3 = hasOwn_1;

    var _hasDontEnumBug,
        _dontEnums;

    function checkDontEnum(){
        _dontEnums = [
                'toString',
                'toLocaleString',
                'valueOf',
                'hasOwnProperty',
                'isPrototypeOf',
                'propertyIsEnumerable',
                'constructor'
            ];

        _hasDontEnumBug = true;

        for (var key in {'toString': null}) {
            _hasDontEnumBug = false;
        }
    }

    /**
     * Similar to Array/forEach but works over object properties and fixes Don't
     * Enum bug on IE.
     * based on: http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation
     */
    function forIn$2(obj, fn, thisObj){
        var key, i = 0;
        // no need to check if argument is a real object that way we can use
        // it for arrays, functions, date, etc.

        //post-pone check till needed
        if (_hasDontEnumBug == null) checkDontEnum();

        for (key in obj) {
            if (exec(fn, obj, key, thisObj) === false) {
                break;
            }
        }


        if (_hasDontEnumBug) {
            var ctor = obj.constructor,
                isProto = !!ctor && obj === ctor.prototype;

            while (key = _dontEnums[i++]) {
                // For constructor, if it is a prototype object the constructor
                // is always non-enumerable unless defined otherwise (and
                // enumerated above).  For non-prototype objects, it will have
                // to be defined on this object, since it cannot be defined on
                // any prototype objects.
                //
                // For other [[DontEnum]] properties, check if the value is
                // different than Object prototype value.
                if (
                    (key !== 'constructor' ||
                        (!isProto && hasOwn$3(obj, key))) &&
                    obj[key] !== Object.prototype[key]
                ) {
                    if (exec(fn, obj, key, thisObj) === false) {
                        break;
                    }
                }
            }
        }
    }

    function exec(fn, obj, key, thisObj){
        return fn.call(thisObj, obj[key], key, obj);
    }

    var forIn_1 = forIn$2;

var forIn$1 = forIn_1;

    /**
     * return a list of all enumerable properties that have function values
     */
    function functions$1(obj){
        var keys = [];
        forIn$1(obj, function(val, key){
            if (typeof val === 'function'){
                keys.push(key);
            }
        });
        return keys.sort();
    }

    var functions_1 = functions$1;

/**
     * Create slice of source array or array-like object
     */
    function slice$5(arr, start, end){
        var len = arr.length;

        if (start == null) {
            start = 0;
        } else if (start < 0) {
            start = Math.max(len + start, 0);
        } else {
            start = Math.min(start, len);
        }

        if (end == null) {
            end = len;
        } else if (end < 0) {
            end = Math.max(len + end, 0);
        } else {
            end = Math.min(end, len);
        }

        var result = [];
        while (start < end) {
            result.push(arr[start++]);
        }

        return result;
    }

    var slice_1 = slice$5;

var slice$4 = slice_1;

    /**
     * Return a function that will execute in the given context, optionally adding any additional supplied parameters to the beginning of the arguments collection.
     * @param {Function} fn  Function.
     * @param {object} context   Execution context.
     * @param {rest} args    Arguments (0...n arguments).
     * @return {Function} Wrapped Function.
     */
    function bind$1(fn, context, args){
        var argsArr = slice$4(arguments, 2); //curried args
        return function(){
            return fn.apply(context, argsArr.concat(slice$4(arguments)));
        };
    }

    var bind_1 = bind$1;

/**
     * Array forEach
     */
    function forEach$3(arr, callback, thisObj) {
        if (arr == null) {
            return;
        }
        var i = -1,
            len = arr.length;
        while (++i < len) {
            // we iterate over sparse items since there is no way to make it
            // work properly on IE 7-8. see #64
            if ( callback.call(thisObj, arr[i], i, arr) === false ) {
                break;
            }
        }
    }

    var forEach_1 = forEach$3;

var functions = functions_1;
var bind = bind_1;
var forEach$2 = forEach_1;
var slice$3 = slice_1;

    /**
     * Binds methods of the object to be run in it's own context.
     */
    function bindAll(obj, rest_methodNames){
        var keys = arguments.length > 1?
                    slice$3(arguments, 1) : functions(obj);
        forEach$2(keys, function(key){
            obj[key] = bind(obj[key], obj);
        });
    }

    var bindAll_1 = bindAll;

var hasOwn$2 = hasOwn_1;
var forIn = forIn_1;

    /**
     * Similar to Array/forEach but works over object properties and fixes Don't
     * Enum bug on IE.
     * based on: http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation
     */
    function forOwn$g(obj, fn, thisObj){
        forIn(obj, function(val, key){
            if (hasOwn$2(obj, key)) {
                return fn.call(thisObj, obj[key], key, obj);
            }
        });
    }

    var forOwn_1 = forOwn$g;

/**
     * Returns the first argument provided to it.
     */
    function identity$1(val){
        return val;
    }

    var identity_1 = identity$1;

/**
     * Returns a function that gets a property of the passed object
     */
    function prop$2(name){
        return function(obj){
            return obj[name];
        };
    }

    var prop_1 = prop$2;

var _rKind = /^\[object (.*)\]$/,
        _toString = Object.prototype.toString,
        UNDEF$1;

    /**
     * Gets the "kind" of value. (e.g. "String", "Number", etc)
     */
    function kindOf$3(val) {
        if (val === null) {
            return 'Null';
        } else if (val === UNDEF$1) {
            return 'Undefined';
        } else {
            return _rKind.exec( _toString.call(val) )[1];
        }
    }
    var kindOf_1 = kindOf$3;

var kindOf$2 = kindOf_1;
    /**
     * Check if value is from a specific "kind".
     */
    function isKind$3(val, kind){
        return kindOf$2(val) === kind;
    }
    var isKind_1 = isKind$3;

var isKind$2 = isKind_1;
    /**
     */
    var isArray$1 = Array.isArray || function (val) {
        return isKind$2(val, 'Array');
    };
    var isArray_1 = isArray$1;

var forOwn$f = forOwn_1;
var isArray = isArray_1;

    function containsMatch(array, pattern) {
        var i = -1, length = array.length;
        while (++i < length) {
            if (deepMatches$1(array[i], pattern)) {
                return true;
            }
        }

        return false;
    }

    function matchArray(target, pattern) {
        var i = -1, patternLength = pattern.length;
        while (++i < patternLength) {
            if (!containsMatch(target, pattern[i])) {
                return false;
            }
        }

        return true;
    }

    function matchObject(target, pattern) {
        var result = true;
        forOwn$f(pattern, function(val, key) {
            if (!deepMatches$1(target[key], val)) {
                // Return false to break out of forOwn early
                return (result = false);
            }
        });

        return result;
    }

    /**
     * Recursively check if the objects match.
     */
    function deepMatches$1(target, pattern){
        if (target && typeof target === 'object') {
            if (isArray(target) && isArray(pattern)) {
                return matchArray(target, pattern);
            } else {
                return matchObject(target, pattern);
            }
        } else {
            return target === pattern;
        }
    }

    var deepMatches_1 = deepMatches$1;

var identity = identity_1;
var prop$1 = prop_1;
var deepMatches = deepMatches_1;

    /**
     * Converts argument into a valid iterator.
     * Used internally on most array/object/collection methods that receives a
     * callback/iterator providing a shortcut syntax.
     */
    function makeIterator$8(src, thisObj){
        if (src == null) {
            return identity;
        }
        switch(typeof src) {
            case 'function':
                // function is the first to improve perf (most common case)
                // also avoid using `Function#call` if not needed, which boosts
                // perf a lot in some cases
                return (typeof thisObj !== 'undefined')? function(val, i, arr){
                    return src.call(thisObj, val, i, arr);
                } : src;
            case 'object':
                return function(val){
                    return deepMatches(val, src);
                };
            case 'string':
            case 'number':
                return prop$1(src);
        }
    }

    var makeIterator_ = makeIterator$8;

var forOwn$e = forOwn_1;
var makeIterator$7 = makeIterator_;

    /**
     * Object some
     */
    function some$2(obj, callback, thisObj) {
        callback = makeIterator$7(callback, thisObj);
        var result = false;
        forOwn$e(obj, function(val, key) {
            if (callback(val, key, obj)) {
                result = true;
                return false; // break
            }
        });
        return result;
    }

    var some_1 = some$2;

var some$1 = some_1;

    /**
     * Check if object contains value
     */
    function contains$2(obj, needle) {
        return some$1(obj, function(val) {
            return (val === needle);
        });
    }
    var contains_1$1 = contains$2;

/**
     * Checks if the value is created by the `Object` constructor.
     */
    function isPlainObject$5(value) {
        return (!!value && typeof value === 'object' &&
            value.constructor === Object);
    }

    var isPlainObject_1 = isPlainObject$5;

var forOwn$d = forOwn_1;
var isPlainObject$4 = isPlainObject_1;

    /**
     * Deeply copy missing properties in the target from the defaults.
     */
    function deepFillIn(target, defaults){
        var i = 0,
            n = arguments.length,
            obj;

        while(++i < n) {
            obj = arguments[i];
            if (obj) {
                // jshint loopfunc: true
                forOwn$d(obj, function(newValue, key) {
                    var curValue = target[key];
                    if (curValue == null) {
                        target[key] = newValue;
                    } else if (isPlainObject$4(curValue) &&
                               isPlainObject$4(newValue)) {
                        deepFillIn(curValue, newValue);
                    }
                });
            }
        }

        return target;
    }

    var deepFillIn_1 = deepFillIn;

var forOwn$c = forOwn_1;
var isPlainObject$3 = isPlainObject_1;

    /**
     * Mixes objects into the target object, recursively mixing existing child
     * objects.
     */
    function deepMixIn(target, objects) {
        var i = 0,
            n = arguments.length,
            obj;

        while(++i < n){
            obj = arguments[i];
            if (obj) {
                forOwn$c(obj, copyProp$1, target);
            }
        }

        return target;
    }

    function copyProp$1(val, key) {
        var existing = this[key];
        if (isPlainObject$3(val) && isPlainObject$3(existing)) {
            deepMixIn(existing, val);
        } else {
            this[key] = val;
        }
    }

    var deepMixIn_1 = deepMixIn;

var forOwn$b = forOwn_1;
var makeIterator$6 = makeIterator_;

    /**
     * Object every
     */
    function every$1(obj, callback, thisObj) {
        callback = makeIterator$6(callback, thisObj);
        var result = true;
        forOwn$b(obj, function(val, key) {
            // we consider any falsy values as "false" on purpose so shorthand
            // syntax can be used to check property existence
            if (!callback(val, key, obj)) {
                result = false;
                return false; // break
            }
        });
        return result;
    }

    var every_1 = every$1;

var isKind$1 = isKind_1;
    /**
     */
    function isObject$2(val) {
        return isKind$1(val, 'Object');
    }
    var isObject_1 = isObject$2;

/**
     * Check if both arguments are egal.
     */
    function is$1(x, y){
        // implementation borrowed from harmony:egal spec
        if (x === y) {
          // 0 === -0, but they are not identical
          return x !== 0 || 1 / x === 1 / y;
        }

        // NaN !== NaN, but they are identical.
        // NaNs are the only non-reflexive value, i.e., if x !== x,
        // then x is a NaN.
        // isNaN is broken: it converts its argument to number, so
        // isNaN("foo") => true
        return x !== x && y !== y;
    }

    var is_1 = is$1;

var hasOwn$1 = hasOwn_1;
var every = every_1;
var isObject$1 = isObject_1;
var is = is_1;

    // Makes a function to compare the object values from the specified compare
    // operation callback.
    function makeCompare(callback) {
        return function(value, key) {
            return hasOwn$1(this, key) && callback(value, this[key]);
        };
    }

    function checkProperties(value, key) {
        return hasOwn$1(this, key);
    }

    /**
     * Checks if two objects have the same keys and values.
     */
    function equals(a, b, callback) {
        callback = callback || is;

        if (!isObject$1(a) || !isObject$1(b)) {
            return callback(a, b);
        }

        return (every(a, makeCompare(callback), b) &&
                every(b, checkProperties, a));
    }

    var equals_1 = equals;

var forEach$1 = forEach_1;
var slice$2 = slice_1;
var forOwn$a = forOwn_1;

    /**
     * Copy missing properties in the obj from the defaults.
     */
    function fillIn(obj, var_defaults){
        forEach$1(slice$2(arguments, 1), function(base){
            forOwn$a(base, function(val, key){
                if (obj[key] == null) {
                    obj[key] = val;
                }
            });
        });
        return obj;
    }

    var fillIn_1 = fillIn;

var forOwn$9 = forOwn_1;
var makeIterator$5 = makeIterator_;

    /**
     * Creates a new object with all the properties where the callback returns
     * true.
     */
    function filterValues(obj, callback, thisObj) {
        callback = makeIterator$5(callback, thisObj);
        var output = {};
        forOwn$9(obj, function(value, key, obj) {
            if (callback(value, key, obj)) {
                output[key] = value;
            }
        });

        return output;
    }
    var filter$1 = filterValues;

var some = some_1;
var makeIterator$4 = makeIterator_;

    /**
     * Returns first item that matches criteria
     */
    function find(obj, callback, thisObj) {
        callback = makeIterator$4(callback, thisObj);
        var result;
        some(obj, function(value, key, obj) {
            if (callback(value, key, obj)) {
                result = value;
                return true; //break
            }
        });
        return result;
    }

    var find_1 = find;

var forOwn$8 = forOwn_1;
var isPlainObject$2 = isPlainObject_1;

    /*
     * Helper function to flatten to a destination object.
     * Used to remove the need to create intermediate objects while flattening.
     */
    function flattenTo(obj, result, prefix, level) {
        forOwn$8(obj, function (value, key) {
            var nestedPrefix = prefix ? prefix + '.' + key : key;

            if (level !== 0 && isPlainObject$2(value)) {
                flattenTo(value, result, nestedPrefix, level - 1);
            } else {
                result[nestedPrefix] = value;
            }
        });

        return result;
    }

    /**
     * Recursively flattens an object.
     * A new object containing all the elements is returned.
     * If level is specified, it will only flatten up to that level.
     */
    function flatten(obj, level) {
        if (obj == null) {
            return {};
        }

        level = level == null ? -1 : level;
        return flattenTo(obj, {}, '', level);
    }

    var flatten_1 = flatten;

/**
     * get "nested" object property
     */
    function get$1(obj, prop){
        var parts = prop.split('.'),
            last = parts.pop();

        while (prop = parts.shift()) {
            obj = obj[prop];
            if (obj == null) return;
        }

        return obj[last];
    }

    var get_1 = get$1;

var get = get_1;

    var UNDEF;

    /**
     * Check if object has nested property.
     */
    function has$1(obj, prop){
        return get(obj, prop) !== UNDEF;
    }

    var has_1 = has$1;

var forOwn$7 = forOwn_1;

    /**
     * Get object keys
     */
     var keys = Object.keys || function (obj) {
            var keys = [];
            forOwn$7(obj, function(val, key){
                keys.push(key);
            });
            return keys;
        };

    var keys_1 = keys;

var forOwn$6 = forOwn_1;
var makeIterator$3 = makeIterator_;

    /**
     * Creates a new object where all the values are the result of calling
     * `callback`.
     */
    function mapValues(obj, callback, thisObj) {
        callback = makeIterator$3(callback, thisObj);
        var output = {};
        forOwn$6(obj, function(val, key, obj) {
            output[key] = callback(val, key, obj);
        });

        return output;
    }
    var map$1 = mapValues;

var forOwn$5 = forOwn_1;

    /**
     * checks if a object contains all given properties/values
     */
    function matches(target, props){
        // can't use "object/every" because of circular dependency
        var result = true;
        forOwn$5(props, function(val, key){
            if (target[key] !== val) {
                // break loop at first difference
                return (result = false);
            }
        });
        return result;
    }

    var matches_1 = matches;

var makeIterator$2 = makeIterator_;

    /**
     * Return maximum value inside array
     */
    function max$1(arr, iterator, thisObj){
        if (arr == null || !arr.length) {
            return Infinity;
        } else if (arr.length && !iterator) {
            return Math.max.apply(Math, arr);
        } else {
            iterator = makeIterator$2(iterator, thisObj);
            var result,
                compare = -Infinity,
                value,
                temp;

            var i = -1, len = arr.length;
            while (++i < len) {
                value = arr[i];
                temp = iterator(value, i, arr);
                if (temp > compare) {
                    compare = temp;
                    result = value;
                }
            }

            return result;
        }
    }

    var max_1$1 = max$1;

var forOwn$4 = forOwn_1;

    /**
     * Get object values
     */
    function values$2(obj) {
        var vals = [];
        forOwn$4(obj, function(val, key){
            vals.push(val);
        });
        return vals;
    }

    var values_1 = values$2;

var arrMax = max_1$1;
var values$1 = values_1;

    /**
     * Returns maximum value inside object.
     */
    function max(obj, compareFn) {
        return arrMax(values$1(obj), compareFn);
    }

    var max_1 = max;

var forOwn$3 = forOwn_1;

    /**
    * Combine properties from all the objects into first one.
    * - This method affects target object in place, if you want to create a new Object pass an empty object as first param.
    * @param {object} target    Target Object
    * @param {...object} objects    Objects to be combined (0...n objects).
    * @return {object} Target Object.
    */
    function mixIn$1(target, objects){
        var i = 0,
            n = arguments.length,
            obj;
        while(++i < n){
            obj = arguments[i];
            if (obj != null) {
                forOwn$3(obj, copyProp, target);
            }
        }
        return target;
    }

    function copyProp(val, key){
        this[key] = val;
    }

    var mixIn_1 = mixIn$1;

var kindOf$1 = kindOf_1;
var isPlainObject$1 = isPlainObject_1;
var mixIn = mixIn_1;

    /**
     * Clone native types.
     */
    function clone$1(val){
        switch (kindOf$1(val)) {
            case 'Object':
                return cloneObject$1(val);
            case 'Array':
                return cloneArray$1(val);
            case 'RegExp':
                return cloneRegExp(val);
            case 'Date':
                return cloneDate(val);
            default:
                return val;
        }
    }

    function cloneObject$1(source) {
        if (isPlainObject$1(source)) {
            return mixIn({}, source);
        } else {
            return source;
        }
    }

    function cloneRegExp(r) {
        var flags = '';
        flags += r.multiline ? 'm' : '';
        flags += r.global ? 'g' : '';
        flags += r.ignoreCase ? 'i' : '';
        return new RegExp(r.source, flags);
    }

    function cloneDate(date) {
        return new Date(+date);
    }

    function cloneArray$1(arr) {
        return arr.slice();
    }

    var clone_1 = clone$1;

var clone = clone_1;
var forOwn$2 = forOwn_1;
var kindOf = kindOf_1;
var isPlainObject = isPlainObject_1;

    /**
     * Recursively clone native types.
     */
    function deepClone$1(val, instanceClone) {
        switch ( kindOf(val) ) {
            case 'Object':
                return cloneObject(val, instanceClone);
            case 'Array':
                return cloneArray(val, instanceClone);
            default:
                return clone(val);
        }
    }

    function cloneObject(source, instanceClone) {
        if (isPlainObject(source)) {
            var out = {};
            forOwn$2(source, function(val, key) {
                this[key] = deepClone$1(val, instanceClone);
            }, out);
            return out;
        } else if (instanceClone) {
            return instanceClone(source);
        } else {
            return source;
        }
    }

    function cloneArray(arr, instanceClone) {
        var out = [],
            i = -1,
            n = arr.length;
        while (++i < n) {
            out[i] = deepClone$1(arr[i], instanceClone);
        }
        return out;
    }

    var deepClone_1 = deepClone$1;

var hasOwn = hasOwn_1;
var deepClone = deepClone_1;
var isObject = isObject_1;

    /**
     * Deep merge objects.
     */
    function merge() {
        var i = 1,
            key, val, obj, target;

        // make sure we don't modify source element and it's properties
        // objects are passed by reference
        target = deepClone( arguments[0] );

        while (obj = arguments[i++]) {
            for (key in obj) {
                if ( ! hasOwn(obj, key) ) {
                    continue;
                }

                val = obj[key];

                if ( isObject(val) && isObject(target[key]) ){
                    // inception, deep merge objects
                    target[key] = merge(target[key], val);
                } else {
                    // make sure arrays, regexp, date, objects are cloned
                    target[key] = deepClone(val);
                }

            }
        }

        return target;
    }

    var merge_1 = merge;

var makeIterator$1 = makeIterator_;

    /**
     * Return minimum value inside array
     */
    function min$1(arr, iterator, thisObj){
        if (arr == null || !arr.length) {
            return -Infinity;
        } else if (arr.length && !iterator) {
            return Math.min.apply(Math, arr);
        } else {
            iterator = makeIterator$1(iterator, thisObj);
            var result,
                compare = Infinity,
                value,
                temp;

            var i = -1, len = arr.length;
            while (++i < len) {
                value = arr[i];
                temp = iterator(value, i, arr);
                if (temp < compare) {
                    compare = temp;
                    result = value;
                }
            }

            return result;
        }
    }

    var min_1$1 = min$1;

var arrMin = min_1$1;
var values = values_1;

    /**
     * Returns minimum value inside object.
     */
    function min(obj, iterator) {
        return arrMin(values(obj), iterator);
    }

    var min_1 = min;

var forEach = forEach_1;

    /**
     * Create nested object if non-existent
     */
    function namespace$1(obj, path){
        if (!path) return obj;
        forEach(path.split('.'), function(key){
            if (!obj[key]) {
                obj[key] = {};
            }
            obj = obj[key];
        });
        return obj;
    }

    var namespace_1 = namespace$1;

/**
     * Array.indexOf
     */
    function indexOf$1(arr, item, fromIndex) {
        fromIndex = fromIndex || 0;
        if (arr == null) {
            return -1;
        }

        var len = arr.length,
            i = fromIndex < 0 ? len + fromIndex : fromIndex;
        while (i < len) {
            // we iterate over sparse items since there is no way to make it
            // work properly on IE 7-8. see #64
            if (arr[i] === item) {
                return i;
            }

            i++;
        }

        return -1;
    }

    var indexOf_1 = indexOf$1;

var indexOf = indexOf_1;

    /**
     * If array contains values.
     */
    function contains$1(arr, val) {
        return indexOf(arr, val) !== -1;
    }
    var contains_1 = contains$1;

var slice$1 = slice_1;
var contains = contains_1;

    /**
     * Return a copy of the object, filtered to only contain properties except the blacklisted keys.
     */
    function omit(obj, var_keys){
        var keys = typeof arguments[1] !== 'string'? arguments[1] : slice$1(arguments, 1),
            out = {};

        for (var property in obj) {
            if (obj.hasOwnProperty(property) && !contains(keys, property)) {
                out[property] = obj[property];
            }
        }
        return out;
    }

    var omit_1 = omit;

var slice = slice_1;

    /**
     * Return a copy of the object, filtered to only have values for the whitelisted keys.
     */
    function pick(obj, var_keys){
        var keys = typeof arguments[1] !== 'string'? arguments[1] : slice(arguments, 1),
            out = {},
            i = 0, key;
        while (key = keys[i++]) {
            out[key] = obj[key];
        }
        return out;
    }

    var pick_1 = pick;

var map = map$1;
var prop = prop_1;

    /**
     * Extract a list of property values.
     */
    function pluck(obj, propName){
        return map(obj, prop(propName));
    }

    var pluck_1 = pluck;

var forOwn$1 = forOwn_1;

    /**
     * Get object size
     */
    function size$1(obj) {
        var count = 0;
        forOwn$1(obj, function(){
            count++;
        });
        return count;
    }

    var size_1 = size$1;

var forOwn = forOwn_1;
var size = size_1;

    /**
     * Object reduce
     */
    function reduce(obj, callback, memo, thisObj) {
        var initial = arguments.length > 2;

        if (!size(obj) && !initial) {
            throw new Error('reduce of empty object with no initial value');
        }

        forOwn(obj, function(value, key, list) {
            if (!initial) {
                memo = value;
                initial = true;
            }
            else {
                memo = callback.call(thisObj, memo, value, key, list);
            }
        });

        return memo;
    }

    var reduce_1 = reduce;

var filter = filter$1;
var makeIterator = makeIterator_;

    /**
     * Object reject
     */
    function reject(obj, callback, thisObj) {
        callback = makeIterator(callback, thisObj);
        return filter(obj, function(value, index, obj) {
            return !callback(value, index, obj);
        }, thisObj);
    }

    var reject_1 = reject;

var isKind = isKind_1;
    /**
     */
    function isFunction$1(val) {
        return isKind(val, 'Function');
    }
    var isFunction_1 = isFunction$1;

var isFunction = isFunction_1;

    function result(obj, prop) {
        var property = obj[prop];

        if(property === undefined) {
            return;
        }

        return isFunction(property) ? property.call(obj) : property;
    }

    var result_1 = result;

var namespace = namespace_1;

    /**
     * set "nested" object property
     */
    function set(obj, prop, val){
        var parts = (/^(.+)\.(.+)$/).exec(prop);
        if (parts){
            namespace(obj, parts[1])[parts[2]] = val;
        } else {
            obj[prop] = val;
        }
    }

    var set_1 = set;

var has = has_1;

    /**
     * Unset object property.
     */
    function unset(obj, prop){
        if (has(obj, prop)) {
            var parts = prop.split('.'),
                last = parts.pop();
            while (prop = parts.shift()) {
                obj = obj[prop];
            }
            return (delete obj[last]);

        } else {
            // if property doesn't exist treat as deleted
            return true;
        }
    }

    var unset_1 = unset;

//automatically generated, do not edit!
//run `node build` instead
var object = {
    'bindAll' : bindAll_1,
    'contains' : contains_1$1,
    'deepFillIn' : deepFillIn_1,
    'deepMatches' : deepMatches_1,
    'deepMixIn' : deepMixIn_1,
    'equals' : equals_1,
    'every' : every_1,
    'fillIn' : fillIn_1,
    'filter' : filter$1,
    'find' : find_1,
    'flatten' : flatten_1,
    'forIn' : forIn_1,
    'forOwn' : forOwn_1,
    'functions' : functions_1,
    'get' : get_1,
    'has' : has_1,
    'hasOwn' : hasOwn_1,
    'keys' : keys_1,
    'map' : map$1,
    'matches' : matches_1,
    'max' : max_1,
    'merge' : merge_1,
    'min' : min_1,
    'mixIn' : mixIn_1,
    'namespace' : namespace_1,
    'omit' : omit_1,
    'pick' : pick_1,
    'pluck' : pluck_1,
    'reduce' : reduce_1,
    'reject' : reject_1,
    'result' : result_1,
    'set' : set_1,
    'size' : size_1,
    'some' : some_1,
    'unset' : unset_1,
    'values' : values_1
};

(function() {
    var Iso31661a2, mout, singleton;

    mout = object;

    Iso31661a2 = (function() {
        function Iso31661a2() {}

        Iso31661a2.prototype.getCountry = function(code) {
            return Iso31661a2.prototype.countries[code];
        };

        Iso31661a2.prototype.getCode = function(country) {
            var idx, ret;
            ret = null;
            if (country != null) {
                idx = mout.values(Iso31661a2.prototype.countries).indexOf(country);
                if (idx !== -1) {
                    ret = Object.keys(Iso31661a2.prototype.countries)[idx];
                }
            }
            return ret;
        };

        Iso31661a2.prototype.getCountries = function() {
            return mout.values(Iso31661a2.prototype.countries);
        };

        Iso31661a2.prototype.getCodes = function() {
            return Object.keys(Iso31661a2.prototype.countries);
        };

        Iso31661a2.prototype.getData = function() {
            return Iso31661a2.prototype.countries;
        };

        Iso31661a2.prototype.countries = {
            AF: "Afghanistan",
            AX: "Åland Islands",
            AL: "Albania",
            DZ: "Algeria",
            AS: "American Samoa",
            AD: "Andorra",
            AO: "Angola",
            AI: "Anguilla",
            AQ: "Antarctica",
            AG: "Antigua and Barbuda",
            AR: "Argentina",
            AM: "Armenia",
            AW: "Aruba",
            AU: "Australia",
            AT: "Austria",
            AZ: "Azerbaijan",
            BS: "Bahamas",
            BH: "Bahrain",
            BD: "Bangladesh",
            BB: "Barbados",
            BY: "Belarus",
            BE: "Belgium",
            BZ: "Belize",
            BJ: "Benin",
            BM: "Bermuda",
            BT: "Bhutan",
            BO: "Bolivia, Plurinational State of",
            BQ: "Bonaire, Sint Eustatius and Saba",
            BA: "Bosnia and Herzegovina",
            BW: "Botswana",
            BV: "Bouvet Island",
            BR: "Brazil",
            IO: "British Indian Ocean Territory",
            BN: "Brunei Darussalam",
            BG: "Bulgaria",
            BF: "Burkina Faso",
            BI: "Burundi",
            KH: "Cambodia",
            CM: "Cameroon",
            CA: "Canada",
            CV: "Cape Verde",
            KY: "Cayman Islands",
            CF: "Central African Republic",
            TD: "Chad",
            CL: "Chile",
            CN: "China",
            CX: "Christmas Island",
            CC: "Cocos (Keeling) Islands",
            CO: "Colombia",
            KM: "Comoros",
            CG: "Congo",
            CD: "Congo, the Democratic Republic of the",
            CK: "Cook Islands",
            CR: "Costa Rica",
            CI: "Côte d'Ivoire",
            HR: "Croatia",
            CU: "Cuba",
            CW: "Curaçao",
            CY: "Cyprus",
            CZ: "Czech Republic",
            DK: "Denmark",
            DJ: "Djibouti",
            DM: "Dominica",
            DO: "Dominican Republic",
            EC: "Ecuador",
            EG: "Egypt",
            SV: "El Salvador",
            GQ: "Equatorial Guinea",
            ER: "Eritrea",
            EE: "Estonia",
            ET: "Ethiopia",
            FK: "Falkland Islands (Malvinas)",
            FO: "Faroe Islands",
            FJ: "Fiji",
            FI: "Finland",
            FR: "France",
            GF: "French Guiana",
            PF: "French Polynesia",
            TF: "French Southern Territories",
            GA: "Gabon",
            GM: "Gambia",
            GE: "Georgia",
            DE: "Germany",
            GH: "Ghana",
            GI: "Gibraltar",
            GR: "Greece",
            GL: "Greenland",
            GD: "Grenada",
            GP: "Guadeloupe",
            GU: "Guam",
            GT: "Guatemala",
            GG: "Guernsey",
            GN: "Guinea",
            GW: "Guinea-Bissau",
            GY: "Guyana",
            HT: "Haiti",
            HM: "Heard Island and McDonald Mcdonald Islands",
            VA: "Holy See (Vatican City State)",
            HN: "Honduras",
            HK: "Hong Kong",
            HU: "Hungary",
            IS: "Iceland",
            IN: "India",
            ID: "Indonesia",
            IR: "Iran, Islamic Republic of",
            IQ: "Iraq",
            IE: "Ireland",
            IM: "Isle of Man",
            IL: "Israel",
            IT: "Italy",
            JM: "Jamaica",
            JP: "Japan",
            JE: "Jersey",
            JO: "Jordan",
            KZ: "Kazakhstan",
            KE: "Kenya",
            KI: "Kiribati",
            KP: "Korea, Democratic People's Republic of",
            KR: "Korea, Republic of",
            KW: "Kuwait",
            KG: "Kyrgyzstan",
            LA: "Lao People's Democratic Republic",
            LV: "Latvia",
            LB: "Lebanon",
            LS: "Lesotho",
            LR: "Liberia",
            LY: "Libya",
            LI: "Liechtenstein",
            LT: "Lithuania",
            LU: "Luxembourg",
            MO: "Macao",
            MK: "Macedonia, the Former Yugoslav Republic of",
            MG: "Madagascar",
            MW: "Malawi",
            MY: "Malaysia",
            MV: "Maldives",
            ML: "Mali",
            MT: "Malta",
            MH: "Marshall Islands",
            MQ: "Martinique",
            MR: "Mauritania",
            MU: "Mauritius",
            YT: "Mayotte",
            MX: "Mexico",
            FM: "Micronesia, Federated States of",
            MD: "Moldova, Republic of",
            MC: "Monaco",
            MN: "Mongolia",
            ME: "Montenegro",
            MS: "Montserrat",
            MA: "Morocco",
            MZ: "Mozambique",
            MM: "Myanmar",
            NA: "Namibia",
            NR: "Nauru",
            NP: "Nepal",
            NL: "Netherlands",
            NC: "New Caledonia",
            NZ: "New Zealand",
            NI: "Nicaragua",
            NE: "Niger",
            NG: "Nigeria",
            NU: "Niue",
            NF: "Norfolk Island",
            MP: "Northern Mariana Islands",
            NO: "Norway",
            OM: "Oman",
            PK: "Pakistan",
            PW: "Palau",
            PS: "Palestine, State of",
            PA: "Panama",
            PG: "Papua New Guinea",
            PY: "Paraguay",
            PE: "Peru",
            PH: "Philippines",
            PN: "Pitcairn",
            PL: "Poland",
            PT: "Portugal",
            PR: "Puerto Rico",
            QA: "Qatar",
            RE: "Réunion",
            RO: "Romania",
            RU: "Russian Federation",
            RW: "Rwanda",
            BL: "Saint Barthélemy",
            SH: "Saint Helena, Ascension and Tristan da Cunha",
            KN: "Saint Kitts and Nevis",
            LC: "Saint Lucia",
            MF: "Saint Martin (French part)",
            PM: "Saint Pierre and Miquelon",
            VC: "Saint Vincent and the Grenadines",
            WS: "Samoa",
            SM: "San Marino",
            ST: "Sao Tome and Principe",
            SA: "Saudi Arabia",
            SN: "Senegal",
            RS: "Serbia",
            SC: "Seychelles",
            SL: "Sierra Leone",
            SG: "Singapore",
            SX: "Sint Maarten (Dutch part)",
            SK: "Slovakia",
            SI: "Slovenia",
            SB: "Solomon Islands",
            SO: "Somalia",
            ZA: "South Africa",
            GS: "South Georgia and the South Sandwich Islands",
            SS: "South Sudan",
            ES: "Spain",
            LK: "Sri Lanka",
            SD: "Sudan",
            SR: "Suriname",
            SJ: "Svalbard and Jan Mayen",
            SZ: "Swaziland",
            SE: "Sweden",
            CH: "Switzerland",
            SY: "Syrian Arab Republic",
            TW: "Taiwan, Province of China",
            TJ: "Tajikistan",
            TZ: "Tanzania, United Republic of",
            TH: "Thailand",
            TL: "Timor-Leste",
            TG: "Togo",
            TK: "Tokelau",
            TO: "Tonga",
            TT: "Trinidad and Tobago",
            TN: "Tunisia",
            TR: "Turkey",
            TM: "Turkmenistan",
            TC: "Turks and Caicos Islands",
            TV: "Tuvalu",
            UG: "Uganda",
            UA: "Ukraine",
            AE: "United Arab Emirates",
            GB: "United Kingdom",
            US: "United States",
            UM: "United States Minor Outlying Islands",
            UY: "Uruguay",
            UZ: "Uzbekistan",
            VU: "Vanuatu",
            VE: "Venezuela, Bolivarian Republic of",
            VN: "Viet Nam",
            VG: "Virgin Islands, British",
            VI: "Virgin Islands, U.S.",
            WF: "Wallis and Futuna",
            EH: "Western Sahara",
            YE: "Yemen",
            ZM: "Zambia",
            ZW: "Zimbabwe"
        };

        return Iso31661a2;

    })();

    singleton = null;

    iso31661Alpha2.exports = (function() {
        return singleton != null ? singleton : singleton = new Iso31661a2();
    })();

}).call(commonjsGlobal);

var CountryCode = iso31661Alpha2.exports;

const REG = /^([a-z]{2})-([A-Z]{2})$/;

class LocaleCode {
  /* language iso-639-1 */
  static getLanguageCode(code) {
    var match = code.match(REG);
    if(!match || match.length < 1) return ''
    return match[1]
  }

  static getLanguageName(code) {
    var languageCode = LocaleCode.getLanguageCode(code);
    return ISO6391ZH.getName(languageCode)
  }

  static getLanguageNativeName(code) {
    var languageCode = LocaleCode.getLanguageCode(code);
    return ISO6391ZH.getNativeName(languageCode)
  }

  static getLanguageZhName(code) {
    var languageCode = LocaleCode.getLanguageCode(code);
    return ISO6391ZH.getZhName(languageCode)
  }

  static validateLanguageCode(code) {
    var languageCode = LocaleCode.getLanguageCode(code);
    return ISO6391ZH.validate(languageCode)
  }

  static getLanguages(codes) {
    var list = [];
    for (var i = 0; i < codes.length; i++) {
      list.push({
        code:codes[i], 
        name: LocaleCode.getLanguageName(codes[i]),
        nativeName: LocaleCode.getLanguageNativeName(codes[i]),
        zhName: LocaleCode.getLanguageZhName(codes[i])
      });
    }
    return list
  }

  /* country iso-3166-1-alpha-2 */
  static getCountryCode(code) {
    var match = code.match(REG);
    if(!match || match.length < 2) return ''
    return match[2]
  }
  static getCountryName(code) {
    var countryCode = LocaleCode.getCountryCode(code);
    return CountryCode.getCountry(countryCode)
  }
  static validateCountryCode(code) {
    code = LocaleCode.getCountryCode(code);
    if(CountryCode.getCodes().indexOf(code) === -1) {
      return false
    } else {
      return true
    }
  }

  /* validate */
  static validate(code) {
    var match = code.match(REG);
    if(match && match.length === 3 && 
      LocaleCode.validateLanguageCode(code) &&
      LocaleCode.validateCountryCode(code)) {
      return true
    } else {
      return false
    }
  }
}

// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
    // find the complete implementation of crypto (msCrypto) on IE11.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}

var REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

function validate(uuid) {
  return typeof uuid === 'string' && REGEX.test(uuid);
}

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

var byteToHex = [];

for (var i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}

function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!validate(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

function v4(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return stringify(rnds);
}

var base64 = {exports: {}};

/*! http://mths.be/base64 v0.1.0 by @mathias | MIT license */

(function (module, exports) {
(function(root) {

	// Detect free variables `exports`.
	var freeExports = exports;

	// Detect free variable `module`.
	var freeModule = module &&
		module.exports == freeExports && module;

	// Detect free variable `global`, from Node.js or Browserified code, and use
	// it as `root`.
	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal;
	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
		root = freeGlobal;
	}

	/*--------------------------------------------------------------------------*/

	var InvalidCharacterError = function(message) {
		this.message = message;
	};
	InvalidCharacterError.prototype = new Error;
	InvalidCharacterError.prototype.name = 'InvalidCharacterError';

	var error = function(message) {
		// Note: the error messages used throughout this file match those used by
		// the native `atob`/`btoa` implementation in Chromium.
		throw new InvalidCharacterError(message);
	};

	var TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	// http://whatwg.org/html/common-microsyntaxes.html#space-character
	var REGEX_SPACE_CHARACTERS = /[\t\n\f\r ]/g;

	// `decode` is designed to be fully compatible with `atob` as described in the
	// HTML Standard. http://whatwg.org/html/webappapis.html#dom-windowbase64-atob
	// The optimized base64-decoding algorithm used is based on @atk’s excellent
	// implementation. https://gist.github.com/atk/1020396
	var decode = function(input) {
		input = String(input)
			.replace(REGEX_SPACE_CHARACTERS, '');
		var length = input.length;
		if (length % 4 == 0) {
			input = input.replace(/==?$/, '');
			length = input.length;
		}
		if (
			length % 4 == 1 ||
			// http://whatwg.org/C#alphanumeric-ascii-characters
			/[^+a-zA-Z0-9/]/.test(input)
		) {
			error(
				'Invalid character: the string to be decoded is not correctly encoded.'
			);
		}
		var bitCounter = 0;
		var bitStorage;
		var buffer;
		var output = '';
		var position = -1;
		while (++position < length) {
			buffer = TABLE.indexOf(input.charAt(position));
			bitStorage = bitCounter % 4 ? bitStorage * 64 + buffer : buffer;
			// Unless this is the first of a group of 4 characters…
			if (bitCounter++ % 4) {
				// …convert the first 8 bits to a single ASCII character.
				output += String.fromCharCode(
					0xFF & bitStorage >> (-2 * bitCounter & 6)
				);
			}
		}
		return output;
	};

	// `encode` is designed to be fully compatible with `btoa` as described in the
	// HTML Standard: http://whatwg.org/html/webappapis.html#dom-windowbase64-btoa
	var encode = function(input) {
		input = String(input);
		if (/[^\0-\xFF]/.test(input)) {
			// Note: no need to special-case astral symbols here, as surrogates are
			// matched, and the input is supposed to only contain ASCII anyway.
			error(
				'The string to be encoded contains characters outside of the ' +
				'Latin1 range.'
			);
		}
		var padding = input.length % 3;
		var output = '';
		var position = -1;
		var a;
		var b;
		var c;
		var buffer;
		// Make sure any padding is handled outside of the loop.
		var length = input.length - padding;

		while (++position < length) {
			// Read three bytes, i.e. 24 bits.
			a = input.charCodeAt(position) << 16;
			b = input.charCodeAt(++position) << 8;
			c = input.charCodeAt(++position);
			buffer = a + b + c;
			// Turn the 24 bits into four chunks of 6 bits each, and append the
			// matching character for each of them to the output.
			output += (
				TABLE.charAt(buffer >> 18 & 0x3F) +
				TABLE.charAt(buffer >> 12 & 0x3F) +
				TABLE.charAt(buffer >> 6 & 0x3F) +
				TABLE.charAt(buffer & 0x3F)
			);
		}

		if (padding == 2) {
			a = input.charCodeAt(position) << 8;
			b = input.charCodeAt(++position);
			buffer = a + b;
			output += (
				TABLE.charAt(buffer >> 10) +
				TABLE.charAt((buffer >> 4) & 0x3F) +
				TABLE.charAt((buffer << 2) & 0x3F) +
				'='
			);
		} else if (padding == 1) {
			buffer = input.charCodeAt(position);
			output += (
				TABLE.charAt(buffer >> 2) +
				TABLE.charAt((buffer << 4) & 0x3F) +
				'=='
			);
		}

		return output;
	};

	var base64 = {
		'encode': encode,
		'decode': decode,
		'version': '0.1.0'
	};

	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (freeExports && !freeExports.nodeType) {
		if (freeModule) { // in Node.js or RingoJS v0.8.0+
			freeModule.exports = base64;
		} else { // in Narwhal or RingoJS v0.7.0-
			for (var key in base64) {
				base64.hasOwnProperty(key) && (freeExports[key] = base64[key]);
			}
		}
	} else { // in Rhino or a web browser
		root.base64 = base64;
	}

}(commonjsGlobal));
}(base64, base64.exports));

const minTokenValidTime = 60 * 60 * 1000; // 1 hour
function fetchToken(baseUrl, projectId, appId, deviceId, fetcher = fetch, nowFn = Date.now) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        let body;
        if (projectId !== undefined) {
            body = { projectId, deviceId };
        }
        else {
            body = { appId, deviceId };
        }
        const response = yield fetcher(baseUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(body),
        });
        const json = yield response.json();
        if (response.status !== 200) {
            throw Error((_a = json.error) !== null && _a !== void 0 ? _a : `Speechly API login request failed with ${response.status}`);
        }
        if (json.access_token === undefined) {
            throw Error('Invalid login response from Speechly API');
        }
        if (!validateToken(json.access_token, projectId, appId, deviceId, nowFn)) {
            throw Error('Invalid token received from Speechly API');
        }
        return json.access_token;
    });
}
function validateToken(token, projectId, appId, deviceId, now = Date.now) {
    const decoded = decodeToken(token);
    if (decoded.expiresAtMs - now() < minTokenValidTime) {
        return false;
    }
    if (decoded.appId !== appId || decoded.projectId !== projectId) {
        return false;
    }
    if (decoded.deviceId !== deviceId) {
        return false;
    }
    return true;
}
function decodeToken(token) {
    const b = token.split('.')[1];
    let body;
    try {
        body = JSON.parse(base64.exports.decode(b));
    }
    catch (e) {
        throw new Error('Error decoding Speechly token!');
    }
    return {
        appId: body.appId,
        projectId: body.projectId,
        deviceId: body.deviceId,
        configId: body.configId,
        scopes: body.scope.split(' '),
        issuer: body.iss,
        audience: body.aud,
        expiresAtMs: body.exp * 1000, // JWT exp is in seconds, convert to ms, since that's what JS works with.
    };
}

/**
 * Default sample rate for microphone streams.
 * @public
 */
const DefaultSampleRate = 16000;
/**
 * Error to be thrown when the microphone was accessed before it was initialized.
 * @public
 */
const ErrNotInitialized = new Error('Microphone is not initialized');
/**
 * Error to be thrown when the initialize method of a Microphone instance is called more than once.
 * @public
 */
const ErrAlreadyInitialized = new Error('Microphone is already initialized');
/**
 * Error to be thrown when the device does not support the Microphone instance's target audio APIs.
 * @public
 */
const ErrDeviceNotSupported = new Error('Current device does not support microphone API');
/**
 * Error to be thrown when user did not give consent to the application to record audio.
 * @public
 */
const ErrNoAudioConsent = new Error('Microphone consent is no given');
/**
 * Error to be thrown when user tries to change appId without project login.
 * @public
 */
const ErrAppIdChangeWithoutProjectLogin = new Error('AppId changed without project login');

var audioworklet = `
// Indices for the Control SAB.
const CONTROL = {
  'WRITE_INDEX': 0,
  'FRAMES_AVAILABLE': 1,
  'LOCK': 2,
};

class SpeechlyProcessor extends AudioWorkletProcessor {
  constructor() {
    super();

    this._initialized = false;
    this.debug = false;
    this.port.onmessage = this._initialize.bind(this);
  }

  _initialize(event) {
    this.controlSAB = new Int32Array(event.data.controlSAB);
    this.dataSAB = new Float32Array(event.data.dataSAB);
    this.debug = event.data.debug;
    this.sharedBufferSize = this.dataSAB.length;
    this.buffer = new Float32Array(0);
    this._initialized = true;
  }

  _transferDataToSharedBuffer(data) {
    this.controlSAB[CONTROL.LOCK] = 1
    let inputWriteIndex = this.controlSAB[CONTROL.WRITE_INDEX]
    if (this.controlSAB[CONTROL.FRAMES_AVAILABLE] > 0) {
      if (inputWriteIndex + data.length > this.sharedBufferSize) {
        // console.log('buffer overflow')
        inputWriteIndex = 0
      }
    }
    this.dataSAB.set(data, inputWriteIndex)
    this.controlSAB[CONTROL.WRITE_INDEX] = inputWriteIndex + data.length
    this.controlSAB[CONTROL.FRAMES_AVAILABLE] = inputWriteIndex + data.length
    this.controlSAB[CONTROL.LOCK] = 0
  }

  _pushData(data) {
    if (this.debug) {
      const signalEnergy = getStandardDeviation(data)
      this.port.postMessage({
        type: 'STATS',
        signalEnergy: signalEnergy
      });
    }

    if (this.buffer.length > this.sharedBufferSize) {
      const dataToTransfer = this.buffer.subarray(0, this.sharedBufferSize)
      this._transferDataToSharedBuffer(dataToTransfer)
      this.buffer = this.buffer.subarray(this.sharedBufferSize)
    }
    let concat = new Float32Array(this.buffer.length + data.length)
    concat.set(this.buffer)
    concat.set(data, this.buffer.length)
    this.buffer = concat
  }

  process(inputs, outputs, parameters) {
    const inputChannelData = inputs[0][0];
      if (inputChannelData !== undefined) {
        if (this.controlSAB && this.dataSAB) {
          this._pushData(inputChannelData);
        } else {
          this.port.postMessage({
            type: 'DATA',
            frames: inputChannelData
          });
        }
      }
      
      return true;
  }
}

function getStandardDeviation(array) {
  const n = array.length
  const mean = array.reduce((a, b) => a + b) / n
  return Math.sqrt(array.map(x => Math.pow(x - mean, 2)).reduce((a, b) => a + b) / n)
}

registerProcessor('speechly-worklet', SpeechlyProcessor);
`;

const audioProcessEvent = 'audioprocess';
const baseBufferSize = 4096;
class BrowserMicrophone {
    constructor(isWebkit, sampleRate, apiClient, debug = false) {
        this.initialized = false;
        this.muted = false;
        this.stats = {
            maxSignalEnergy: 0.0,
        };
        this.handleAudio = (array) => {
            if (this.muted) {
                return;
            }
            if (array.length > 0) {
                this.apiClient.sendAudio(array);
            }
        };
        this.isWebkit = isWebkit;
        this.apiClient = apiClient;
        this.sampleRate = sampleRate;
        this.debug = debug;
    }
    initialize(audioContext, mediaStreamConstraints) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (((_a = window.navigator) === null || _a === void 0 ? void 0 : _a.mediaDevices) === undefined) {
                throw ErrDeviceNotSupported;
            }
            this.audioContext = audioContext;
            this.resampleRatio = this.audioContext.sampleRate / this.sampleRate;
            try {
                this.mediaStream = yield window.navigator.mediaDevices.getUserMedia(mediaStreamConstraints);
            }
            catch (_b) {
                throw ErrNoAudioConsent;
            }
            this.audioTrack = this.mediaStream.getAudioTracks()[0];
            // Start audio context if we are dealing with a non-WebKit browser.
            //
            // Non-webkit browsers (currently only Chrome on Android)
            // require that user media is obtained before resuming the audio context.
            //
            // If audio context is attempted to be resumed before `mediaDevices.getUserMedia`,
            // `audioContext.resume()` will hang indefinitely, without being resolved or rejected.
            if (!this.isWebkit) {
                yield this.audioContext.resume();
            }
            if (window.AudioWorkletNode !== undefined) {
                const blob = new Blob([audioworklet], { type: 'text/javascript' });
                const blobURL = window.URL.createObjectURL(blob);
                yield this.audioContext.audioWorklet.addModule(blobURL);
                const speechlyNode = new AudioWorkletNode(this.audioContext, 'speechly-worklet');
                this.audioContext.createMediaStreamSource(this.mediaStream).connect(speechlyNode);
                speechlyNode.connect(this.audioContext.destination);
                // @ts-ignore
                if (window.SharedArrayBuffer !== undefined) {
                    // Chrome, Edge, Firefox, Firefox Android
                    // @ts-ignore
                    const controlSAB = new window.SharedArrayBuffer(4 * Int32Array.BYTES_PER_ELEMENT);
                    // @ts-ignore
                    const dataSAB = new window.SharedArrayBuffer(1024 * Float32Array.BYTES_PER_ELEMENT);
                    this.apiClient.postMessage({
                        type: 'SET_SHARED_ARRAY_BUFFERS',
                        controlSAB,
                        dataSAB,
                    });
                    speechlyNode.port.postMessage({
                        type: 'SET_SHARED_ARRAY_BUFFERS',
                        controlSAB,
                        dataSAB,
                        debug: this.debug,
                    });
                }
                else {
                    // Opera, Chrome Android, Webview Anroid
                    if (this.debug) {
                        console.log('[SpeechlyClient]', 'can not use SharedArrayBuffer');
                    }
                }
                speechlyNode.port.onmessage = (event) => {
                    switch (event.data.type) {
                        case 'STATS':
                            if (event.data.signalEnergy > this.stats.maxSignalEnergy) {
                                this.stats.maxSignalEnergy = event.data.signalEnergy;
                            }
                            break;
                        case 'DATA':
                            this.handleAudio(event.data.frames);
                            break;
                    }
                };
            }
            else {
                if (this.debug) {
                    console.log('[SpeechlyClient]', 'can not use AudioWorkletNode');
                }
                // Safari, iOS Safari and Internet Explorer
                if (this.isWebkit) {
                    // Multiply base buffer size of 4 kB by the resample ratio rounded up to the next power of 2.
                    // i.e. for 48 kHz to 16 kHz downsampling, this will be 4096 (base) * 4 = 16384.
                    const bufSize = baseBufferSize * Math.pow(2, Math.ceil(Math.log(this.resampleRatio) / Math.log(2)));
                    this.audioProcessor = this.audioContext.createScriptProcessor(bufSize, 1, 1);
                }
                else {
                    this.audioProcessor = this.audioContext.createScriptProcessor(undefined, 1, 1);
                }
                this.audioContext.createMediaStreamSource(this.mediaStream).connect(this.audioProcessor);
                this.audioProcessor.connect(this.audioContext.destination);
                this.audioProcessor.addEventListener(audioProcessEvent, (event) => {
                    this.handleAudio(event.inputBuffer.getChannelData(0));
                });
            }
            this.initialized = true;
            this.mute();
        });
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            this.mute();
            if (!this.initialized) {
                throw ErrNotInitialized;
            }
            const t = this.audioTrack;
            t.enabled = false;
            // Stop all media tracks
            const stream = this.mediaStream;
            stream.getTracks().forEach(t => t.stop());
            // Disconnect and stop ScriptProcessorNode
            if (this.audioProcessor != null) {
                const proc = this.audioProcessor;
                proc.disconnect();
            }
            // Unset all audio infrastructure
            this.mediaStream = undefined;
            this.audioTrack = undefined;
            this.audioProcessor = undefined;
            this.initialized = false;
        });
    }
    mute() {
        this.muted = true;
    }
    unmute() {
        this.muted = false;
    }
    /**
     * print statistics to console
     */
    printStats() {
        if (this.audioTrack != null) {
            const settings = this.audioTrack.getSettings();
            console.log(this.audioTrack.label, this.audioTrack.readyState);
            // @ts-ignore
            console.log('channelCount', settings.channelCount);
            // @ts-ignore
            console.log('latency', settings.latency);
            // @ts-ignore
            console.log('autoGainControl', settings.autoGainControl);
        }
        console.log('maxSignalEnergy', this.stats.maxSignalEnergy);
    }
}

/**
 * Known WebSocket response types.
 * @public
 */
var WebsocketResponseType;
(function (WebsocketResponseType) {
    WebsocketResponseType["Opened"] = "WEBSOCKET_OPEN";
    WebsocketResponseType["SourceSampleRateSetSuccess"] = "SOURSE_SAMPLE_RATE_SET_SUCCESS";
    WebsocketResponseType["Started"] = "started";
    WebsocketResponseType["Stopped"] = "stopped";
    WebsocketResponseType["SegmentEnd"] = "segment_end";
    WebsocketResponseType["Transcript"] = "transcript";
    WebsocketResponseType["Entity"] = "entity";
    WebsocketResponseType["Intent"] = "intent";
    WebsocketResponseType["TentativeTranscript"] = "tentative_transcript";
    WebsocketResponseType["TentativeEntities"] = "tentative_entities";
    WebsocketResponseType["TentativeIntent"] = "tentative_intent";
})(WebsocketResponseType || (WebsocketResponseType = {}));

var worker = `/**
 * Known WebSocket response types.
 * @public
 */
var WebsocketResponseType;
(function (WebsocketResponseType) {
    WebsocketResponseType["Opened"] = "WEBSOCKET_OPEN";
    WebsocketResponseType["SourceSampleRateSetSuccess"] = "SOURSE_SAMPLE_RATE_SET_SUCCESS";
    WebsocketResponseType["Started"] = "started";
    WebsocketResponseType["Stopped"] = "stopped";
})(WebsocketResponseType || (WebsocketResponseType = {}));
var CONTROL = {
    WRITE_INDEX: 0,
    FRAMES_AVAILABLE: 1,
    LOCK: 2
};
var WebsocketClient = /** @class */ (function () {
    function WebsocketClient(ctx) {
        var _this = this;
        this.isContextStarted = false;
        this.isStartContextConfirmed = false;
        this.shouldResendLastFramesSent = false;
        this.buffer = new Float32Array(0);
        this.lastFramesSent = new Int16Array(0); // to re-send after switch context
        this.debug = false;
        this.initialized = false;
        this.onWebsocketClose = function (event) {
            _this.websocket = undefined;
            _this.connect(0);
        };
        this.onWebsocketOpen = function (_event) {
            if (_this.debug) {
                console.log('[SpeechlyClient]', 'websocket opened');
            }
            if (_this.isContextStarted && !_this.isStartContextConfirmed) {
                _this.send(_this.outbox);
            }
            _this.workerCtx.postMessage({ type: 'WEBSOCKET_OPEN' });
        };
        this.onWebsocketError = function (_event) {
            if (_this.debug) {
                console.log('[SpeechlyClient]', 'websocket error');
            }
            _this.closeWebsocket();
        };
        this.onWebsocketMessage = function (event) {
            var response;
            try {
                response = JSON.parse(event.data);
            }
            catch (e) {
                console.error('[SpeechlyClient] Error parsing response from the server:', e);
                return;
            }
            if (response.type === WebsocketResponseType.Started) {
                _this.isStartContextConfirmed = true;
                if (_this.shouldResendLastFramesSent) {
                    _this.resendLastFrames();
                    _this.shouldResendLastFramesSent = false;
                }
            }
            _this.workerCtx.postMessage(response);
        };
        this.workerCtx = ctx;
    }
    WebsocketClient.prototype.init = function (apiUrl, authToken, targetSampleRate, debug) {
        if (this.initialized) {
            console.log('[SpeechlyClient]', 'already initialized');
            return;
        }
        this.debug = debug;
        if (this.debug) {
            console.log('[SpeechlyClient]', 'initialize worker');
        }
        this.apiUrl = apiUrl;
        this.authToken = authToken;
        this.targetSampleRate = targetSampleRate;
        this.initialized = true;
        this.connect(0);
    };
    WebsocketClient.prototype.setSourceSampleRate = function (sourceSampleRate) {
        this.sourceSampleRate = sourceSampleRate;
        this.resampleRatio = this.sourceSampleRate / this.targetSampleRate;
        if (this.debug) {
            console.log('[SpeechlyClient]', 'resampleRatio', this.resampleRatio);
        }
        if (this.resampleRatio > 1) {
            this.filter = generateFilter(this.sourceSampleRate, this.targetSampleRate, 127);
        }
        this.workerCtx.postMessage({ type: 'SOURSE_SAMPLE_RATE_SET_SUCCESS' });
        if (isNaN(this.resampleRatio)) {
            throw Error("resampleRatio is NaN source rate is ".concat(this.sourceSampleRate, " and target rate is ").concat(this.targetSampleRate));
        }
    };
    WebsocketClient.prototype.setSharedArrayBuffers = function (controlSAB, dataSAB) {
        this.controlSAB = new Int32Array(controlSAB);
        this.dataSAB = new Float32Array(dataSAB);
        var audioHandleInterval = this.dataSAB.length / 32; // ms
        if (this.debug) {
            console.log('[SpeechlyClient]', 'Audio handle interval', audioHandleInterval, 'ms');
        }
        setInterval(this.sendAudioFromSAB.bind(this), audioHandleInterval);
    };
    WebsocketClient.prototype.connect = function (timeout) {
        if (timeout === void 0) { timeout = 1000; }
        if (this.debug) {
            console.log('[SpeechlyClient]', 'connect in ', timeout / 1000, 'sec');
        }
        setTimeout(this.initializeWebsocket.bind(this), timeout);
    };
    WebsocketClient.prototype.initializeWebsocket = function () {
        if (this.debug) {
            console.log('[SpeechlyClient]', 'connecting to ', this.apiUrl);
        }
        this.websocket = new WebSocket(this.apiUrl, this.authToken);
        this.websocket.addEventListener('open', this.onWebsocketOpen);
        this.websocket.addEventListener('message', this.onWebsocketMessage);
        this.websocket.addEventListener('error', this.onWebsocketError);
        this.websocket.addEventListener('close', this.onWebsocketClose);
    };
    WebsocketClient.prototype.isOpen = function () {
        return this.websocket !== undefined && this.websocket.readyState === this.websocket.OPEN;
    };
    WebsocketClient.prototype.resendLastFrames = function () {
        if (this.lastFramesSent.length > 0) {
            this.send(this.lastFramesSent);
            this.lastFramesSent = new Int16Array(0);
        }
    };
    WebsocketClient.prototype.sendAudio = function (audioChunk) {
        if (!this.isContextStarted) {
            return;
        }
        if (audioChunk.length > 0) {
            if (this.resampleRatio > 1) {
                // Downsampling
                this.send(this.downsample(audioChunk));
            }
            else {
                this.send(float32ToInt16(audioChunk));
            }
        }
    };
    WebsocketClient.prototype.sendAudioFromSAB = function () {
        if (!this.isContextStarted) {
            this.controlSAB[CONTROL.FRAMES_AVAILABLE] = 0;
            this.controlSAB[CONTROL.WRITE_INDEX] = 0;
            return;
        }
        if (this.controlSAB == undefined) {
            return;
        }
        var framesAvailable = this.controlSAB[CONTROL.FRAMES_AVAILABLE];
        var lock = this.controlSAB[CONTROL.LOCK];
        if (lock == 0 && framesAvailable > 0) {
            var data = this.dataSAB.subarray(0, framesAvailable);
            this.controlSAB[CONTROL.FRAMES_AVAILABLE] = 0;
            this.controlSAB[CONTROL.WRITE_INDEX] = 0;
            if (data.length > 0) {
                var frames_1;
                if (this.resampleRatio > 1) {
                    frames_1 = this.downsample(data);
                }
                else {
                    frames_1 = float32ToInt16(data);
                }
                this.send(frames_1);
                // 16000 per second, 1000 in 100 ms
                // save last 250 ms
                if (this.lastFramesSent.length > 1024 * 4) {
                    this.lastFramesSent = frames_1;
                }
                else {
                    var concat = new Int16Array(this.lastFramesSent.length + frames_1.length);
                    concat.set(this.lastFramesSent);
                    concat.set(frames_1, this.lastFramesSent.length);
                    this.lastFramesSent = concat;
                }
            }
        }
    };
    WebsocketClient.prototype.startContext = function (appId) {
        if (this.isContextStarted) {
            console.log('Cant start context: it has been already started');
            return;
        }
        this.isContextStarted = true;
        this.isStartContextConfirmed = false;
        if (appId !== undefined) {
            this.outbox = JSON.stringify({ event: 'start', appId: appId });
        }
        else {
            this.outbox = JSON.stringify({ event: 'start' });
        }
        this.send(this.outbox);
    };
    WebsocketClient.prototype.stopContext = function () {
        if (this.websocket == undefined) {
            throw Error('Cant start context: websocket is undefined');
        }
        if (!this.isContextStarted) {
            console.log('Cant stop context: it is not started');
            return;
        }
        this.isContextStarted = false;
        this.isStartContextConfirmed = false;
        var StopEventJSON = JSON.stringify({ event: 'stop' });
        this.send(StopEventJSON);
    };
    WebsocketClient.prototype.switchContext = function (newAppId) {
        if (this.websocket == undefined) {
            throw Error('Cant switch context: websocket is undefined');
        }
        if (!this.isContextStarted) {
            console.log('Cant switch context: it is not started');
            return;
        }
        if (newAppId == undefined) {
            console.log('Cant switch context: new app id is undefined');
            return;
        }
        this.isStartContextConfirmed = false;
        var StopEventJSON = JSON.stringify({ event: 'stop' });
        this.send(StopEventJSON);
        this.shouldResendLastFramesSent = true;
        this.send(JSON.stringify({ event: 'start', appId: newAppId }));
    };
    WebsocketClient.prototype.closeWebsocket = function () {
        if (this.websocket == null) {
            throw Error('Websocket is not open');
        }
        this.websocket.removeEventListener('open', this.onWebsocketOpen);
        this.websocket.removeEventListener('message', this.onWebsocketMessage);
        this.websocket.removeEventListener('error', this.onWebsocketError);
        this.websocket.removeEventListener('close', this.onWebsocketClose);
        this.websocket.close();
    };
    WebsocketClient.prototype.downsample = function (input) {
        var inputBuffer = new Float32Array(this.buffer.length + input.length);
        inputBuffer.set(this.buffer, 0);
        inputBuffer.set(input, this.buffer.length);
        var outputLength = Math.ceil((inputBuffer.length - this.filter.length) / this.resampleRatio);
        var outputBuffer = new Int16Array(outputLength);
        for (var i = 0; i < outputLength; i++) {
            var offset = Math.round(this.resampleRatio * i);
            var val = 0.0;
            for (var j = 0; j < this.filter.length; j++) {
                val += inputBuffer[offset + j] * this.filter[j];
            }
            outputBuffer[i] = val * (val < 0 ? 0x8000 : 0x7fff);
        }
        var remainingOffset = Math.round(this.resampleRatio * outputLength);
        if (remainingOffset < inputBuffer.length) {
            this.buffer = inputBuffer.subarray(remainingOffset);
        }
        else {
            this.buffer = new Float32Array(0);
        }
        return outputBuffer;
    };
    WebsocketClient.prototype.send = function (data) {
        if (!this.isOpen()) {
            throw Error('Cant send data: websocket is inactive');
        }
        try {
            this.websocket.send(data);
        }
        catch (error) {
            console.log('[SpeechlyClient]', 'Server connection error', error);
        }
    };
    return WebsocketClient;
}());
var ctx = self;
var websocketClient = new WebsocketClient(ctx);
ctx.onmessage = function (e) {
    switch (e.data.type) {
        case 'INIT':
            websocketClient.init(e.data.apiUrl, e.data.authToken, e.data.targetSampleRate, e.data.debug);
            break;
        case 'SET_SOURSE_SAMPLE_RATE':
            websocketClient.setSourceSampleRate(e.data.sourceSampleRate);
            break;
        case 'SET_SHARED_ARRAY_BUFFERS':
            websocketClient.setSharedArrayBuffers(e.data.controlSAB, e.data.dataSAB);
            break;
        case 'CLOSE':
            websocketClient.closeWebsocket();
            break;
        case 'START_CONTEXT':
            websocketClient.startContext(e.data.appId);
            break;
        case 'SWITCH_CONTEXT':
            websocketClient.switchContext(e.data.appId);
            break;
        case 'STOP_CONTEXT':
            websocketClient.stopContext();
            break;
        case 'AUDIO':
            websocketClient.sendAudio(e.data.payload);
            break;
        default:
            console.log('WORKER', e);
    }
};
function float32ToInt16(buffer) {
    var buf = new Int16Array(buffer.length);
    for (var l = 0; l < buffer.length; l++) {
        buf[l] = buffer[l] * (buffer[l] < 0 ? 0x8000 : 0x7fff);
    }
    return buf;
}
function generateFilter(sourceSampleRate, targetSampleRate, length) {
    if (length % 2 === 0) {
        throw Error('Filter length must be odd');
    }
    var cutoff = targetSampleRate / 2;
    var filter = new Float32Array(length);
    var sum = 0;
    for (var i = 0; i < length; i++) {
        var x = sinc(((2 * cutoff) / sourceSampleRate) * (i - (length - 1) / 2));
        sum += x;
        filter[i] = x;
    }
    for (var i = 0; i < length; i++) {
        filter[i] = filter[i] / sum;
    }
    return filter;
}
function sinc(x) {
    if (x === 0.0) {
        return 1.0;
    }
    var piX = Math.PI * x;
    return Math.sin(piX) / piX;
}
`;

class WebWorkerController {
    constructor() {
        this.startCbs = [];
        this.stopCbs = [];
        this.onResponseCb = () => { };
        this.onCloseCb = () => { };
        this.onWebsocketMessage = (event) => {
            const response = event.data;
            switch (response.type) {
                case WebsocketResponseType.Opened:
                    if (this.resolveInitialization != null) {
                        this.resolveInitialization();
                    }
                    break;
                case WebsocketResponseType.SourceSampleRateSetSuccess:
                    if (this.resolveSourceSampleRateSet != null) {
                        this.resolveSourceSampleRateSet();
                    }
                    break;
                case WebsocketResponseType.Started:
                    this.startCbs.forEach(cb => {
                        try {
                            cb(undefined, response.audio_context);
                        }
                        catch (e) {
                            console.error('[SpeechlyClient] Error while invoking "onStart" callback:', e);
                        }
                    });
                    this.startCbs.length = 0;
                    break;
                case WebsocketResponseType.Stopped:
                    this.stopCbs.forEach(cb => {
                        try {
                            cb(undefined, response.audio_context);
                        }
                        catch (e) {
                            console.error('[SpeechlyClient] Error while invoking "onStop" callback:', e);
                        }
                    });
                    this.stopCbs.length = 0;
                    break;
                default:
                    this.onResponseCb(response);
            }
        };
        const blob = new Blob([worker], { type: 'text/javascript' });
        const blobURL = window.URL.createObjectURL(blob);
        this.worker = new Worker(blobURL);
        this.worker.addEventListener('message', this.onWebsocketMessage);
    }
    onResponse(cb) {
        this.onResponseCb = cb;
    }
    onClose(cb) {
        this.onCloseCb = cb;
    }
    initialize(apiUrl, authToken, targetSampleRate, debug) {
        return __awaiter(this, void 0, void 0, function* () {
            this.worker.postMessage({
                type: 'INIT',
                apiUrl,
                authToken,
                targetSampleRate,
                debug,
            });
            return new Promise(resolve => {
                this.resolveInitialization = resolve;
            });
        });
    }
    setSourceSampleRate(sourceSampleRate) {
        return __awaiter(this, void 0, void 0, function* () {
            this.worker.postMessage({
                type: 'SET_SOURSE_SAMPLE_RATE',
                sourceSampleRate,
            });
            return new Promise(resolve => {
                this.resolveSourceSampleRateSet = resolve;
            });
        });
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                this.worker.postMessage({
                    type: 'CLOSE',
                    code: 1000,
                    message: 'Client has ended the session',
                });
                resolve();
            });
        });
    }
    startContext(appId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                this.startCbs.push((err, id) => {
                    if (err !== undefined) {
                        reject(err);
                    }
                    else {
                        resolve(id);
                    }
                });
                if (appId != null) {
                    this.worker.postMessage({ type: 'START_CONTEXT', appId });
                }
                else {
                    this.worker.postMessage({ type: 'START_CONTEXT' });
                }
            });
        });
    }
    stopContext() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                this.stopCbs.push((err, id) => {
                    if (err !== undefined) {
                        reject(err);
                    }
                    else {
                        resolve(id);
                    }
                });
                this.worker.postMessage({ type: 'STOP_CONTEXT' });
            });
        });
    }
    switchContext(appId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                this.startCbs.push((err, id) => {
                    if (err !== undefined) {
                        reject(err);
                    }
                    else {
                        resolve(id);
                    }
                });
                this.worker.postMessage({ type: 'SWITCH_CONTEXT', appId });
            });
        });
    }
    postMessage(message) {
        this.worker.postMessage(message);
    }
    sendAudio(audioChunk) {
        this.worker.postMessage({ type: 'AUDIO', payload: audioChunk });
    }
}

class LocalStorage {
    constructor() {
        this.storage = window.localStorage;
    }
    get(key) {
        const val = this.storage.getItem(key);
        return val;
    }
    set(key, val) {
        this.storage.setItem(key, val);
    }
    getOrSet(key, genFn) {
        let val = this.storage.getItem(key);
        if (val === null) {
            val = genFn();
            this.storage.setItem(key, val);
        }
        return val;
    }
}

/**
 * Error to be thrown if storage API is not supported by the device.
 * @public
 */
const ErrNoStorageSupport = new Error('Current device does not support storage API');
/**
 * Error to be thrown if requested key was not found in the storage.
 * @public
 */
const ErrKeyNotFound = new Error('Requested key was not present in storage');

class SegmentState {
    constructor(ctxId, sId) {
        this.isFinalized = false;
        this.words = [];
        this.entities = new Map();
        this.intent = { intent: '', isFinal: false };
        this.contextId = ctxId;
        this.id = sId;
    }
    toSegment() {
        let i = 0;
        const entities = new Array(this.entities.size);
        this.entities.forEach(v => {
            entities[i] = v;
            i++;
        });
        return {
            id: this.id,
            contextId: this.contextId,
            isFinal: this.isFinalized,
            words: this.words,
            entities: entities,
            intent: this.intent,
        };
    }
    toString() {
        const segment = this.toSegment();
        const words = segment.words.filter((w) => w.value).map((w) => ({ value: w.value, index: w.index }));
        const cleanSegment = Object.assign(Object.assign({}, segment), { words });
        return JSON.stringify(cleanSegment, null, 2);
    }
    updateTranscript(words) {
        words.forEach(w => {
            // Only accept tentative words if the segment is tentative.
            if (!this.isFinalized || w.isFinal) {
                this.words[w.index] = w;
            }
        });
        return this;
    }
    updateEntities(entities) {
        entities.forEach(e => {
            // Only accept tentative entities if the segment is tentative.
            if (!this.isFinalized || e.isFinal) {
                this.entities.set(entityMapKey(e), e);
            }
        });
        return this;
    }
    updateIntent(intent) {
        // Only accept tentative intent if the segment is tentative.
        if (!this.isFinalized || intent.isFinal) {
            this.intent = intent;
        }
        return this;
    }
    finalize() {
        // Filter away any entities which were not finalized.
        this.entities.forEach((val, key) => {
            if (!val.isFinal) {
                this.entities.delete(key);
            }
        });
        // Filter away any transcripts which were not finalized.
        this.words = this.words.filter(w => w.isFinal);
        if (!this.intent.isFinal) {
            this.intent.intent = '';
            this.intent.isFinal = true;
        }
        // Mark as final.
        this.isFinalized = true;
        return this;
    }
}
function entityMapKey(e) {
    return `${e.startPosition.toString()}:${e.endPosition.toString()}`;
}

function parseTentativeTranscript(data) {
    return data.words.map(({ word, index, start_timestamp, end_timestamp }) => {
        return {
            value: word,
            index: index,
            startTimestamp: start_timestamp,
            endTimestamp: end_timestamp,
            isFinal: false,
        };
    });
}
function parseTranscript(data) {
    return {
        value: data.word,
        index: data.index,
        startTimestamp: data.start_timestamp,
        endTimestamp: data.end_timestamp,
        isFinal: true,
    };
}
function parseTentativeEntities(data) {
    return data.entities.map(({ entity, value, start_position, end_position }) => {
        return {
            type: entity,
            value: value,
            startPosition: start_position,
            endPosition: end_position,
            isFinal: false,
        };
    });
}
function parseEntity(data) {
    return {
        type: data.entity,
        value: data.value,
        startPosition: data.start_position,
        endPosition: data.end_position,
        isFinal: true,
    };
}
function parseIntent(data, isFinal) {
    return {
        intent: data.intent,
        isFinal: isFinal,
    };
}

const deviceIdStorageKey = 'speechly-device-id';
const authTokenKey = 'speechly-auth-token';
const defaultApiUrl = 'wss://api.speechly.com/ws/v1';
const defaultLoginUrl = 'https://api.speechly.com/login';
const defaultLanguage = 'en-US';
/**
 * A client for Speechly Spoken Language Understanding (SLU) API. The client handles initializing the microphone
 * and websocket connection to Speechly API, passing control events and audio stream to the API, reading the responses
 * and dispatching them, as well as providing a high-level API for interacting with so-called speech segments.
 * @public
 */
class Client {
    constructor(options) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        this.activeContexts = new Map();
        this.reconnectAttemptCount = 5;
        this.reconnectMinDelay = 1000;
        this.contextStopDelay = 250;
        this.state = ClientState.Disconnected;
        this.stateChangeCb = () => { };
        this.segmentChangeCb = () => { };
        this.tentativeTranscriptCb = () => { };
        this.tentativeEntitiesCb = () => { };
        this.tentativeIntentCb = () => { };
        this.transcriptCb = () => { };
        this.entityCb = () => { };
        this.intentCb = () => { };
        this.handleWebsocketResponse = (response) => {
            var _a;
            if (this.debug) {
                console.log('[SpeechlyClient]', 'Received response', response);
            }
            const { audio_context, segment_id, type } = response;
            let { data } = response;
            const context = this.activeContexts.get(audio_context);
            if (context === undefined) {
                console.warn('[SpeechlyClient]', 'Received response for non-existent context', audio_context);
                return;
            }
            let segmentState = (_a = context.get(segment_id)) !== null && _a !== void 0 ? _a : new SegmentState(audio_context, segment_id);
            switch (type) {
                case WebsocketResponseType.TentativeTranscript:
                    data = data;
                    const words = parseTentativeTranscript(data);
                    this.tentativeTranscriptCb(audio_context, segment_id, words, data.transcript);
                    segmentState = segmentState.updateTranscript(words);
                    break;
                case WebsocketResponseType.Transcript:
                    data = data;
                    const word = parseTranscript(data);
                    this.transcriptCb(audio_context, segment_id, word);
                    segmentState = segmentState.updateTranscript([word]);
                    break;
                case WebsocketResponseType.TentativeEntities:
                    data = data;
                    const entities = parseTentativeEntities(data);
                    this.tentativeEntitiesCb(audio_context, segment_id, entities);
                    segmentState = segmentState.updateEntities(entities);
                    break;
                case WebsocketResponseType.Entity:
                    data = data;
                    const entity = parseEntity(data);
                    this.entityCb(audio_context, segment_id, entity);
                    segmentState = segmentState.updateEntities([entity]);
                    break;
                case WebsocketResponseType.TentativeIntent:
                    data = data;
                    const tentativeIntent = parseIntent(data, false);
                    this.tentativeIntentCb(audio_context, segment_id, tentativeIntent);
                    segmentState = segmentState.updateIntent(tentativeIntent);
                    break;
                case WebsocketResponseType.Intent:
                    data = data;
                    const intent = parseIntent(data, true);
                    this.intentCb(audio_context, segment_id, intent);
                    segmentState = segmentState.updateIntent(intent);
                    break;
                case WebsocketResponseType.SegmentEnd:
                    segmentState = segmentState.finalize();
                    break;
                // TODO: handle unexpected response types.
            }
            // Update the segment in current context.
            context.set(segment_id, segmentState);
            // Update current contexts.
            this.activeContexts.set(audio_context, context);
            // Log segment to console
            if (this.logSegments) {
                console.info(segmentState.toString());
            }
            // Fire segment change event.
            this.segmentChangeCb(segmentState.toSegment());
        };
        this.handleWebsocketClosure = (err) => {
            if (this.debug) {
                console.error('[SpeechlyClient]', 'Server connection closed', err);
            }
            // If for some reason deviceId is missing, there's nothing else we can do but fail completely.
            if (this.deviceId === undefined) {
                this.setState(ClientState.Failed);
                return;
            }
            // Make sure we don't have concurrent reconnection procedures or attempt to reconnect from a failed state.
            if (this.state === ClientState.Connecting || this.state === ClientState.Failed) {
                return;
            }
            this.setState(ClientState.Connecting);
        };
        this.sampleRate = (_a = options.sampleRate) !== null && _a !== void 0 ? _a : DefaultSampleRate;
        try {
            const constraints = window.navigator.mediaDevices.getSupportedConstraints();
            this.nativeResamplingSupported = constraints.sampleRate === true;
            if (options.autoGainControl != null && options.autoGainControl) {
                // @ts-ignore
                this.autoGainControl = constraints.autoGainControl === true;
            }
            else {
                this.autoGainControl = false;
            }
        }
        catch (_o) {
            this.nativeResamplingSupported = false;
            this.autoGainControl = false;
        }
        const language = (_b = options.language) !== null && _b !== void 0 ? _b : defaultLanguage;
        if (!(LocaleCode.validate(language) || (LocaleCode.validateLanguageCode(`${language.substring(0, 2)}-XX`) && /^..-\d\d\d$/.test(language)))) {
            throw Error(`[SpeechlyClient] Invalid language "${language}"`);
        }
        this.debug = (_c = options.debug) !== null && _c !== void 0 ? _c : false;
        this.logSegments = (_d = options.logSegments) !== null && _d !== void 0 ? _d : false;
        this.loginUrl = (_e = options.loginUrl) !== null && _e !== void 0 ? _e : defaultLoginUrl;
        this.appId = (_f = options.appId) !== null && _f !== void 0 ? _f : undefined;
        this.projectId = (_g = options.projectId) !== null && _g !== void 0 ? _g : undefined;
        const apiUrl = generateWsUrl((_h = options.apiUrl) !== null && _h !== void 0 ? _h : defaultApiUrl, language, (_j = options.sampleRate) !== null && _j !== void 0 ? _j : DefaultSampleRate);
        this.apiClient = (_k = options.apiClient) !== null && _k !== void 0 ? _k : new WebWorkerController();
        if (this.appId !== undefined && this.projectId !== undefined) {
            throw Error('[SpeechlyClient] You cannot use both appId and projectId at the same time');
        }
        this.storage = (_l = options.storage) !== null && _l !== void 0 ? _l : new LocalStorage();
        this.deviceId = this.storage.getOrSet(deviceIdStorageKey, v4);
        const storedToken = this.storage.get(authTokenKey);
        // 2. Fetch auth token. It doesn't matter if it's not present.
        this.initializeApiClientPromise = new Promise(resolve => {
            this.resolveInitialization = resolve;
        });
        if (storedToken == null || !validateToken(storedToken, this.projectId, this.appId, this.deviceId)) {
            fetchToken(this.loginUrl, this.projectId, this.appId, this.deviceId)
                .then(token => {
                this.authToken = token;
                // Cache the auth token in local storage for future use.
                this.storage.set(authTokenKey, this.authToken);
                this.connect(apiUrl);
            })
                .catch(err => {
                this.setState(ClientState.Failed);
                throw err;
            });
        }
        else {
            this.authToken = storedToken;
            this.connect(apiUrl);
        }
        if (window.AudioContext !== undefined) {
            this.isWebkit = false;
        }
        else if (window.webkitAudioContext !== undefined) {
            this.isWebkit = true;
        }
        else {
            throw ErrDeviceNotSupported;
        }
        this.microphone = (_m = options.microphone) !== null && _m !== void 0 ? _m : new BrowserMicrophone(this.isWebkit, this.sampleRate, this.apiClient, this.debug);
        this.apiClient.onResponse(this.handleWebsocketResponse);
        this.apiClient.onClose(this.handleWebsocketClosure);
        window.SpeechlyClient = this;
    }
    /**
     * Esteblish websocket connection
     */
    connect(apiUrl) {
        if (this.authToken != null) {
            this.apiClient.initialize(apiUrl, this.authToken, this.sampleRate, this.debug).then(() => {
                if (this.resolveInitialization != null) {
                    this.resolveInitialization();
                }
            }).catch(err => {
                throw err;
            });
        }
    }
    /**
     * Initializes the client, by initializing the microphone and establishing connection to the API.
     *
     * This function HAS to be invoked by a user by e.g. binding it to a button press,
     * or some other user-performed action.
     *
     * If this function is invoked without a user interaction,
     * the microphone functionality will not work due to security restrictions by the browser.
     */
    initialize() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.initializeApiClientPromise;
            if (this.state !== ClientState.Disconnected) {
                throw Error('Cannot initialize client - client is not in Disconnected state');
            }
            this.setState(ClientState.Connecting);
            try {
                // 1. Initialise the storage and fetch deviceId (or generate new one and store it).
                // await this.storage.initialize()
                // this.deviceId = await this.storage.getOrSet(deviceIdStorageKey, uuidv4)
                // 2. Initialise the microphone stack.
                if (this.isWebkit) {
                    if (window.webkitAudioContext !== undefined) {
                        // eslint-disable-next-line new-cap
                        this.audioContext = new window.webkitAudioContext();
                    }
                }
                else {
                    const opts = {};
                    if (this.nativeResamplingSupported) {
                        opts.sampleRate = this.sampleRate;
                    }
                    this.audioContext = new window.AudioContext(opts);
                }
                const mediaStreamConstraints = {
                    video: false,
                };
                if (this.nativeResamplingSupported || this.autoGainControl) {
                    mediaStreamConstraints.audio = {
                        sampleRate: this.sampleRate,
                        // @ts-ignore
                        autoGainControl: this.autoGainControl,
                    };
                }
                else {
                    mediaStreamConstraints.audio = true;
                }
                if (this.audioContext != null) {
                    // Start audio context if we are dealing with a WebKit browser.
                    //
                    // WebKit browsers (e.g. Safari) require to resume the context first,
                    // before obtaining user media by calling `mediaDevices.getUserMedia`.
                    //
                    // If done in a different order, the audio context will resume successfully,
                    // but will emit empty audio buffers.
                    if (this.isWebkit) {
                        yield this.audioContext.resume();
                    }
                    // 3. Initialise websocket.
                    yield this.apiClient.setSourceSampleRate(this.audioContext.sampleRate);
                    this.initializeMicrophonePromise = this.microphone.initialize(this.audioContext, mediaStreamConstraints);
                    yield this.initializeMicrophonePromise;
                }
                else {
                    throw ErrDeviceNotSupported;
                }
            }
            catch (err) {
                switch (err) {
                    case ErrDeviceNotSupported:
                        this.setState(ClientState.NoBrowserSupport);
                        break;
                    case ErrNoAudioConsent:
                        this.setState(ClientState.NoAudioConsent);
                        break;
                    default:
                        this.setState(ClientState.Failed);
                }
                throw err;
            }
            this.setState(ClientState.Connected);
        });
    }
    /**
     * Closes the client by closing the API connection and disabling the microphone.
     */
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            const errs = [];
            try {
                yield this.microphone.close();
            }
            catch (err) {
                // @ts-ignore
                errs.push(err.message);
            }
            try {
                yield this.apiClient.close();
            }
            catch (err) {
                // @ts-ignore
                errs.push(err.message);
            }
            this.activeContexts.clear();
            this.setState(ClientState.Disconnected);
            if (errs.length > 0) {
                throw Error(errs.join(','));
            }
        });
    }
    /**
     * Stops current context and immediately starts a new SLU context
     * by sending a start context event to the API and unmuting the microphone.
     * @param appId - unique identifier of an app in the dashboard.
     */
    switchContext(appId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.state === ClientState.Recording) {
                this.resolveStopContext = undefined;
                const contextId = yield this.apiClient.switchContext(appId);
                this.activeContexts.set(contextId, new Map());
            }
        });
    }
    /**
     * Starts a new SLU context by sending a start context event to the API and unmuting the microphone.
     * @param cb - the callback which is invoked when the context start was acknowledged by the API.
     */
    startContext(appId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.resolveStopContext != null) {
                this.resolveStopContext();
                yield this.stoppedContextIdPromise;
            }
            if (this.state === ClientState.Disconnected || this.state === ClientState.Connecting) {
                throw Error('Cannot start context - client is not connected');
            }
            this.setState(ClientState.Starting);
            const contextId = yield this._startContext(appId);
            return contextId;
        });
    }
    _startContext(appId) {
        return __awaiter(this, void 0, void 0, function* () {
            let contextId;
            try {
                if (this.projectId != null) {
                    contextId = yield this.apiClient.startContext(appId);
                }
                else {
                    if (appId != null && this.appId !== appId) {
                        throw ErrAppIdChangeWithoutProjectLogin;
                    }
                    contextId = yield this.apiClient.startContext();
                }
            }
            catch (err) {
                switch (err) {
                    case ErrAppIdChangeWithoutProjectLogin:
                        this.setState(ClientState.Failed);
                        break;
                    default:
                        this.setState(ClientState.Connected);
                }
                throw err;
            }
            this.setState(ClientState.Recording);
            this.microphone.unmute();
            this.activeContexts.set(contextId, new Map());
            return contextId;
        });
    }
    /**
     * Stops current SLU context by sending a stop context event to the API and muting the microphone
     * delayed by contextStopDelay = 250 ms
     */
    stopContext() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.state !== ClientState.Recording && this.state !== ClientState.Starting) {
                throw Error('Cannot stop context - client is not recording');
            }
            this.setState(ClientState.Stopping);
            this.stoppedContextIdPromise = new Promise(resolve => {
                Promise.race([
                    new Promise(resolve => setTimeout(resolve, this.contextStopDelay)),
                    new Promise(resolve => {
                        this.resolveStopContext = resolve;
                    }),
                ])
                    .then(() => {
                    this._stopContext()
                        .then(id => {
                        resolve(id);
                    })
                        .catch(err => {
                        throw err;
                    });
                })
                    .catch(err => {
                    throw err;
                });
            });
            const contextId = yield this.stoppedContextIdPromise;
            this.setState(ClientState.Connected);
            this.activeContexts.delete(contextId);
            return contextId;
        });
    }
    _stopContext() {
        return __awaiter(this, void 0, void 0, function* () {
            this.microphone.mute();
            let contextId;
            try {
                contextId = yield this.apiClient.stopContext();
            }
            catch (err) {
                this.setState(ClientState.Failed);
                throw err;
            }
            return contextId;
        });
    }
    /**
     * Adds a listener for client state change events.
     * @param cb - the callback to invoke on state change events.
     */
    onStateChange(cb) {
        this.stateChangeCb = cb;
    }
    /**
     * Adds a listener for current segment change events.
     * @param cb - the callback to invoke on segment change events.
     */
    onSegmentChange(cb) {
        this.segmentChangeCb = cb;
    }
    /**
     * Adds a listener for tentative transcript responses from the API.
     * @param cb - the callback to invoke on a tentative transcript response.
     */
    onTentativeTranscript(cb) {
        this.tentativeTranscriptCb = cb;
    }
    /**
     * Adds a listener for transcript responses from the API.
     * @param cb - the callback to invoke on a transcript response.
     */
    onTranscript(cb) {
        this.transcriptCb = cb;
    }
    /**
     * Adds a listener for tentative entities responses from the API.
     * @param cb - the callback to invoke on a tentative entities response.
     */
    onTentativeEntities(cb) {
        this.tentativeEntitiesCb = cb;
    }
    /**
     * Adds a listener for entity responses from the API.
     * @param cb - the callback to invoke on an entity response.
     */
    onEntity(cb) {
        this.entityCb = cb;
    }
    /**
     * Adds a listener for tentative intent responses from the API.
     * @param cb - the callback to invoke on a tentative intent response.
     */
    onTentativeIntent(cb) {
        this.tentativeIntentCb = cb;
    }
    /**
     * Adds a listener for intent responses from the API.
     * @param cb - the callback to invoke on an intent response.
     */
    onIntent(cb) {
        this.intentCb = cb;
    }
    setState(newState) {
        if (this.state === newState) {
            return;
        }
        if (this.debug) {
            console.log('[SpeechlyClient]', 'State transition', stateToString(this.state), stateToString(newState));
        }
        this.state = newState;
        this.stateChangeCb(newState);
    }
    /**
     * print statistics to console
     */
    printStats() {
        this.microphone.printStats();
    }
}
function generateWsUrl(baseUrl, languageCode, sampleRate) {
    const params = new URLSearchParams();
    params.append('languageCode', languageCode);
    params.append('sampleRate', sampleRate.toString());
    return `${baseUrl}?${params.toString()}`;
}

export { Client, ClientState, DefaultSampleRate, ErrAlreadyInitialized, ErrAppIdChangeWithoutProjectLogin, ErrDeviceNotSupported, ErrKeyNotFound, ErrNoAudioConsent, ErrNoStorageSupport, ErrNotInitialized, WebsocketResponseType, stateToString };
//# sourceMappingURL=speechly.es.js.map
