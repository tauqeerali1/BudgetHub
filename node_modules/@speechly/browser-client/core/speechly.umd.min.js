!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).Speechly={})}(this,(function(e){"use strict";var t;function n(e){var t;return null!==(t=i.get(e))&&void 0!==t?t:a}e.ClientState=void 0,(t=e.ClientState||(e.ClientState={}))[t.Failed=0]="Failed",t[t.NoBrowserSupport=1]="NoBrowserSupport",t[t.NoAudioConsent=2]="NoAudioConsent",t[t.Disconnected=3]="Disconnected",t[t.Disconnecting=4]="Disconnecting",t[t.Connecting=5]="Connecting",t[t.Connected=6]="Connected",t[t.Starting=7]="Starting",t[t.Stopping=8]="Stopping",t[t.Recording=9]="Recording";const a="Unknown",i=new Map([[e.ClientState.Failed,"Failed"],[e.ClientState.NoBrowserSupport,"NoBrowserSupport"],[e.ClientState.NoAudioConsent,"NoAudioConsent"],[e.ClientState.Disconnecting,"Disconnecting"],[e.ClientState.Disconnected,"Disconnected"],[e.ClientState.Connecting,"Connecting"],[e.ClientState.Connected,"Connected"],[e.ClientState.Starting,"Starting"],[e.ClientState.Stopping,"Stopping"],[e.ClientState.Recording,"Recording"]]);
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
function o(e,t,n,a){return new(n||(n=Promise))((function(i,o){function s(e){try{l(a.next(e))}catch(e){o(e)}}function r(e){try{l(a.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,r)}l((a=a.apply(e,t||[])).next())}))}const s={aa:{name:"Afar",nativeName:"Afaraf"},ab:{name:"Abkhaz",nativeName:"аҧсуа бызшәа"},ae:{name:"Avestan",nativeName:"avesta"},af:{name:"Afrikaans",nativeName:"Afrikaans"},ak:{name:"Akan",nativeName:"Akan"},am:{name:"Amharic",nativeName:"አማርኛ"},an:{name:"Aragonese",nativeName:"aragonés"},ar:{name:"Arabic",nativeName:"اللغة العربية"},as:{name:"Assamese",nativeName:"অসমীয়া"},av:{name:"Avaric",nativeName:"авар мацӀ"},ay:{name:"Aymara",nativeName:"aymar aru"},az:{name:"Azerbaijani",nativeName:"azərbaycan dili"},ba:{name:"Bashkir",nativeName:"башҡорт теле"},be:{name:"Belarusian",nativeName:"беларуская мова"},bg:{name:"Bulgarian",nativeName:"български език"},bh:{name:"Bihari",nativeName:"भोजपुरी"},bi:{name:"Bislama",nativeName:"Bislama"},bm:{name:"Bambara",nativeName:"bamanankan"},bn:{name:"Bengali",nativeName:"বাংলা"},bo:{name:"Tibetan",nativeName:"བོད་ཡིག"},br:{name:"Breton",nativeName:"brezhoneg"},bs:{name:"Bosnian",nativeName:"bosanski jezik"},ca:{name:"Catalan",nativeName:"Català"},ce:{name:"Chechen",nativeName:"нохчийн мотт"},ch:{name:"Chamorro",nativeName:"Chamoru"},co:{name:"Corsican",nativeName:"corsu"},cr:{name:"Cree",nativeName:"ᓀᐦᐃᔭᐍᐏᐣ"},cs:{name:"Czech",nativeName:"čeština"},cu:{name:"Old Church Slavonic",nativeName:"ѩзыкъ словѣньскъ"},cv:{name:"Chuvash",nativeName:"чӑваш чӗлхи"},cy:{name:"Welsh",nativeName:"Cymraeg"},da:{name:"Danish",nativeName:"dansk"},de:{name:"German",nativeName:"Deutsch"},dv:{name:"Divehi",nativeName:"Dhivehi"},dz:{name:"Dzongkha",nativeName:"རྫོང་ཁ"},ee:{name:"Ewe",nativeName:"Eʋegbe"},el:{name:"Greek",nativeName:"Ελληνικά"},en:{name:"English",nativeName:"English"},eo:{name:"Esperanto",nativeName:"Esperanto"},es:{name:"Spanish",nativeName:"Español"},et:{name:"Estonian",nativeName:"eesti"},eu:{name:"Basque",nativeName:"euskara"},fa:{name:"Persian",nativeName:"فارسی"},ff:{name:"Fula",nativeName:"Fulfulde"},fi:{name:"Finnish",nativeName:"suomi"},fj:{name:"Fijian",nativeName:"Vakaviti"},fo:{name:"Faroese",nativeName:"føroyskt"},fr:{name:"French",nativeName:"Français"},fy:{name:"Western Frisian",nativeName:"Frysk"},ga:{name:"Irish",nativeName:"Gaeilge"},gd:{name:"Scottish Gaelic",nativeName:"Gàidhlig"},gl:{name:"Galician",nativeName:"galego"},gn:{name:"Guaraní",nativeName:"Avañe'ẽ"},gu:{name:"Gujarati",nativeName:"ગુજરાતી"},gv:{name:"Manx",nativeName:"Gaelg"},ha:{name:"Hausa",nativeName:"هَوُسَ"},he:{name:"Hebrew",nativeName:"עברית"},hi:{name:"Hindi",nativeName:"हिन्दी"},ho:{name:"Hiri Motu",nativeName:"Hiri Motu"},hr:{name:"Croatian",nativeName:"Hrvatski"},ht:{name:"Haitian",nativeName:"Kreyòl ayisyen"},hu:{name:"Hungarian",nativeName:"magyar"},hy:{name:"Armenian",nativeName:"Հայերեն"},hz:{name:"Herero",nativeName:"Otjiherero"},ia:{name:"Interlingua",nativeName:"Interlingua"},id:{name:"Indonesian",nativeName:"Bahasa Indonesia"},ie:{name:"Interlingue",nativeName:"Interlingue"},ig:{name:"Igbo",nativeName:"Asụsụ Igbo"},ii:{name:"Nuosu",nativeName:"ꆈꌠ꒿ Nuosuhxop"},ik:{name:"Inupiaq",nativeName:"Iñupiaq"},io:{name:"Ido",nativeName:"Ido"},is:{name:"Icelandic",nativeName:"Íslenska"},it:{name:"Italian",nativeName:"Italiano"},iu:{name:"Inuktitut",nativeName:"ᐃᓄᒃᑎᑐᑦ"},ja:{name:"Japanese",nativeName:"日本語"},jv:{name:"Javanese",nativeName:"basa Jawa"},ka:{name:"Georgian",nativeName:"ქართული"},kg:{name:"Kongo",nativeName:"Kikongo"},ki:{name:"Kikuyu",nativeName:"Gĩkũyũ"},kj:{name:"Kwanyama",nativeName:"Kuanyama"},kk:{name:"Kazakh",nativeName:"қазақ тілі"},kl:{name:"Kalaallisut",nativeName:"kalaallisut"},km:{name:"Khmer",nativeName:"ខេមរភាសា"},kn:{name:"Kannada",nativeName:"ಕನ್ನಡ"},ko:{name:"Korean",nativeName:"한국어"},kr:{name:"Kanuri",nativeName:"Kanuri"},ks:{name:"Kashmiri",nativeName:"कश्मीरी"},ku:{name:"Kurdish",nativeName:"Kurdî"},kv:{name:"Komi",nativeName:"коми кыв"},kw:{name:"Cornish",nativeName:"Kernewek"},ky:{name:"Kyrgyz",nativeName:"Кыргызча"},la:{name:"Latin",nativeName:"latine"},lb:{name:"Luxembourgish",nativeName:"Lëtzebuergesch"},lg:{name:"Ganda",nativeName:"Luganda"},li:{name:"Limburgish",nativeName:"Limburgs"},ln:{name:"Lingala",nativeName:"Lingála"},lo:{name:"Lao",nativeName:"ພາສາ"},lt:{name:"Lithuanian",nativeName:"lietuvių kalba"},lu:{name:"Luba-Katanga",nativeName:"Tshiluba"},lv:{name:"Latvian",nativeName:"latviešu valoda"},mg:{name:"Malagasy",nativeName:"fiteny malagasy"},mh:{name:"Marshallese",nativeName:"Kajin M̧ajeļ"},mi:{name:"Māori",nativeName:"te reo Māori"},mk:{name:"Macedonian",nativeName:"македонски јазик"},ml:{name:"Malayalam",nativeName:"മലയാളം"},mn:{name:"Mongolian",nativeName:"Монгол хэл"},mr:{name:"Marathi",nativeName:"मराठी"},ms:{name:"Malay",nativeName:"Bahasa Malaysia"},mt:{name:"Maltese",nativeName:"Malti"},my:{name:"Burmese",nativeName:"ဗမာစာ"},na:{name:"Nauru",nativeName:"Ekakairũ Naoero"},nb:{name:"Norwegian Bokmål",nativeName:"Norsk bokmål"},nd:{name:"Northern Ndebele",nativeName:"isiNdebele"},ne:{name:"Nepali",nativeName:"नेपाली"},ng:{name:"Ndonga",nativeName:"Owambo"},nl:{name:"Dutch",nativeName:"Nederlands"},nn:{name:"Norwegian Nynorsk",nativeName:"Norsk nynorsk"},no:{name:"Norwegian",nativeName:"Norsk"},nr:{name:"Southern Ndebele",nativeName:"isiNdebele"},nv:{name:"Navajo",nativeName:"Diné bizaad"},ny:{name:"Chichewa",nativeName:"chiCheŵa"},oc:{name:"Occitan",nativeName:"occitan"},oj:{name:"Ojibwe",nativeName:"ᐊᓂᔑᓈᐯᒧᐎᓐ"},om:{name:"Oromo",nativeName:"Afaan Oromoo"},or:{name:"Oriya",nativeName:"ଓଡ଼ିଆ"},os:{name:"Ossetian",nativeName:"ирон æвзаг"},pa:{name:"Panjabi",nativeName:"ਪੰਜਾਬੀ"},pi:{name:"Pāli",nativeName:"पाऴि"},pl:{name:"Polish",nativeName:"Polski"},ps:{name:"Pashto",nativeName:"پښتو"},pt:{name:"Portuguese",nativeName:"Português"},qu:{name:"Quechua",nativeName:"Runa Simi"},rm:{name:"Romansh",nativeName:"rumantsch grischun"},rn:{name:"Kirundi",nativeName:"Ikirundi"},ro:{name:"Romanian",nativeName:"Română"},ru:{name:"Russian",nativeName:"Русский"},rw:{name:"Kinyarwanda",nativeName:"Ikinyarwanda"},sa:{name:"Sanskrit",nativeName:"संस्कृतम्"},sc:{name:"Sardinian",nativeName:"sardu"},sd:{name:"Sindhi",nativeName:"सिन्धी"},se:{name:"Northern Sami",nativeName:"Davvisámegiella"},sg:{name:"Sango",nativeName:"yângâ tî sängö"},si:{name:"Sinhala",nativeName:"සිංහල"},sk:{name:"Slovak",nativeName:"slovenčina"},sl:{name:"Slovenian",nativeName:"slovenski jezik"},sm:{name:"Samoan",nativeName:"gagana fa'a Samoa"},sn:{name:"Shona",nativeName:"chiShona"},so:{name:"Somali",nativeName:"Soomaaliga"},sq:{name:"Albanian",nativeName:"Shqip"},sr:{name:"Serbian",nativeName:"српски језик"},ss:{name:"Swati",nativeName:"SiSwati"},st:{name:"Southern Sotho",nativeName:"Sesotho"},su:{name:"Sundanese",nativeName:"Basa Sunda"},sv:{name:"Swedish",nativeName:"Svenska"},sw:{name:"Swahili",nativeName:"Kiswahili"},ta:{name:"Tamil",nativeName:"தமிழ்"},te:{name:"Telugu",nativeName:"తెలుగు"},tg:{name:"Tajik",nativeName:"тоҷикӣ"},th:{name:"Thai",nativeName:"ไทย"},ti:{name:"Tigrinya",nativeName:"ትግርኛ"},tk:{name:"Turkmen",nativeName:"Türkmen"},tl:{name:"Tagalog",nativeName:"Wikang Tagalog"},tn:{name:"Tswana",nativeName:"Setswana"},to:{name:"Tonga",nativeName:"faka Tonga"},tr:{name:"Turkish",nativeName:"Türkçe"},ts:{name:"Tsonga",nativeName:"Xitsonga"},tt:{name:"Tatar",nativeName:"татар теле"},tw:{name:"Twi",nativeName:"Twi"},ty:{name:"Tahitian",nativeName:"Reo Tahiti"},ug:{name:"Uyghur",nativeName:"ئۇيغۇرچە‎"},uk:{name:"Ukrainian",nativeName:"Українська"},ur:{name:"Urdu",nativeName:"اردو"},uz:{name:"Uzbek",nativeName:"Ўзбек"},ve:{name:"Venda",nativeName:"Tshivenḓa"},vi:{name:"Vietnamese",nativeName:"Tiếng Việt"},vo:{name:"Volapük",nativeName:"Volapük"},wa:{name:"Walloon",nativeName:"walon"},wo:{name:"Wolof",nativeName:"Wollof"},xh:{name:"Xhosa",nativeName:"isiXhosa"},yi:{name:"Yiddish",nativeName:"ייִדיש"},yo:{name:"Yoruba",nativeName:"Yorùbá"},za:{name:"Zhuang",nativeName:"Saɯ cueŋƅ"},zh:{name:"Chinese",nativeName:"中文"},zu:{name:"Zulu",nativeName:"isiZulu"}};class r{static getLanguages(e=[]){return e.map((e=>({code:e,name:r.getName(e),nativeName:r.getNativeName(e)})))}static getName(e){return r.validate(e)?s[e].name:""}static getAllNames(){return Object.values(s).map((e=>e.name))}static getNativeName(e){return r.validate(e)?s[e].nativeName:""}static getAllNativeNames(){return Object.values(s).map((e=>e.nativeName))}static getCode(e){return Object.keys(s).find((t=>{const n=s[t];return n.name.toLowerCase()===e.toLowerCase()||n.nativeName.toLowerCase()===e.toLowerCase()}))||""}static getAllCodes(){return Object.keys(s)}static validate(e){return s.hasOwnProperty(e)}}const l={aa:"阿法尔语",ab:"阿布哈兹语",ae:"阿维斯陀语",af:"南非荷兰语",ak:"阿坎语",am:"阿姆哈拉语",an:"阿拉贡语",ar:"阿拉伯语",as:"阿萨姆语",av:"阿瓦尔语",ay:"艾马拉语",az:"阿塞拜疆语",ba:"巴什基尔语",be:"白俄罗斯语",bg:"保加利亚语",bh:"比哈尔语",bi:"比斯拉马语",bm:"班巴拉语",bn:"孟加拉语",bo:"藏语",br:"布列塔尼语",bs:"波斯尼亚语",ca:"加泰罗尼亚语",ce:"车臣语",ch:"查莫洛语",co:"科西嘉语",cr:"克里语",cs:"捷克语",cu:"古教会斯拉夫语",cv:"楚瓦什语",cy:"威尔士语",da:"丹麦语",de:"德语",dv:"迪维希语",dz:"不丹语",ee:"埃维语",el:"希腊语",en:"英语",eo:"世界语",es:"西班牙语",et:"爱沙尼亚语",eu:"巴斯克语",fa:"波斯语",ff:"富拉语",fi:"芬兰语",fj:"斐济语",fo:"法罗语",fr:"法语",fy:"西弗里西亚语",ga:"爱尔兰语",gd:"苏格兰盖尔语",gl:"加利西亚语",gn:"瓜拉尼语",gu:"古吉拉特语",gv:"马恩岛语",ha:"豪萨语",he:"希伯来语",hi:"印地语",ho:"莫图语",hr:"克罗地亚语",ht:"海地文",hu:"匈牙利语",hy:"亚美尼亚语",hz:"赫勒娄语",ia:"国际语",id:"印尼语",ie:"国际语",ig:"伊博语",ii:"诺苏语",ik:"依奴皮维克文",io:"伊多文",is:"冰岛语",it:"意大利语",iu:"因纽特语",ja:"日语",jv:"爪哇语",ka:"格鲁吉亚语",kg:"刚果语",ki:"基库尤语",kj:"宽亚马语",kk:"哈萨克语",kl:"格陵兰语",km:"高棉语",kn:"卡纳达语",ko:"韩语",kr:"卡努里语",ks:"克什米尔语",ku:"库尔德语",kv:"科米语",kw:"科尼什语",ky:"吉尔吉斯语",la:"拉丁语",lb:"卢森堡语",lg:"甘达语",li:"林堡语",ln:"林加拉语",lo:"老挝语",lt:"立陶宛语",lu:"卢巴加丹加语",lv:"拉脱维亚语",mg:"马尔加什语",mh:"马绍尔语",mi:"毛利语",mk:"马其顿语",ml:"马拉雅拉姆语",mn:"蒙古文",mr:"马拉地语",ms:"马来语",mt:"马耳他语",my:"缅甸语",na:"瑙鲁语",nb:"挪威博克马尔语",nd:"北恩德贝勒语",ne:"尼泊尔语",ng:"尼日尔刚果语",nl:"荷兰语",nn:"挪威尼诺斯克语",no:"挪威语",nr:"南恩德贝勒语",nv:"纳瓦霍语",ny:"齐切瓦语",oc:"奥克西唐语",oj:"欧及布威语",om:"奥罗莫语",or:"奥里亚语",os:"奥塞梯语",pa:"旁遮普语",pi:"巴利语",pl:"波兰语",ps:"普什图语",pt:"葡萄牙语",qu:"克丘亚语",rm:"罗曼斯语",rn:"基隆迪语",ro:"罗马尼亚语",ru:"俄语",rw:"卢旺达语",sa:"梵文",sc:"撒丁岛语",sd:"信德语",se:"北萨米文",sg:"桑戈语",si:"僧伽罗语",sk:"斯洛伐克语",sl:"斯洛文尼亚语",sm:"萨摩亚语",sn:"绍纳语",so:"索马里语",sq:"阿尔巴尼亚语",sr:"塞尔维亚语",ss:"斯瓦蒂语",st:"南索托语",su:"巽他语",sv:"瑞典语",sw:"斯瓦希里语",ta:"泰米尔语",te:"泰卢固语",tg:"塔吉克语",th:"泰语",ti:"提格雷语",tk:"土库曼语",tl:"菲律宾语",tn:"茨瓦纳语",to:"汤加语",tr:"土耳其语",ts:"特松加语",tt:"塔塔尔语",tw:"契维语",ty:"塔希提语",ug:"维吾尔语",uk:"乌克兰语",ur:"乌尔都语",uz:"乌兹别克语",ve:"文达语",vi:"越南语",vo:"沃拉普克语",wa:"华隆语",wo:"沃洛夫语",xh:"科萨语",yi:"意第绪语",yo:"约鲁巴语",za:"壮语",zh:"中文",zu:"祖鲁语"};class u extends r{static getLanguages(e){return super.getLanguages(e).map((e=>(Object.assign(e,{zhName:u.getZhName(e.code)}),e)))}static getZhName(e){return super.validate(e)?l[e]:""}static getAllZhNames(){return Object.values(l)}}var c="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},h={exports:{}};var d,m,p=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},v=p;function f(e,t,n,a){return e.call(a,t[n],n,t)}var g=function(e,t,n){var a,i=0;for(a in null==d&&function(){for(var e in m=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],d=!0,{toString:null})d=!1}(),e)if(!1===f(t,e,a,n))break;if(d)for(var o=e.constructor,s=!!o&&e===o.prototype;(a=m[i++])&&("constructor"===a&&(s||!v(e,a))||e[a]===Object.prototype[a]||!1!==f(t,e,a,n)););},S=g;var C=function(e){var t=[];return S(e,(function(e,n){"function"==typeof e&&t.push(n)})),t.sort()};var b=function(e,t,n){var a=e.length;t=null==t?0:t<0?Math.max(a+t,0):Math.min(t,a),n=null==n?a:n<0?Math.max(a+n,0):Math.min(n,a);for(var i=[];t<n;)i.push(e[t++]);return i},y=b;var N=function(e,t,n){var a=y(arguments,2);return function(){return e.apply(t,a.concat(y(arguments)))}};var k=function(e,t,n){if(null!=e)for(var a=-1,i=e.length;++a<i&&!1!==t.call(n,e[a],a,e););},w=C,A=N,T=k,R=b;var E=function(e,t){var n=arguments.length>1?R(arguments,1):w(e);T(n,(function(t){e[t]=A(e[t],e)}))},I=p,x=g;var M=function(e,t,n){x(e,(function(a,i){if(I(e,i))return t.call(n,e[i],i,e)}))};var B=function(e){return e};var O=function(e){return function(t){return t[e]}},L=/^\[object (.*)\]$/,W=Object.prototype.toString;var F=function(e){return null===e?"Null":undefined===e?"Undefined":L.exec(W.call(e))[1]},P=F;var _=function(e,t){return P(e)===t},z=_,D=Array.isArray||function(e){return z(e,"Array")},j=M,G=D;function K(e,t){for(var n=-1,a=e.length;++n<a;)if(U(e[n],t))return!0;return!1}function U(e,t){return e&&"object"==typeof e?G(e)&&G(t)?function(e,t){for(var n=-1,a=t.length;++n<a;)if(!K(e,t[n]))return!1;return!0}(e,t):function(e,t){var n=!0;return j(t,(function(t,a){if(!U(e[a],t))return n=!1})),n}(e,t):e===t}var H=U,V=B,J=O,Z=H;var X=function(e,t){if(null==e)return V;switch(typeof e){case"function":return void 0!==t?function(n,a,i){return e.call(t,n,a,i)}:e;case"object":return function(t){return Z(t,e)};case"string":case"number":return J(e)}},Y=M,q=X;var $=function(e,t,n){t=q(t,n);var a=!1;return Y(e,(function(n,i){if(t(n,i,e))return a=!0,!1})),a},Q=$;var ee=function(e,t){return Q(e,(function(e){return e===t}))};var te=function(e){return!!e&&"object"==typeof e&&e.constructor===Object},ne=M,ae=te;var ie=function e(t,n){for(var a,i=0,o=arguments.length;++i<o;)(a=arguments[i])&&ne(a,(function(n,a){var i=t[a];null==i?t[a]=n:ae(i)&&ae(n)&&e(i,n)}));return t},oe=M,se=te;function re(e,t){for(var n,a=0,i=arguments.length;++a<i;)(n=arguments[a])&&oe(n,le,e);return e}function le(e,t){var n=this[t];se(e)&&se(n)?re(n,e):this[t]=e}var ue=re,ce=M,he=X;var de=function(e,t,n){t=he(t,n);var a=!0;return ce(e,(function(n,i){if(!t(n,i,e))return a=!1,!1})),a},me=_;var pe=function(e){return me(e,"Object")};var ve=p,fe=de,ge=pe,Se=function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t};function Ce(e,t){return ve(this,t)}var be=function(e,t,n){return n=n||Se,ge(e)&&ge(t)?fe(e,function(e){return function(t,n){return ve(this,n)&&e(t,this[n])}}(n),t)&&fe(t,Ce,e):n(e,t)},ye=k,Ne=b,ke=M;var we=function(e,t){return ye(Ne(arguments,1),(function(t){ke(t,(function(t,n){null==e[n]&&(e[n]=t)}))})),e},Ae=M,Te=X;var Re=function(e,t,n){t=Te(t,n);var a={};return Ae(e,(function(e,n,i){t(e,n,i)&&(a[n]=e)})),a},Ee=$,Ie=X;var xe=function(e,t,n){var a;return t=Ie(t,n),Ee(e,(function(e,n,i){if(t(e,n,i))return a=e,!0})),a},Me=M,Be=te;function Oe(e,t,n,a){return Me(e,(function(e,i){var o=n?n+"."+i:i;0!==a&&Be(e)?Oe(e,t,o,a-1):t[o]=e})),t}var Le=function(e,t){return null==e?{}:Oe(e,{},"",t=null==t?-1:t)};var We=function(e,t){for(var n=t.split("."),a=n.pop();t=n.shift();)if(null==(e=e[t]))return;return e[a]},Fe=We;var Pe=function(e,t){return undefined!==Fe(e,t)},_e=M,ze=Object.keys||function(e){var t=[];return _e(e,(function(e,n){t.push(n)})),t},De=M,je=X;var Ge=function(e,t,n){t=je(t,n);var a={};return De(e,(function(e,n,i){a[n]=t(e,n,i)})),a},Ke=M;var Ue=function(e,t){var n=!0;return Ke(t,(function(t,a){if(e[a]!==t)return n=!1})),n},He=X;var Ve=function(e,t,n){if(null!=e&&e.length){if(e.length&&!t)return Math.max.apply(Math,e);t=He(t,n);for(var a,i,o,s=-1/0,r=-1,l=e.length;++r<l;)(o=t(i=e[r],r,e))>s&&(s=o,a=i);return a}return 1/0},Je=M;var Ze=function(e){var t=[];return Je(e,(function(e,n){t.push(e)})),t},Xe=Ve,Ye=Ze;var qe=M;function $e(e,t){this[t]=e}var Qe=function(e,t){for(var n,a=0,i=arguments.length;++a<i;)null!=(n=arguments[a])&&qe(n,$e,e);return e},et=F,tt=te,nt=Qe;var at=function(e){switch(et(e)){case"Object":return tt(a=e)?nt({},a):a;case"Array":return e.slice();case"RegExp":return n="",n+=(t=e).multiline?"m":"",n+=t.global?"g":"",n+=t.ignoreCase?"i":"",new RegExp(t.source,n);case"Date":return new Date(+e);default:return e}var t,n,a},it=M,ot=F,st=te;function rt(e,t){switch(ot(e)){case"Object":return function(e,t){if(st(e)){var n={};return it(e,(function(e,n){this[n]=rt(e,t)}),n),n}return t?t(e):e}(e,t);case"Array":return function(e,t){var n=[],a=-1,i=e.length;for(;++a<i;)n[a]=rt(e[a],t);return n}(e,t);default:return at(e)}}var lt=p,ut=rt,ct=pe;var ht=function e(){var t,n,a,i,o=1;for(i=ut(arguments[0]);a=arguments[o++];)for(t in a)lt(a,t)&&(n=a[t],ct(n)&&ct(i[t])?i[t]=e(i[t],n):i[t]=ut(n));return i},dt=X;var mt=function(e,t,n){if(null!=e&&e.length){if(e.length&&!t)return Math.min.apply(Math,e);t=dt(t,n);for(var a,i,o,s=1/0,r=-1,l=e.length;++r<l;)(o=t(i=e[r],r,e))<s&&(s=o,a=i);return a}return-1/0},pt=mt,vt=Ze;var ft=k;var gt=function(e,t){return t?(ft(t.split("."),(function(t){e[t]||(e[t]={}),e=e[t]})),e):e};var St=function(e,t,n){if(n=n||0,null==e)return-1;for(var a=e.length,i=n<0?a+n:n;i<a;){if(e[i]===t)return i;i++}return-1},Ct=St;var bt=b,yt=function(e,t){return-1!==Ct(e,t)};var Nt=function(e,t){var n="string"!=typeof arguments[1]?arguments[1]:bt(arguments,1),a={};for(var i in e)e.hasOwnProperty(i)&&!yt(n,i)&&(a[i]=e[i]);return a},kt=b;var wt=function(e,t){for(var n,a="string"!=typeof arguments[1]?arguments[1]:kt(arguments,1),i={},o=0;n=a[o++];)i[n]=e[n];return i},At=Ge,Tt=O;var Rt=M;var Et=function(e){var t=0;return Rt(e,(function(){t++})),t},It=M,xt=Et;var Mt=function(e,t,n,a){var i=arguments.length>2;if(!xt(e)&&!i)throw new Error("reduce of empty object with no initial value");return It(e,(function(e,o,s){i?n=t.call(a,n,e,o,s):(n=e,i=!0)})),n},Bt=Re,Ot=X;var Lt=_;var Wt=function(e){return Lt(e,"Function")};var Ft=function(e,t){var n=e[t];if(void 0!==n)return Wt(n)?n.call(e):n},Pt=gt;var _t=function(e,t,n){var a=/^(.+)\.(.+)$/.exec(t);a?Pt(e,a[1])[a[2]]=n:e[t]=n},zt=Pe;var Dt=function(e,t){if(zt(e,t)){for(var n=t.split("."),a=n.pop();t=n.shift();)e=e[t];return delete e[a]}return!0},jt={bindAll:E,contains:ee,deepFillIn:ie,deepMatches:H,deepMixIn:ue,equals:be,every:de,fillIn:we,filter:Re,find:xe,flatten:Le,forIn:g,forOwn:M,functions:C,get:We,has:Pe,hasOwn:p,keys:ze,map:Ge,matches:Ue,max:function(e,t){return Xe(Ye(e),t)},merge:ht,min:function(e,t){return pt(vt(e),t)},mixIn:Qe,namespace:gt,omit:Nt,pick:wt,pluck:function(e,t){return At(e,Tt(t))},reduce:Mt,reject:function(e,t,n){return t=Ot(t,n),Bt(e,(function(e,n,a){return!t(e,n,a)}),n)},result:Ft,set:_t,size:Et,some:$,unset:Dt,values:Ze};(function(){var e,t,n;t=jt,e=function(){function e(){}return e.prototype.getCountry=function(t){return e.prototype.countries[t]},e.prototype.getCode=function(n){var a,i;return i=null,null!=n&&-1!==(a=t.values(e.prototype.countries).indexOf(n))&&(i=Object.keys(e.prototype.countries)[a]),i},e.prototype.getCountries=function(){return t.values(e.prototype.countries)},e.prototype.getCodes=function(){return Object.keys(e.prototype.countries)},e.prototype.getData=function(){return e.prototype.countries},e.prototype.countries={AF:"Afghanistan",AX:"Åland Islands",AL:"Albania",DZ:"Algeria",AS:"American Samoa",AD:"Andorra",AO:"Angola",AI:"Anguilla",AQ:"Antarctica",AG:"Antigua and Barbuda",AR:"Argentina",AM:"Armenia",AW:"Aruba",AU:"Australia",AT:"Austria",AZ:"Azerbaijan",BS:"Bahamas",BH:"Bahrain",BD:"Bangladesh",BB:"Barbados",BY:"Belarus",BE:"Belgium",BZ:"Belize",BJ:"Benin",BM:"Bermuda",BT:"Bhutan",BO:"Bolivia, Plurinational State of",BQ:"Bonaire, Sint Eustatius and Saba",BA:"Bosnia and Herzegovina",BW:"Botswana",BV:"Bouvet Island",BR:"Brazil",IO:"British Indian Ocean Territory",BN:"Brunei Darussalam",BG:"Bulgaria",BF:"Burkina Faso",BI:"Burundi",KH:"Cambodia",CM:"Cameroon",CA:"Canada",CV:"Cape Verde",KY:"Cayman Islands",CF:"Central African Republic",TD:"Chad",CL:"Chile",CN:"China",CX:"Christmas Island",CC:"Cocos (Keeling) Islands",CO:"Colombia",KM:"Comoros",CG:"Congo",CD:"Congo, the Democratic Republic of the",CK:"Cook Islands",CR:"Costa Rica",CI:"Côte d'Ivoire",HR:"Croatia",CU:"Cuba",CW:"Curaçao",CY:"Cyprus",CZ:"Czech Republic",DK:"Denmark",DJ:"Djibouti",DM:"Dominica",DO:"Dominican Republic",EC:"Ecuador",EG:"Egypt",SV:"El Salvador",GQ:"Equatorial Guinea",ER:"Eritrea",EE:"Estonia",ET:"Ethiopia",FK:"Falkland Islands (Malvinas)",FO:"Faroe Islands",FJ:"Fiji",FI:"Finland",FR:"France",GF:"French Guiana",PF:"French Polynesia",TF:"French Southern Territories",GA:"Gabon",GM:"Gambia",GE:"Georgia",DE:"Germany",GH:"Ghana",GI:"Gibraltar",GR:"Greece",GL:"Greenland",GD:"Grenada",GP:"Guadeloupe",GU:"Guam",GT:"Guatemala",GG:"Guernsey",GN:"Guinea",GW:"Guinea-Bissau",GY:"Guyana",HT:"Haiti",HM:"Heard Island and McDonald Mcdonald Islands",VA:"Holy See (Vatican City State)",HN:"Honduras",HK:"Hong Kong",HU:"Hungary",IS:"Iceland",IN:"India",ID:"Indonesia",IR:"Iran, Islamic Republic of",IQ:"Iraq",IE:"Ireland",IM:"Isle of Man",IL:"Israel",IT:"Italy",JM:"Jamaica",JP:"Japan",JE:"Jersey",JO:"Jordan",KZ:"Kazakhstan",KE:"Kenya",KI:"Kiribati",KP:"Korea, Democratic People's Republic of",KR:"Korea, Republic of",KW:"Kuwait",KG:"Kyrgyzstan",LA:"Lao People's Democratic Republic",LV:"Latvia",LB:"Lebanon",LS:"Lesotho",LR:"Liberia",LY:"Libya",LI:"Liechtenstein",LT:"Lithuania",LU:"Luxembourg",MO:"Macao",MK:"Macedonia, the Former Yugoslav Republic of",MG:"Madagascar",MW:"Malawi",MY:"Malaysia",MV:"Maldives",ML:"Mali",MT:"Malta",MH:"Marshall Islands",MQ:"Martinique",MR:"Mauritania",MU:"Mauritius",YT:"Mayotte",MX:"Mexico",FM:"Micronesia, Federated States of",MD:"Moldova, Republic of",MC:"Monaco",MN:"Mongolia",ME:"Montenegro",MS:"Montserrat",MA:"Morocco",MZ:"Mozambique",MM:"Myanmar",NA:"Namibia",NR:"Nauru",NP:"Nepal",NL:"Netherlands",NC:"New Caledonia",NZ:"New Zealand",NI:"Nicaragua",NE:"Niger",NG:"Nigeria",NU:"Niue",NF:"Norfolk Island",MP:"Northern Mariana Islands",NO:"Norway",OM:"Oman",PK:"Pakistan",PW:"Palau",PS:"Palestine, State of",PA:"Panama",PG:"Papua New Guinea",PY:"Paraguay",PE:"Peru",PH:"Philippines",PN:"Pitcairn",PL:"Poland",PT:"Portugal",PR:"Puerto Rico",QA:"Qatar",RE:"Réunion",RO:"Romania",RU:"Russian Federation",RW:"Rwanda",BL:"Saint Barthélemy",SH:"Saint Helena, Ascension and Tristan da Cunha",KN:"Saint Kitts and Nevis",LC:"Saint Lucia",MF:"Saint Martin (French part)",PM:"Saint Pierre and Miquelon",VC:"Saint Vincent and the Grenadines",WS:"Samoa",SM:"San Marino",ST:"Sao Tome and Principe",SA:"Saudi Arabia",SN:"Senegal",RS:"Serbia",SC:"Seychelles",SL:"Sierra Leone",SG:"Singapore",SX:"Sint Maarten (Dutch part)",SK:"Slovakia",SI:"Slovenia",SB:"Solomon Islands",SO:"Somalia",ZA:"South Africa",GS:"South Georgia and the South Sandwich Islands",SS:"South Sudan",ES:"Spain",LK:"Sri Lanka",SD:"Sudan",SR:"Suriname",SJ:"Svalbard and Jan Mayen",SZ:"Swaziland",SE:"Sweden",CH:"Switzerland",SY:"Syrian Arab Republic",TW:"Taiwan, Province of China",TJ:"Tajikistan",TZ:"Tanzania, United Republic of",TH:"Thailand",TL:"Timor-Leste",TG:"Togo",TK:"Tokelau",TO:"Tonga",TT:"Trinidad and Tobago",TN:"Tunisia",TR:"Turkey",TM:"Turkmenistan",TC:"Turks and Caicos Islands",TV:"Tuvalu",UG:"Uganda",UA:"Ukraine",AE:"United Arab Emirates",GB:"United Kingdom",US:"United States",UM:"United States Minor Outlying Islands",UY:"Uruguay",UZ:"Uzbekistan",VU:"Vanuatu",VE:"Venezuela, Bolivarian Republic of",VN:"Viet Nam",VG:"Virgin Islands, British",VI:"Virgin Islands, U.S.",WF:"Wallis and Futuna",EH:"Western Sahara",YE:"Yemen",ZM:"Zambia",ZW:"Zimbabwe"},e}(),n=null,h.exports=null!=n?n:n=new e}).call(c);var Gt=h.exports;const Kt=/^([a-z]{2})-([A-Z]{2})$/;class Ut{static getLanguageCode(e){var t=e.match(Kt);return!t||t.length<1?"":t[1]}static getLanguageName(e){var t=Ut.getLanguageCode(e);return u.getName(t)}static getLanguageNativeName(e){var t=Ut.getLanguageCode(e);return u.getNativeName(t)}static getLanguageZhName(e){var t=Ut.getLanguageCode(e);return u.getZhName(t)}static validateLanguageCode(e){var t=Ut.getLanguageCode(e);return u.validate(t)}static getLanguages(e){for(var t=[],n=0;n<e.length;n++)t.push({code:e[n],name:Ut.getLanguageName(e[n]),nativeName:Ut.getLanguageNativeName(e[n]),zhName:Ut.getLanguageZhName(e[n])});return t}static getCountryCode(e){var t=e.match(Kt);return!t||t.length<2?"":t[2]}static getCountryName(e){var t=Ut.getCountryCode(e);return Gt.getCountry(t)}static validateCountryCode(e){return e=Ut.getCountryCode(e),-1!==Gt.getCodes().indexOf(e)}static validate(e){var t=e.match(Kt);return!!(t&&3===t.length&&Ut.validateLanguageCode(e)&&Ut.validateCountryCode(e))}}var Ht,Vt=new Uint8Array(16);function Jt(){if(!Ht&&!(Ht="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return Ht(Vt)}var Zt=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;function Xt(e){return"string"==typeof e&&Zt.test(e)}for(var Yt=[],qt=0;qt<256;++qt)Yt.push((qt+256).toString(16).substr(1));function $t(e,t,n){var a=(e=e||{}).random||(e.rng||Jt)();if(a[6]=15&a[6]|64,a[8]=63&a[8]|128,t){n=n||0;for(var i=0;i<16;++i)t[n+i]=a[i];return t}return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(Yt[e[t+0]]+Yt[e[t+1]]+Yt[e[t+2]]+Yt[e[t+3]]+"-"+Yt[e[t+4]]+Yt[e[t+5]]+"-"+Yt[e[t+6]]+Yt[e[t+7]]+"-"+Yt[e[t+8]]+Yt[e[t+9]]+"-"+Yt[e[t+10]]+Yt[e[t+11]]+Yt[e[t+12]]+Yt[e[t+13]]+Yt[e[t+14]]+Yt[e[t+15]]).toLowerCase();if(!Xt(n))throw TypeError("Stringified UUID is invalid");return n}(a)}var Qt={exports:{}};
/*! http://mths.be/base64 v0.1.0 by @mathias | MIT license */!function(e,t){!function(n){var a=t,i=e&&e.exports==a&&e,o="object"==typeof c&&c;o.global!==o&&o.window!==o||(n=o);var s=function(e){this.message=e};(s.prototype=new Error).name="InvalidCharacterError";var r=function(e){throw new s(e)},l="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",u=/[\t\n\f\r ]/g,h={encode:function(e){e=String(e),/[^\0-\xFF]/.test(e)&&r("The string to be encoded contains characters outside of the Latin1 range.");for(var t,n,a,i,o=e.length%3,s="",u=-1,c=e.length-o;++u<c;)t=e.charCodeAt(u)<<16,n=e.charCodeAt(++u)<<8,a=e.charCodeAt(++u),s+=l.charAt((i=t+n+a)>>18&63)+l.charAt(i>>12&63)+l.charAt(i>>6&63)+l.charAt(63&i);return 2==o?(t=e.charCodeAt(u)<<8,n=e.charCodeAt(++u),s+=l.charAt((i=t+n)>>10)+l.charAt(i>>4&63)+l.charAt(i<<2&63)+"="):1==o&&(i=e.charCodeAt(u),s+=l.charAt(i>>2)+l.charAt(i<<4&63)+"=="),s},decode:function(e){var t=(e=String(e).replace(u,"")).length;t%4==0&&(t=(e=e.replace(/==?$/,"")).length),(t%4==1||/[^+a-zA-Z0-9/]/.test(e))&&r("Invalid character: the string to be decoded is not correctly encoded.");for(var n,a,i=0,o="",s=-1;++s<t;)a=l.indexOf(e.charAt(s)),n=i%4?64*n+a:a,i++%4&&(o+=String.fromCharCode(255&n>>(-2*i&6)));return o},version:"0.1.0"};if(a&&!a.nodeType)if(i)i.exports=h;else for(var d in h)h.hasOwnProperty(d)&&(a[d]=h[d]);else n.base64=h}(c)}(Qt,Qt.exports);function en(e,t,n,a,i=Date.now){const o=function(e){const t=e.split(".")[1];let n;try{n=JSON.parse(Qt.exports.decode(t))}catch(e){throw new Error("Error decoding Speechly token!")}return{appId:n.appId,projectId:n.projectId,deviceId:n.deviceId,configId:n.configId,scopes:n.scope.split(" "),issuer:n.iss,audience:n.aud,expiresAtMs:1e3*n.exp}}(e);return!(o.expiresAtMs-i()<36e5)&&(o.appId===n&&o.projectId===t&&o.deviceId===a)}const tn=16e3,nn=new Error("Microphone is not initialized"),an=new Error("Microphone is already initialized"),on=new Error("Current device does not support microphone API"),sn=new Error("Microphone consent is no given"),rn=new Error("AppId changed without project login");class ln{constructor(e,t,n,a=!1){this.initialized=!1,this.muted=!1,this.stats={maxSignalEnergy:0},this.handleAudio=e=>{this.muted||e.length>0&&this.apiClient.sendAudio(e)},this.isWebkit=e,this.apiClient=n,this.sampleRate=t,this.debug=a}initialize(e,t){var n;return o(this,void 0,void 0,(function*(){if(void 0===(null===(n=window.navigator)||void 0===n?void 0:n.mediaDevices))throw on;this.audioContext=e,this.resampleRatio=this.audioContext.sampleRate/this.sampleRate;try{this.mediaStream=yield window.navigator.mediaDevices.getUserMedia(t)}catch(e){throw sn}if(this.audioTrack=this.mediaStream.getAudioTracks()[0],this.isWebkit||(yield this.audioContext.resume()),void 0!==window.AudioWorkletNode){const e=new Blob(["\n// Indices for the Control SAB.\nconst CONTROL = {\n  'WRITE_INDEX': 0,\n  'FRAMES_AVAILABLE': 1,\n  'LOCK': 2,\n};\n\nclass SpeechlyProcessor extends AudioWorkletProcessor {\n  constructor() {\n    super();\n\n    this._initialized = false;\n    this.debug = false;\n    this.port.onmessage = this._initialize.bind(this);\n  }\n\n  _initialize(event) {\n    this.controlSAB = new Int32Array(event.data.controlSAB);\n    this.dataSAB = new Float32Array(event.data.dataSAB);\n    this.debug = event.data.debug;\n    this.sharedBufferSize = this.dataSAB.length;\n    this.buffer = new Float32Array(0);\n    this._initialized = true;\n  }\n\n  _transferDataToSharedBuffer(data) {\n    this.controlSAB[CONTROL.LOCK] = 1\n    let inputWriteIndex = this.controlSAB[CONTROL.WRITE_INDEX]\n    if (this.controlSAB[CONTROL.FRAMES_AVAILABLE] > 0) {\n      if (inputWriteIndex + data.length > this.sharedBufferSize) {\n        // console.log('buffer overflow')\n        inputWriteIndex = 0\n      }\n    }\n    this.dataSAB.set(data, inputWriteIndex)\n    this.controlSAB[CONTROL.WRITE_INDEX] = inputWriteIndex + data.length\n    this.controlSAB[CONTROL.FRAMES_AVAILABLE] = inputWriteIndex + data.length\n    this.controlSAB[CONTROL.LOCK] = 0\n  }\n\n  _pushData(data) {\n    if (this.debug) {\n      const signalEnergy = getStandardDeviation(data)\n      this.port.postMessage({\n        type: 'STATS',\n        signalEnergy: signalEnergy\n      });\n    }\n\n    if (this.buffer.length > this.sharedBufferSize) {\n      const dataToTransfer = this.buffer.subarray(0, this.sharedBufferSize)\n      this._transferDataToSharedBuffer(dataToTransfer)\n      this.buffer = this.buffer.subarray(this.sharedBufferSize)\n    }\n    let concat = new Float32Array(this.buffer.length + data.length)\n    concat.set(this.buffer)\n    concat.set(data, this.buffer.length)\n    this.buffer = concat\n  }\n\n  process(inputs, outputs, parameters) {\n    const inputChannelData = inputs[0][0];\n      if (inputChannelData !== undefined) {\n        if (this.controlSAB && this.dataSAB) {\n          this._pushData(inputChannelData);\n        } else {\n          this.port.postMessage({\n            type: 'DATA',\n            frames: inputChannelData\n          });\n        }\n      }\n      \n      return true;\n  }\n}\n\nfunction getStandardDeviation(array) {\n  const n = array.length\n  const mean = array.reduce((a, b) => a + b) / n\n  return Math.sqrt(array.map(x => Math.pow(x - mean, 2)).reduce((a, b) => a + b) / n)\n}\n\nregisterProcessor('speechly-worklet', SpeechlyProcessor);\n"],{type:"text/javascript"}),t=window.URL.createObjectURL(e);yield this.audioContext.audioWorklet.addModule(t);const n=new AudioWorkletNode(this.audioContext,"speechly-worklet");if(this.audioContext.createMediaStreamSource(this.mediaStream).connect(n),n.connect(this.audioContext.destination),void 0!==window.SharedArrayBuffer){const e=new window.SharedArrayBuffer(4*Int32Array.BYTES_PER_ELEMENT),t=new window.SharedArrayBuffer(1024*Float32Array.BYTES_PER_ELEMENT);this.apiClient.postMessage({type:"SET_SHARED_ARRAY_BUFFERS",controlSAB:e,dataSAB:t}),n.port.postMessage({type:"SET_SHARED_ARRAY_BUFFERS",controlSAB:e,dataSAB:t,debug:this.debug})}else this.debug&&console.log("[SpeechlyClient]","can not use SharedArrayBuffer");n.port.onmessage=e=>{switch(e.data.type){case"STATS":e.data.signalEnergy>this.stats.maxSignalEnergy&&(this.stats.maxSignalEnergy=e.data.signalEnergy);break;case"DATA":this.handleAudio(e.data.frames)}}}else{if(this.debug&&console.log("[SpeechlyClient]","can not use AudioWorkletNode"),this.isWebkit){const e=4096*Math.pow(2,Math.ceil(Math.log(this.resampleRatio)/Math.log(2)));this.audioProcessor=this.audioContext.createScriptProcessor(e,1,1)}else this.audioProcessor=this.audioContext.createScriptProcessor(void 0,1,1);this.audioContext.createMediaStreamSource(this.mediaStream).connect(this.audioProcessor),this.audioProcessor.connect(this.audioContext.destination),this.audioProcessor.addEventListener("audioprocess",(e=>{this.handleAudio(e.inputBuffer.getChannelData(0))}))}this.initialized=!0,this.mute()}))}close(){return o(this,void 0,void 0,(function*(){if(this.mute(),!this.initialized)throw nn;this.audioTrack.enabled=!1;if(this.mediaStream.getTracks().forEach((e=>e.stop())),null!=this.audioProcessor){this.audioProcessor.disconnect()}this.mediaStream=void 0,this.audioTrack=void 0,this.audioProcessor=void 0,this.initialized=!1}))}mute(){this.muted=!0}unmute(){this.muted=!1}printStats(){if(null!=this.audioTrack){const e=this.audioTrack.getSettings();console.log(this.audioTrack.label,this.audioTrack.readyState),console.log("channelCount",e.channelCount),console.log("latency",e.latency),console.log("autoGainControl",e.autoGainControl)}console.log("maxSignalEnergy",this.stats.maxSignalEnergy)}}var un;e.WebsocketResponseType=void 0,(un=e.WebsocketResponseType||(e.WebsocketResponseType={})).Opened="WEBSOCKET_OPEN",un.SourceSampleRateSetSuccess="SOURSE_SAMPLE_RATE_SET_SUCCESS",un.Started="started",un.Stopped="stopped",un.SegmentEnd="segment_end",un.Transcript="transcript",un.Entity="entity",un.Intent="intent",un.TentativeTranscript="tentative_transcript",un.TentativeEntities="tentative_entities",un.TentativeIntent="tentative_intent";class cn{constructor(){this.startCbs=[],this.stopCbs=[],this.onResponseCb=()=>{},this.onCloseCb=()=>{},this.onWebsocketMessage=t=>{const n=t.data;switch(n.type){case e.WebsocketResponseType.Opened:null!=this.resolveInitialization&&this.resolveInitialization();break;case e.WebsocketResponseType.SourceSampleRateSetSuccess:null!=this.resolveSourceSampleRateSet&&this.resolveSourceSampleRateSet();break;case e.WebsocketResponseType.Started:this.startCbs.forEach((e=>{try{e(void 0,n.audio_context)}catch(e){console.error('[SpeechlyClient] Error while invoking "onStart" callback:',e)}})),this.startCbs.length=0;break;case e.WebsocketResponseType.Stopped:this.stopCbs.forEach((e=>{try{e(void 0,n.audio_context)}catch(e){console.error('[SpeechlyClient] Error while invoking "onStop" callback:',e)}})),this.stopCbs.length=0;break;default:this.onResponseCb(n)}};const t=new Blob(["/**\n * Known WebSocket response types.\n * @public\n */\nvar WebsocketResponseType;\n(function (WebsocketResponseType) {\n    WebsocketResponseType[\"Opened\"] = \"WEBSOCKET_OPEN\";\n    WebsocketResponseType[\"SourceSampleRateSetSuccess\"] = \"SOURSE_SAMPLE_RATE_SET_SUCCESS\";\n    WebsocketResponseType[\"Started\"] = \"started\";\n    WebsocketResponseType[\"Stopped\"] = \"stopped\";\n})(WebsocketResponseType || (WebsocketResponseType = {}));\nvar CONTROL = {\n    WRITE_INDEX: 0,\n    FRAMES_AVAILABLE: 1,\n    LOCK: 2\n};\nvar WebsocketClient = /** @class */ (function () {\n    function WebsocketClient(ctx) {\n        var _this = this;\n        this.isContextStarted = false;\n        this.isStartContextConfirmed = false;\n        this.shouldResendLastFramesSent = false;\n        this.buffer = new Float32Array(0);\n        this.lastFramesSent = new Int16Array(0); // to re-send after switch context\n        this.debug = false;\n        this.initialized = false;\n        this.onWebsocketClose = function (event) {\n            _this.websocket = undefined;\n            _this.connect(0);\n        };\n        this.onWebsocketOpen = function (_event) {\n            if (_this.debug) {\n                console.log('[SpeechlyClient]', 'websocket opened');\n            }\n            if (_this.isContextStarted && !_this.isStartContextConfirmed) {\n                _this.send(_this.outbox);\n            }\n            _this.workerCtx.postMessage({ type: 'WEBSOCKET_OPEN' });\n        };\n        this.onWebsocketError = function (_event) {\n            if (_this.debug) {\n                console.log('[SpeechlyClient]', 'websocket error');\n            }\n            _this.closeWebsocket();\n        };\n        this.onWebsocketMessage = function (event) {\n            var response;\n            try {\n                response = JSON.parse(event.data);\n            }\n            catch (e) {\n                console.error('[SpeechlyClient] Error parsing response from the server:', e);\n                return;\n            }\n            if (response.type === WebsocketResponseType.Started) {\n                _this.isStartContextConfirmed = true;\n                if (_this.shouldResendLastFramesSent) {\n                    _this.resendLastFrames();\n                    _this.shouldResendLastFramesSent = false;\n                }\n            }\n            _this.workerCtx.postMessage(response);\n        };\n        this.workerCtx = ctx;\n    }\n    WebsocketClient.prototype.init = function (apiUrl, authToken, targetSampleRate, debug) {\n        if (this.initialized) {\n            console.log('[SpeechlyClient]', 'already initialized');\n            return;\n        }\n        this.debug = debug;\n        if (this.debug) {\n            console.log('[SpeechlyClient]', 'initialize worker');\n        }\n        this.apiUrl = apiUrl;\n        this.authToken = authToken;\n        this.targetSampleRate = targetSampleRate;\n        this.initialized = true;\n        this.connect(0);\n    };\n    WebsocketClient.prototype.setSourceSampleRate = function (sourceSampleRate) {\n        this.sourceSampleRate = sourceSampleRate;\n        this.resampleRatio = this.sourceSampleRate / this.targetSampleRate;\n        if (this.debug) {\n            console.log('[SpeechlyClient]', 'resampleRatio', this.resampleRatio);\n        }\n        if (this.resampleRatio > 1) {\n            this.filter = generateFilter(this.sourceSampleRate, this.targetSampleRate, 127);\n        }\n        this.workerCtx.postMessage({ type: 'SOURSE_SAMPLE_RATE_SET_SUCCESS' });\n        if (isNaN(this.resampleRatio)) {\n            throw Error(\"resampleRatio is NaN source rate is \".concat(this.sourceSampleRate, \" and target rate is \").concat(this.targetSampleRate));\n        }\n    };\n    WebsocketClient.prototype.setSharedArrayBuffers = function (controlSAB, dataSAB) {\n        this.controlSAB = new Int32Array(controlSAB);\n        this.dataSAB = new Float32Array(dataSAB);\n        var audioHandleInterval = this.dataSAB.length / 32; // ms\n        if (this.debug) {\n            console.log('[SpeechlyClient]', 'Audio handle interval', audioHandleInterval, 'ms');\n        }\n        setInterval(this.sendAudioFromSAB.bind(this), audioHandleInterval);\n    };\n    WebsocketClient.prototype.connect = function (timeout) {\n        if (timeout === void 0) { timeout = 1000; }\n        if (this.debug) {\n            console.log('[SpeechlyClient]', 'connect in ', timeout / 1000, 'sec');\n        }\n        setTimeout(this.initializeWebsocket.bind(this), timeout);\n    };\n    WebsocketClient.prototype.initializeWebsocket = function () {\n        if (this.debug) {\n            console.log('[SpeechlyClient]', 'connecting to ', this.apiUrl);\n        }\n        this.websocket = new WebSocket(this.apiUrl, this.authToken);\n        this.websocket.addEventListener('open', this.onWebsocketOpen);\n        this.websocket.addEventListener('message', this.onWebsocketMessage);\n        this.websocket.addEventListener('error', this.onWebsocketError);\n        this.websocket.addEventListener('close', this.onWebsocketClose);\n    };\n    WebsocketClient.prototype.isOpen = function () {\n        return this.websocket !== undefined && this.websocket.readyState === this.websocket.OPEN;\n    };\n    WebsocketClient.prototype.resendLastFrames = function () {\n        if (this.lastFramesSent.length > 0) {\n            this.send(this.lastFramesSent);\n            this.lastFramesSent = new Int16Array(0);\n        }\n    };\n    WebsocketClient.prototype.sendAudio = function (audioChunk) {\n        if (!this.isContextStarted) {\n            return;\n        }\n        if (audioChunk.length > 0) {\n            if (this.resampleRatio > 1) {\n                // Downsampling\n                this.send(this.downsample(audioChunk));\n            }\n            else {\n                this.send(float32ToInt16(audioChunk));\n            }\n        }\n    };\n    WebsocketClient.prototype.sendAudioFromSAB = function () {\n        if (!this.isContextStarted) {\n            this.controlSAB[CONTROL.FRAMES_AVAILABLE] = 0;\n            this.controlSAB[CONTROL.WRITE_INDEX] = 0;\n            return;\n        }\n        if (this.controlSAB == undefined) {\n            return;\n        }\n        var framesAvailable = this.controlSAB[CONTROL.FRAMES_AVAILABLE];\n        var lock = this.controlSAB[CONTROL.LOCK];\n        if (lock == 0 && framesAvailable > 0) {\n            var data = this.dataSAB.subarray(0, framesAvailable);\n            this.controlSAB[CONTROL.FRAMES_AVAILABLE] = 0;\n            this.controlSAB[CONTROL.WRITE_INDEX] = 0;\n            if (data.length > 0) {\n                var frames_1;\n                if (this.resampleRatio > 1) {\n                    frames_1 = this.downsample(data);\n                }\n                else {\n                    frames_1 = float32ToInt16(data);\n                }\n                this.send(frames_1);\n                // 16000 per second, 1000 in 100 ms\n                // save last 250 ms\n                if (this.lastFramesSent.length > 1024 * 4) {\n                    this.lastFramesSent = frames_1;\n                }\n                else {\n                    var concat = new Int16Array(this.lastFramesSent.length + frames_1.length);\n                    concat.set(this.lastFramesSent);\n                    concat.set(frames_1, this.lastFramesSent.length);\n                    this.lastFramesSent = concat;\n                }\n            }\n        }\n    };\n    WebsocketClient.prototype.startContext = function (appId) {\n        if (this.isContextStarted) {\n            console.log('Cant start context: it has been already started');\n            return;\n        }\n        this.isContextStarted = true;\n        this.isStartContextConfirmed = false;\n        if (appId !== undefined) {\n            this.outbox = JSON.stringify({ event: 'start', appId: appId });\n        }\n        else {\n            this.outbox = JSON.stringify({ event: 'start' });\n        }\n        this.send(this.outbox);\n    };\n    WebsocketClient.prototype.stopContext = function () {\n        if (this.websocket == undefined) {\n            throw Error('Cant start context: websocket is undefined');\n        }\n        if (!this.isContextStarted) {\n            console.log('Cant stop context: it is not started');\n            return;\n        }\n        this.isContextStarted = false;\n        this.isStartContextConfirmed = false;\n        var StopEventJSON = JSON.stringify({ event: 'stop' });\n        this.send(StopEventJSON);\n    };\n    WebsocketClient.prototype.switchContext = function (newAppId) {\n        if (this.websocket == undefined) {\n            throw Error('Cant switch context: websocket is undefined');\n        }\n        if (!this.isContextStarted) {\n            console.log('Cant switch context: it is not started');\n            return;\n        }\n        if (newAppId == undefined) {\n            console.log('Cant switch context: new app id is undefined');\n            return;\n        }\n        this.isStartContextConfirmed = false;\n        var StopEventJSON = JSON.stringify({ event: 'stop' });\n        this.send(StopEventJSON);\n        this.shouldResendLastFramesSent = true;\n        this.send(JSON.stringify({ event: 'start', appId: newAppId }));\n    };\n    WebsocketClient.prototype.closeWebsocket = function () {\n        if (this.websocket == null) {\n            throw Error('Websocket is not open');\n        }\n        this.websocket.removeEventListener('open', this.onWebsocketOpen);\n        this.websocket.removeEventListener('message', this.onWebsocketMessage);\n        this.websocket.removeEventListener('error', this.onWebsocketError);\n        this.websocket.removeEventListener('close', this.onWebsocketClose);\n        this.websocket.close();\n    };\n    WebsocketClient.prototype.downsample = function (input) {\n        var inputBuffer = new Float32Array(this.buffer.length + input.length);\n        inputBuffer.set(this.buffer, 0);\n        inputBuffer.set(input, this.buffer.length);\n        var outputLength = Math.ceil((inputBuffer.length - this.filter.length) / this.resampleRatio);\n        var outputBuffer = new Int16Array(outputLength);\n        for (var i = 0; i < outputLength; i++) {\n            var offset = Math.round(this.resampleRatio * i);\n            var val = 0.0;\n            for (var j = 0; j < this.filter.length; j++) {\n                val += inputBuffer[offset + j] * this.filter[j];\n            }\n            outputBuffer[i] = val * (val < 0 ? 0x8000 : 0x7fff);\n        }\n        var remainingOffset = Math.round(this.resampleRatio * outputLength);\n        if (remainingOffset < inputBuffer.length) {\n            this.buffer = inputBuffer.subarray(remainingOffset);\n        }\n        else {\n            this.buffer = new Float32Array(0);\n        }\n        return outputBuffer;\n    };\n    WebsocketClient.prototype.send = function (data) {\n        if (!this.isOpen()) {\n            throw Error('Cant send data: websocket is inactive');\n        }\n        try {\n            this.websocket.send(data);\n        }\n        catch (error) {\n            console.log('[SpeechlyClient]', 'Server connection error', error);\n        }\n    };\n    return WebsocketClient;\n}());\nvar ctx = self;\nvar websocketClient = new WebsocketClient(ctx);\nctx.onmessage = function (e) {\n    switch (e.data.type) {\n        case 'INIT':\n            websocketClient.init(e.data.apiUrl, e.data.authToken, e.data.targetSampleRate, e.data.debug);\n            break;\n        case 'SET_SOURSE_SAMPLE_RATE':\n            websocketClient.setSourceSampleRate(e.data.sourceSampleRate);\n            break;\n        case 'SET_SHARED_ARRAY_BUFFERS':\n            websocketClient.setSharedArrayBuffers(e.data.controlSAB, e.data.dataSAB);\n            break;\n        case 'CLOSE':\n            websocketClient.closeWebsocket();\n            break;\n        case 'START_CONTEXT':\n            websocketClient.startContext(e.data.appId);\n            break;\n        case 'SWITCH_CONTEXT':\n            websocketClient.switchContext(e.data.appId);\n            break;\n        case 'STOP_CONTEXT':\n            websocketClient.stopContext();\n            break;\n        case 'AUDIO':\n            websocketClient.sendAudio(e.data.payload);\n            break;\n        default:\n            console.log('WORKER', e);\n    }\n};\nfunction float32ToInt16(buffer) {\n    var buf = new Int16Array(buffer.length);\n    for (var l = 0; l < buffer.length; l++) {\n        buf[l] = buffer[l] * (buffer[l] < 0 ? 0x8000 : 0x7fff);\n    }\n    return buf;\n}\nfunction generateFilter(sourceSampleRate, targetSampleRate, length) {\n    if (length % 2 === 0) {\n        throw Error('Filter length must be odd');\n    }\n    var cutoff = targetSampleRate / 2;\n    var filter = new Float32Array(length);\n    var sum = 0;\n    for (var i = 0; i < length; i++) {\n        var x = sinc(((2 * cutoff) / sourceSampleRate) * (i - (length - 1) / 2));\n        sum += x;\n        filter[i] = x;\n    }\n    for (var i = 0; i < length; i++) {\n        filter[i] = filter[i] / sum;\n    }\n    return filter;\n}\nfunction sinc(x) {\n    if (x === 0.0) {\n        return 1.0;\n    }\n    var piX = Math.PI * x;\n    return Math.sin(piX) / piX;\n}\n"],{type:"text/javascript"}),n=window.URL.createObjectURL(t);this.worker=new Worker(n),this.worker.addEventListener("message",this.onWebsocketMessage)}onResponse(e){this.onResponseCb=e}onClose(e){this.onCloseCb=e}initialize(e,t,n,a){return o(this,void 0,void 0,(function*(){return this.worker.postMessage({type:"INIT",apiUrl:e,authToken:t,targetSampleRate:n,debug:a}),new Promise((e=>{this.resolveInitialization=e}))}))}setSourceSampleRate(e){return o(this,void 0,void 0,(function*(){return this.worker.postMessage({type:"SET_SOURSE_SAMPLE_RATE",sourceSampleRate:e}),new Promise((e=>{this.resolveSourceSampleRateSet=e}))}))}close(){return o(this,void 0,void 0,(function*(){return new Promise(((e,t)=>{this.worker.postMessage({type:"CLOSE",code:1e3,message:"Client has ended the session"}),e()}))}))}startContext(e){return o(this,void 0,void 0,(function*(){return new Promise(((t,n)=>{this.startCbs.push(((e,a)=>{void 0!==e?n(e):t(a)})),null!=e?this.worker.postMessage({type:"START_CONTEXT",appId:e}):this.worker.postMessage({type:"START_CONTEXT"})}))}))}stopContext(){return o(this,void 0,void 0,(function*(){return new Promise(((e,t)=>{this.stopCbs.push(((n,a)=>{void 0!==n?t(n):e(a)})),this.worker.postMessage({type:"STOP_CONTEXT"})}))}))}switchContext(e){return o(this,void 0,void 0,(function*(){return new Promise(((t,n)=>{this.startCbs.push(((e,a)=>{void 0!==e?n(e):t(a)})),this.worker.postMessage({type:"SWITCH_CONTEXT",appId:e})}))}))}postMessage(e){this.worker.postMessage(e)}sendAudio(e){this.worker.postMessage({type:"AUDIO",payload:e})}}class hn{constructor(){this.storage=window.localStorage}get(e){return this.storage.getItem(e)}set(e,t){this.storage.setItem(e,t)}getOrSet(e,t){let n=this.storage.getItem(e);return null===n&&(n=t(),this.storage.setItem(e,n)),n}}const dn=new Error("Current device does not support storage API"),mn=new Error("Requested key was not present in storage");class pn{constructor(e,t){this.isFinalized=!1,this.words=[],this.entities=new Map,this.intent={intent:"",isFinal:!1},this.contextId=e,this.id=t}toSegment(){let e=0;const t=new Array(this.entities.size);return this.entities.forEach((n=>{t[e]=n,e++})),{id:this.id,contextId:this.contextId,isFinal:this.isFinalized,words:this.words,entities:t,intent:this.intent}}toString(){const e=this.toSegment(),t=e.words.filter((e=>e.value)).map((e=>({value:e.value,index:e.index}))),n=Object.assign(Object.assign({},e),{words:t});return JSON.stringify(n,null,2)}updateTranscript(e){return e.forEach((e=>{this.isFinalized&&!e.isFinal||(this.words[e.index]=e)})),this}updateEntities(e){return e.forEach((e=>{this.isFinalized&&!e.isFinal||this.entities.set(function(e){return`${e.startPosition.toString()}:${e.endPosition.toString()}`}(e),e)})),this}updateIntent(e){return this.isFinalized&&!e.isFinal||(this.intent=e),this}finalize(){return this.entities.forEach(((e,t)=>{e.isFinal||this.entities.delete(t)})),this.words=this.words.filter((e=>e.isFinal)),this.intent.isFinal||(this.intent.intent="",this.intent.isFinal=!0),this.isFinalized=!0,this}}function vn(e,t){return{intent:e.intent,isFinal:t}}const fn="speechly-auth-token";e.Client=class{constructor(t){var n,a,i,s,r,l,u,c,h,d,m,p;this.activeContexts=new Map,this.reconnectAttemptCount=5,this.reconnectMinDelay=1e3,this.contextStopDelay=250,this.state=e.ClientState.Disconnected,this.stateChangeCb=()=>{},this.segmentChangeCb=()=>{},this.tentativeTranscriptCb=()=>{},this.tentativeEntitiesCb=()=>{},this.tentativeIntentCb=()=>{},this.transcriptCb=()=>{},this.entityCb=()=>{},this.intentCb=()=>{},this.handleWebsocketResponse=t=>{var n;this.debug&&console.log("[SpeechlyClient]","Received response",t);const{audio_context:a,segment_id:i,type:o}=t;let{data:s}=t;const r=this.activeContexts.get(a);if(void 0===r)return void console.warn("[SpeechlyClient]","Received response for non-existent context",a);let l=null!==(n=r.get(i))&&void 0!==n?n:new pn(a,i);switch(o){case e.WebsocketResponseType.TentativeTranscript:s=s;const t=function(e){return e.words.map((({word:e,index:t,start_timestamp:n,end_timestamp:a})=>({value:e,index:t,startTimestamp:n,endTimestamp:a,isFinal:!1})))}(s);this.tentativeTranscriptCb(a,i,t,s.transcript),l=l.updateTranscript(t);break;case e.WebsocketResponseType.Transcript:s=s;const n=function(e){return{value:e.word,index:e.index,startTimestamp:e.start_timestamp,endTimestamp:e.end_timestamp,isFinal:!0}}(s);this.transcriptCb(a,i,n),l=l.updateTranscript([n]);break;case e.WebsocketResponseType.TentativeEntities:s=s;const o=function(e){return e.entities.map((({entity:e,value:t,start_position:n,end_position:a})=>({type:e,value:t,startPosition:n,endPosition:a,isFinal:!1})))}(s);this.tentativeEntitiesCb(a,i,o),l=l.updateEntities(o);break;case e.WebsocketResponseType.Entity:s=s;const r=function(e){return{type:e.entity,value:e.value,startPosition:e.start_position,endPosition:e.end_position,isFinal:!0}}(s);this.entityCb(a,i,r),l=l.updateEntities([r]);break;case e.WebsocketResponseType.TentativeIntent:s=s;const u=vn(s,!1);this.tentativeIntentCb(a,i,u),l=l.updateIntent(u);break;case e.WebsocketResponseType.Intent:s=s;const c=vn(s,!0);this.intentCb(a,i,c),l=l.updateIntent(c);break;case e.WebsocketResponseType.SegmentEnd:l=l.finalize()}r.set(i,l),this.activeContexts.set(a,r),this.logSegments&&console.info(l.toString()),this.segmentChangeCb(l.toSegment())},this.handleWebsocketClosure=t=>{this.debug&&console.error("[SpeechlyClient]","Server connection closed",t),void 0!==this.deviceId?this.state!==e.ClientState.Connecting&&this.state!==e.ClientState.Failed&&this.setState(e.ClientState.Connecting):this.setState(e.ClientState.Failed)},this.sampleRate=null!==(n=t.sampleRate)&&void 0!==n?n:tn;try{const e=window.navigator.mediaDevices.getSupportedConstraints();this.nativeResamplingSupported=!0===e.sampleRate,null!=t.autoGainControl&&t.autoGainControl?this.autoGainControl=!0===e.autoGainControl:this.autoGainControl=!1}catch(e){this.nativeResamplingSupported=!1,this.autoGainControl=!1}const v=null!==(a=t.language)&&void 0!==a?a:"en-US";if(!(Ut.validate(v)||Ut.validateLanguageCode(`${v.substring(0,2)}-XX`)&&/^..-\d\d\d$/.test(v)))throw Error(`[SpeechlyClient] Invalid language "${v}"`);this.debug=null!==(i=t.debug)&&void 0!==i&&i,this.logSegments=null!==(s=t.logSegments)&&void 0!==s&&s,this.loginUrl=null!==(r=t.loginUrl)&&void 0!==r?r:"https://api.speechly.com/login",this.appId=null!==(l=t.appId)&&void 0!==l?l:void 0,this.projectId=null!==(u=t.projectId)&&void 0!==u?u:void 0;const f=function(e,t,n){const a=new URLSearchParams;return a.append("languageCode",t),a.append("sampleRate",n.toString()),`${e}?${a.toString()}`}(null!==(c=t.apiUrl)&&void 0!==c?c:"wss://api.speechly.com/ws/v1",v,null!==(h=t.sampleRate)&&void 0!==h?h:tn);if(this.apiClient=null!==(d=t.apiClient)&&void 0!==d?d:new cn,void 0!==this.appId&&void 0!==this.projectId)throw Error("[SpeechlyClient] You cannot use both appId and projectId at the same time");this.storage=null!==(m=t.storage)&&void 0!==m?m:new hn,this.deviceId=this.storage.getOrSet("speechly-device-id",$t);const g=this.storage.get(fn);if(this.initializeApiClientPromise=new Promise((e=>{this.resolveInitialization=e})),null!=g&&en(g,this.projectId,this.appId,this.deviceId)?(this.authToken=g,this.connect(f)):function(e,t,n,a,i=fetch,s=Date.now){var r;return o(this,void 0,void 0,(function*(){let o;o=void 0!==t?{projectId:t,deviceId:a}:{appId:n,deviceId:a};const l=yield i(e,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(o)}),u=yield l.json();if(200!==l.status)throw Error(null!==(r=u.error)&&void 0!==r?r:`Speechly API login request failed with ${l.status}`);if(void 0===u.access_token)throw Error("Invalid login response from Speechly API");if(!en(u.access_token,t,n,a,s))throw Error("Invalid token received from Speechly API");return u.access_token}))}(this.loginUrl,this.projectId,this.appId,this.deviceId).then((e=>{this.authToken=e,this.storage.set(fn,this.authToken),this.connect(f)})).catch((t=>{throw this.setState(e.ClientState.Failed),t})),void 0!==window.AudioContext)this.isWebkit=!1;else{if(void 0===window.webkitAudioContext)throw on;this.isWebkit=!0}this.microphone=null!==(p=t.microphone)&&void 0!==p?p:new ln(this.isWebkit,this.sampleRate,this.apiClient,this.debug),this.apiClient.onResponse(this.handleWebsocketResponse),this.apiClient.onClose(this.handleWebsocketClosure),window.SpeechlyClient=this}connect(e){null!=this.authToken&&this.apiClient.initialize(e,this.authToken,this.sampleRate,this.debug).then((()=>{null!=this.resolveInitialization&&this.resolveInitialization()})).catch((e=>{throw e}))}initialize(){return o(this,void 0,void 0,(function*(){if(yield this.initializeApiClientPromise,this.state!==e.ClientState.Disconnected)throw Error("Cannot initialize client - client is not in Disconnected state");this.setState(e.ClientState.Connecting);try{if(this.isWebkit)void 0!==window.webkitAudioContext&&(this.audioContext=new window.webkitAudioContext);else{const e={};this.nativeResamplingSupported&&(e.sampleRate=this.sampleRate),this.audioContext=new window.AudioContext(e)}const e={video:!1};if(this.nativeResamplingSupported||this.autoGainControl?e.audio={sampleRate:this.sampleRate,autoGainControl:this.autoGainControl}:e.audio=!0,null==this.audioContext)throw on;this.isWebkit&&(yield this.audioContext.resume()),yield this.apiClient.setSourceSampleRate(this.audioContext.sampleRate),this.initializeMicrophonePromise=this.microphone.initialize(this.audioContext,e),yield this.initializeMicrophonePromise}catch(t){switch(t){case on:this.setState(e.ClientState.NoBrowserSupport);break;case sn:this.setState(e.ClientState.NoAudioConsent);break;default:this.setState(e.ClientState.Failed)}throw t}this.setState(e.ClientState.Connected)}))}close(){return o(this,void 0,void 0,(function*(){const t=[];try{yield this.microphone.close()}catch(e){t.push(e.message)}try{yield this.apiClient.close()}catch(e){t.push(e.message)}if(this.activeContexts.clear(),this.setState(e.ClientState.Disconnected),t.length>0)throw Error(t.join(","))}))}switchContext(t){return o(this,void 0,void 0,(function*(){if(this.state===e.ClientState.Recording){this.resolveStopContext=void 0;const e=yield this.apiClient.switchContext(t);this.activeContexts.set(e,new Map)}}))}startContext(t){return o(this,void 0,void 0,(function*(){if(null!=this.resolveStopContext&&(this.resolveStopContext(),yield this.stoppedContextIdPromise),this.state===e.ClientState.Disconnected||this.state===e.ClientState.Connecting)throw Error("Cannot start context - client is not connected");this.setState(e.ClientState.Starting);return yield this._startContext(t)}))}_startContext(t){return o(this,void 0,void 0,(function*(){let n;try{if(null!=this.projectId)n=yield this.apiClient.startContext(t);else{if(null!=t&&this.appId!==t)throw rn;n=yield this.apiClient.startContext()}}catch(t){if(t===rn)this.setState(e.ClientState.Failed);else this.setState(e.ClientState.Connected);throw t}return this.setState(e.ClientState.Recording),this.microphone.unmute(),this.activeContexts.set(n,new Map),n}))}stopContext(){return o(this,void 0,void 0,(function*(){if(this.state!==e.ClientState.Recording&&this.state!==e.ClientState.Starting)throw Error("Cannot stop context - client is not recording");this.setState(e.ClientState.Stopping),this.stoppedContextIdPromise=new Promise((e=>{Promise.race([new Promise((e=>setTimeout(e,this.contextStopDelay))),new Promise((e=>{this.resolveStopContext=e}))]).then((()=>{this._stopContext().then((t=>{e(t)})).catch((e=>{throw e}))})).catch((e=>{throw e}))}));const t=yield this.stoppedContextIdPromise;return this.setState(e.ClientState.Connected),this.activeContexts.delete(t),t}))}_stopContext(){return o(this,void 0,void 0,(function*(){let t;this.microphone.mute();try{t=yield this.apiClient.stopContext()}catch(t){throw this.setState(e.ClientState.Failed),t}return t}))}onStateChange(e){this.stateChangeCb=e}onSegmentChange(e){this.segmentChangeCb=e}onTentativeTranscript(e){this.tentativeTranscriptCb=e}onTranscript(e){this.transcriptCb=e}onTentativeEntities(e){this.tentativeEntitiesCb=e}onEntity(e){this.entityCb=e}onTentativeIntent(e){this.tentativeIntentCb=e}onIntent(e){this.intentCb=e}setState(e){this.state!==e&&(this.debug&&console.log("[SpeechlyClient]","State transition",n(this.state),n(e)),this.state=e,this.stateChangeCb(e))}printStats(){this.microphone.printStats()}},e.DefaultSampleRate=tn,e.ErrAlreadyInitialized=an,e.ErrAppIdChangeWithoutProjectLogin=rn,e.ErrDeviceNotSupported=on,e.ErrKeyNotFound=mn,e.ErrNoAudioConsent=sn,e.ErrNoStorageSupport=dn,e.ErrNotInitialized=nn,e.stateToString=n,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=speechly.umd.min.js.map
