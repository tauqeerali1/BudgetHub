"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TranscriptDrawer = void 0;
var react_1 = __importStar(require("react"));
var react_client_1 = require("@speechly/react-client");
var types_1 = require("../types");
/**
 * A React component that renders the transcript and entities received from Speechly SLU API.
 *
 * The component is intended to be used for providing visual feedback to the speaker.
 *
 * @public
 */
var TranscriptDrawer = function (props) {
    var _a = (0, react_client_1.useSpeechContext)(), segment = _a.segment, speechState = _a.speechState;
    var refElement = (0, react_1.useRef)();
    var _b = (0, react_1.useState)(false), loaded = _b[0], setLoaded = _b[1];
    var _c = (0, react_1.useState)(false), demoMode = _c[0], setDemoMode = _c[1];
    // Dynamic import of HTML custom element to play nice with Next.js SSR
    (0, react_1.useEffect)(function () {
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        (function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.resolve().then(function () { return __importStar(require('@speechly/browser-ui/core/transcript-drawer')); })];
                    case 1:
                        _a.sent();
                        setLoaded(true);
                        return [2 /*return*/];
                }
            });
        }); })();
    }, []);
    (0, react_1.useEffect)(function () {
        if ((refElement === null || refElement === void 0 ? void 0 : refElement.current) !== undefined) {
            refElement.current.speechstate((0, types_1.mapSpeechStateToClientState)(speechState));
        }
    }, [speechState]);
    (0, react_1.useEffect)(function () {
        if ((refElement === null || refElement === void 0 ? void 0 : refElement.current) !== undefined && segment !== undefined) {
            setDemoMode(false);
            refElement.current.speechsegment(segment);
        }
    }, [segment]);
    (0, react_1.useEffect)(function () {
        if ((refElement === null || refElement === void 0 ? void 0 : refElement.current) !== undefined && props.mockSegment !== undefined) {
            setDemoMode(true);
            refElement.current.speechsegment(props.mockSegment);
        }
    }, [props.mockSegment]);
    if (!loaded)
        return null;
    return (react_1.default.createElement("transcript-drawer", { ref: refElement, demomode: demoMode ? 'true' : 'false', formattext: props.formatText === false ? 'false' : 'true', fontsize: props.fontSize, color: props.color, smalltextcolor: props.smallTextColor, highlightcolor: props.highlightColor, backgroundcolor: props.backgroundColor, marginbottom: props.marginBottom, hint: JSON.stringify(props.hint), height: props.height, hintfontsize: props.hintFontSize }));
};
exports.TranscriptDrawer = TranscriptDrawer;
//# sourceMappingURL=TranscriptDrawer.js.map