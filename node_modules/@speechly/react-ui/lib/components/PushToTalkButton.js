"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PushToTalkButton = void 0;
var react_1 = __importStar(require("react"));
var react_client_1 = require("@speechly/react-client");
var pubsub_js_1 = __importDefault(require("pubsub-js"));
var types_1 = require("../types");
var __1 = require("..");
var PushToTalkButton = function (_a) {
    var _b = _a.powerOn, powerOn = _b === void 0 ? false : _b, _c = _a.hide, hide = _c === void 0 ? false : _c, captureKey = _a.captureKey, _d = _a.size, size = _d === void 0 ? '6.0rem' : _d, _e = _a.gradientStops, gradientStops = _e === void 0 ? ['#15e8b5', '#4fa1f9'] : _e, _f = _a.intro, intro = _f === void 0 ? 'Hold to talk' : _f, _g = _a.hint, hint = _g === void 0 ? 'Hold to talk' : _g, fontSize = _a.fontSize, showTime = _a.showTime, textColor = _a.textColor, backgroundColor = _a.backgroundColor, placement = _a.placement, voffset = _a.voffset, _h = _a.tapToTalkTime, tapToTalkTime = _h === void 0 ? 8000 : _h, _j = _a.silenceToHangupTime, silenceToHangupTime = _j === void 0 ? 1000 : _j;
    var _k = (0, react_client_1.useSpeechContext)(), speechState = _k.speechState, toggleRecording = _k.toggleRecording, initialise = _k.initialise, segment = _k.segment;
    var _l = (0, react_1.useState)(false), loaded = _l[0], setLoaded = _l[1];
    var _m = (0, react_1.useState)((powerOn ? react_client_1.SpeechState.Idle : react_client_1.SpeechState.Ready)), icon = _m[0], setIcon = _m[1];
    var _o = (0, react_1.useState)(intro), hintText = _o[0], setHintText = _o[1];
    var _p = (0, react_1.useState)(true), showHint = _p[0], setShowHint = _p[1];
    var buttonStateRef = (0, react_1.useRef)({
        tapListenActive: false,
        tapListenTimeout: null,
    });
    var buttonRef = (0, react_1.useRef)();
    var speechStateRef = (0, react_1.useRef)();
    var TAP_TRESHOLD_MS = 600;
    // make stateRef always have the current count
    // your "fixed" callbacks can refer to this object whenever
    // they need the current value.  Note: the callbacks will not
    // be reactive - they will not re-run the instant state changes,
    // but they *will* see the current value whenever they do run
    speechStateRef.current = speechState;
    // Dynamic import of HTML custom element to play nice with Next.js SSR
    (0, react_1.useEffect)(function () {
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        (function () { return __awaiter(void 0, void 0, void 0, function () {
            var import1, import2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        import1 = Promise.resolve().then(function () { return __importStar(require('@speechly/browser-ui/core/holdable-button')); });
                        import2 = Promise.resolve().then(function () { return __importStar(require('@speechly/browser-ui/core/call-out')); });
                        return [4 /*yield*/, Promise.all([import1, import2])];
                    case 1:
                        _a.sent();
                        setLoaded(true);
                        return [2 /*return*/];
                }
            });
        }); })();
    }, []);
    (0, react_1.useEffect)(function () {
        // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
        if (buttonRef === null || buttonRef === void 0 ? void 0 : buttonRef.current) {
            var button = buttonRef.current;
            button.onholdstart = tangentPressAction;
            button.onholdend = tangentReleaseAction;
        }
    });
    (0, react_1.useEffect)(function () {
        var _a;
        // Change button face according to Speechly states
        if (!powerOn && speechState === react_client_1.SpeechState.Idle) {
            setIcon(react_client_1.SpeechState.Ready);
        }
        else {
            setIcon(speechState);
        }
        // Automatically start recording if button held
        if (!powerOn && (((_a = buttonRef === null || buttonRef === void 0 ? void 0 : buttonRef.current) === null || _a === void 0 ? void 0 : _a.isbuttonpressed()) === true || buttonStateRef.current.tapListenActive) && speechState === react_client_1.SpeechState.Ready) {
            toggleRecording().catch(function (err) { return console.error('Error while starting to record', err); });
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [speechState]);
    var tangentPressAction = function () {
        pubsub_js_1.default.publish(types_1.SpeechlyUiEvents.TangentPress, { state: speechStateRef.current });
        window.postMessage({ type: 'holdstart', state: (0, types_1.mapSpeechStateToClientState)(speechStateRef.current !== undefined ? speechStateRef.current : react_client_1.SpeechState.Idle) }, '*');
        setShowHint(false);
        if (buttonStateRef.current.tapListenTimeout) {
            window.clearTimeout(buttonStateRef.current.tapListenTimeout);
            buttonStateRef.current.tapListenTimeout = null;
        }
        switch (speechStateRef.current) {
            case react_client_1.SpeechState.Idle:
            case react_client_1.SpeechState.Failed:
                // Speechly & Mic initialise needs to be in a function triggered by event handler
                // otherwise it won't work reliably on Safari iOS as of 11/2020
                initialise().catch(function (err) { return console.error('Error initiasing Speechly', err); });
                break;
            case react_client_1.SpeechState.Ready:
                toggleRecording().catch(function (err) { return console.error('Error while starting to record', err); });
                break;
            default:
                break;
        }
    };
    var tangentReleaseAction = function (event) {
        pubsub_js_1.default.publish(types_1.SpeechlyUiEvents.TangentRelease, { state: speechStateRef.current, timeMs: event.timeMs });
        window.postMessage({ type: 'holdend' }, '*');
        if (event.timeMs < TAP_TRESHOLD_MS) {
            if (tapToTalkTime === 0) {
                setHintText(hint);
                setShowHint(true);
            }
            else {
                // Short press when not recording = schedule "silence based stop"
                if (!buttonStateRef.current.tapListenActive) {
                    setStopContextTimeout(tapToTalkTime);
                }
            }
        }
        if (!buttonStateRef.current.tapListenTimeout) {
            stopListening();
        }
    };
    var setStopContextTimeout = function (timeoutMs) {
        if (isStoppable(speechState)) {
            buttonStateRef.current.tapListenActive = true;
            if (buttonStateRef.current.tapListenTimeout) {
                window.clearTimeout(buttonStateRef.current.tapListenTimeout);
            }
            buttonStateRef.current.tapListenTimeout = window.setTimeout(function () {
                buttonStateRef.current.tapListenTimeout = null;
                stopListening();
            }, timeoutMs);
        }
    };
    var stopListening = function () {
        buttonStateRef.current.tapListenActive = false;
        if (isStoppable(speechStateRef.current)) {
            toggleRecording().catch(function (err) { return console.error('Error while stopping recording', err); });
        }
    };
    /**
     * Extend listening time if segment updates received
     */
    (0, react_1.useEffect)(function () {
        if (segment) {
            if (buttonStateRef.current.tapListenTimeout) {
                setStopContextTimeout(silenceToHangupTime);
            }
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [segment]);
    var isStoppable = function (s) {
        return (s === react_client_1.SpeechState.Recording);
    };
    if (!loaded)
        return null;
    return (react_1.default.createElement("div", null,
        (placement === 'bottom') && (react_1.default.createElement(__1.PushToTalkButtonContainer, { size: size, voffset: voffset },
            react_1.default.createElement("holdable-button", { ref: buttonRef, poweron: powerOn, capturekey: captureKey, icon: icon, size: size, gradientstop1: gradientStops[0], gradientstop2: gradientStops[1], hide: hide ? 'true' : 'false' }),
            react_1.default.createElement("call-out", { show: showHint && hintText !== '', fontsize: fontSize, textcolor: textColor, backgroundcolor: backgroundColor, showtime: showTime }, hintText))),
        (placement !== 'bottom') && (react_1.default.createElement(react_1.default.Fragment, null,
            react_1.default.createElement("holdable-button", { ref: buttonRef, poweron: powerOn, capturekey: captureKey, icon: icon, size: size, gradientstop1: gradientStops[0], gradientstop2: gradientStops[1], hide: hide ? 'true' : 'false' }),
            react_1.default.createElement("call-out", { show: showHint && hintText !== '', fontsize: fontSize, textcolor: textColor, backgroundcolor: backgroundColor, showtime: showTime }, hintText)))));
};
exports.PushToTalkButton = PushToTalkButton;
//# sourceMappingURL=PushToTalkButton.js.map